// Code generated by tutone: DO NOT EDIT
package apiaccess

// ApiAccessIngestKeyErrorType - The type of error.
type ApiAccessIngestKeyErrorType string

var ApiAccessIngestKeyErrorTypeTypes = struct {
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN ApiAccessIngestKeyErrorType
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID ApiAccessIngestKeyErrorType
	// Occurs when the requested key `id` was not found.
	NOT_FOUND ApiAccessIngestKeyErrorType
}{
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN: "FORBIDDEN",
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID: "INVALID",
	// Occurs when the requested key `id` was not found.
	NOT_FOUND: "NOT_FOUND",
}

// ApiAccessIngestKeyType - The type of ingest key, which dictates what types of agents can use it to report.
type ApiAccessIngestKeyType string

var ApiAccessIngestKeyTypeTypes = struct {
	// Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
	BROWSER ApiAccessIngestKeyType
	// For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
	LICENSE ApiAccessIngestKeyType
}{
	// Ingest keys of type `BROWSER` mean browser agents will use them to report data to New Relic.
	BROWSER: "BROWSER",
	// For ingest keys of type `LICENSE`: APM and Infrastructure agents use the key to report data to New Relic.
	LICENSE: "LICENSE",
}

// ApiAccessKeyType - The type of key.
type ApiAccessKeyType string

var ApiAccessKeyTypeTypes = struct {
	// An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
	INGEST ApiAccessKeyType
	// A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
	USER ApiAccessKeyType
}{
	// An ingest key is used by New Relic agents to authenticate with New Relic and send data to the assigned account.
	INGEST: "INGEST",
	// A user key is used by New Relic users to authenticate with New Relic and to interact with the New Relic GraphQL API .
	USER: "USER",
}

// ApiAccessUserKeyErrorType - The type of error.
type ApiAccessUserKeyErrorType string

var ApiAccessUserKeyErrorTypeTypes = struct {
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN ApiAccessUserKeyErrorType
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID ApiAccessUserKeyErrorType
	// Occurs when the requested key `id` was not found.
	NOT_FOUND ApiAccessUserKeyErrorType
}{
	// Occurs when the user issuing the mutation does not have sufficient permissions to perform the action for a key.
	FORBIDDEN: "FORBIDDEN",
	// Occurs when the action taken on a key did not successfully pass validation.
	INVALID: "INVALID",
	// Occurs when the requested key `id` was not found.
	NOT_FOUND: "NOT_FOUND",
}

// ApiAccessActorStitchedFields -
type ApiAccessActorStitchedFields struct {
	// Fetch a single key by ID and type.
	Key ApiAccessKey `json:"key"`
	// A list of keys scoped to the current actor and filter arguments. You can read more about managing keys on [this documentation page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/use-nerdgraph-manage-license-keys-personal-api-keys).
	KeySearch ApiAccessKeySearchResult `json:"keySearch"`
}

// ApiAccessCreateIngestKeyInput - The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
type ApiAccessCreateIngestKeyInput struct {
	// The account ID indicating which account you want to make the key for. This cannot be updated once created.
	AccountID int `json:"accountId"`
	// The type of ingest key you want to create. This cannot be updated once created.
	IngestType ApiAccessIngestKeyType `json:"ingestType"`
	// The name of the key. This can be updated later.
	Name string `json:"name"`
	// Any notes about this ingest key. This can be updated later.
	Notes string `json:"notes"`
}

// ApiAccessCreateInput - The input object to create one or more keys.
type ApiAccessCreateInput struct {
	// Ingest keys are used by agents to report data about your applications to New Relic. Each ingest key input entered here must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
	Ingest []ApiAccessCreateIngestKeyInput `json:"ingest"`
	// Create user keys. You can optionally add a name or notes to your key, which can be updated later.
	User []ApiAccessCreateUserKeyInput `json:"user"`
}

// ApiAccessCreateKeyResponse - The response of the create keys mutation.
type ApiAccessCreateKeyResponse struct {
	// Lists all successfully created keys.
	CreatedKeys []ApiAccessKeyInterface `json:"createdKeys"`
	// Lists all errors for keys that could not be created. Each error maps to a single key input.
	Errors []ApiAccessKeyErrorInterface `json:"errors"`
}

// ApiAccessCreateUserKeyInput - The input for any ingest keys you want to create. Each ingest key must have a type that communicates what kind of data it is for. You can optionally add a name or notes to your key, which can be updated later.
type ApiAccessCreateUserKeyInput struct {
	// The account ID indicating which account you want to make the key for. This cannot be updated once created.
	AccountID int `json:"accountId"`
	// The name of the key. This can be updated later.
	Name string `json:"name"`
	// Any notes about this ingest key. This can be updated later.
	Notes string `json:"notes"`
	// The user ID indicating which user you want to make the key for. This cannot be updated once created.
	UserID int `json:"userId"`
}

// ApiAccessDeleteInput - The input to delete keys.
type ApiAccessDeleteInput struct {
	// A list of the ingest key `id`s that you want to delete.
	IngestKeyIDs []string `json:"ingestKeyIds"`
	// A list of the user key `id`s that you want to delete.
	UserKeyIDs []string `json:"userKeyIds"`
}

// ApiAccessDeleteKeyResponse - The response of the key delete mutation.
type ApiAccessDeleteKeyResponse struct {
	// The `id`s of the successfully deleted ingest keys and any errors that occurred when deleting keys.
	DeletedKeys []ApiAccessDeletedKey `json:"deletedKeys"`
	// Lists all errors for keys that could not be deleted. Each error maps to a single key input.
	Errors []ApiAccessKeyErrorInterface `json:"errors"`
}

// ApiAccessDeletedKey - The deleted key response of the key delete mutation.
type ApiAccessDeletedKey struct {
	// The `id` of the deleted key.
	ID string `json:"id"`
}

// ApiAccessKey - A key for accessing New Relic APIs.
type ApiAccessKey struct {
	// The ID of the key. This can be used to identify a key without revealing the key itself (used to update and delete).
	ID string `json:"id"`
	// The keystring of the key.
	Key string `json:"key"`
	// The name of the key. This can be used a short identifier for easy reference.
	Name string `json:"name"`
	// Any notes can be attached to a key. This is intended for more a more detailed description of the key use if desired.
	Notes string `json:"notes"`
	// The type of key, indicating what New Relic APIs it can be used to access.
	Type ApiAccessKeyType `json:"type"`
}

func (x *ApiAccessKey) ImplementsApiAccessKey() {}

// ApiAccessKeyError - A key error. Each error maps to a single key input.
type ApiAccessKeyError struct {
	// A message about why the key creation failed.
	Message string `json:"message"`
	// The type of the key.
	Type ApiAccessKeyType `json:"type"`
}

func (x *ApiAccessKeyError) ImplementsApiAccessKeyError() {}

// ApiAccessKeySearchQuery - Parameters by which to filter the search.
type ApiAccessKeySearchQuery struct {
	// Criteria by which to narrow the scope of keys to be returned.
	Scope ApiAccessKeySearchScope `json:"scope"`
	// A list of key types to be included in the search. If no types are provided, all types will be returned by default.
	Types []ApiAccessKeyType `json:"types"`
}

// ApiAccessKeySearchResult - A list of all keys scoped to the current actor.
type ApiAccessKeySearchResult struct {
	// A list of all keys scoped to the current actor.
	Keys []ApiAccessKeyInterface `json:"keys"`
	// The next cursor, used for pagination. If a cursor is present, it means more keys can be fetched.
	NextCursor string `json:"nextCursor"`
}

// ApiAccessKeySearchScope - The scope of keys to be returned. Note that some filters only apply to certain key types.
type ApiAccessKeySearchScope struct {
	// A list of key account IDs.
	AccountIDs []int `json:"accountIds"`
	// The ingest type of the key. Only applies to ingest keys, and does not affect user key filtering.
	IngestTypes []ApiAccessIngestKeyType `json:"ingestTypes"`
	// A list of key user ids. Only applies to user keys, and does not affect ingest key filtering.
	UserIDs []int `json:"userIds"`
}

// ApiAccessUpdateIngestKeyInput - The `id` and data to update one or more keys.
type ApiAccessUpdateIngestKeyInput struct {
	// The `id` of the key you want to update.
	KeyID string `json:"keyId"`
	// The name you want to assign to the key.
	Name string `json:"name"`
	// The notes you want to assign to the key.
	Notes string `json:"notes"`
}

// ApiAccessUpdateInput - The `id` and data to update one or more keys.
type ApiAccessUpdateInput struct {
	// A list of the configurations of each ingest key you want to update.
	Ingest []ApiAccessUpdateIngestKeyInput `json:"ingest"`
	// A list of the configurations of each user key you want to update.
	User []ApiAccessUpdateUserKeyInput `json:"user"`
}

// ApiAccessUpdateKeyResponse - The response of the update keys mutation.
type ApiAccessUpdateKeyResponse struct {
	// Lists all errors for keys that could not be updated. Each error maps to a single key input.
	Errors []ApiAccessKeyErrorInterface `json:"errors"`
	// Lists all successfully updated keys.
	UpdatedKeys []ApiAccessKeyInterface `json:"updatedKeys"`
}

// ApiAccessUpdateUserKeyInput - The `id` and data to update one or more keys.
type ApiAccessUpdateUserKeyInput struct {
	// The `id` of the key you want to update.
	KeyID string `json:"keyId"`
	// The name you want to assign to the key.
	Name string `json:"name"`
	// The notes you want to assign to the key.
	Notes string `json:"notes"`
}

// ApiAccessKeyError - A key error. Each error maps to a single key input.
type ApiAccessKeyErrorInterface interface {
	ImplementsApiAccessKeyErrorInterface()
}

// ApiAccessKey - A key for accessing New Relic APIs.
type ApiAccessKeyInterface interface {
	ImplementsApiAccessKeyInterface()
}

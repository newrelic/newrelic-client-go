// Code generated by tutone: DO NOT EDIT
package cloud

import (
	"encoding/json"
	"fmt"

	"github.com/newrelic/newrelic-client-go/internal/serialization"
)

// Actor - The `Actor` object contains fields that are scoped to the API user's access level.
type Actor struct {
	// The `cloud` field provides access to cloud integrations configuration data scoped to the Actor.
	Cloud CloudActorFields `json:"cloud"`
}

// CloudAPIgatewayIntegration - API Gateway Integration
type CloudAPIgatewayIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
	StagePrefixes []string `json:"stagePrefixes"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAPIgatewayIntegration) ImplementsCloudIntegration() {}

// CloudAPIgatewayIntegrationInput - Amazon API Gateway
type CloudAPIgatewayIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.
	StagePrefixes []string `json:"stagePrefixes"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudAccountMutationError - Account Mutation Error
type CloudAccountMutationError struct {
	// The passed linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The error message.
	Message string `json:"message"`
	// The passed newrelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The passed provider slug.
	ProviderSlug string `json:"providerSlug"`
	// The error status.
	Type string `json:"type"`
}

// CloudActorFields -
type CloudActorFields struct {
	// Get all linked cloud provider accounts scoped to the Actor.
	LinkedAccounts []CloudLinkedAccount `json:"linkedAccounts"`
}

// CloudAlbIntegration - ALB/NLB Integration
type CloudAlbIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
	LoadBalancerPrefixes []string `json:"loadBalancerPrefixes"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAlbIntegration) ImplementsCloudIntegration() {}

// CloudAlbIntegrationInput - Elastic Load Balancing - Application Load Balancer (ALB)
type CloudAlbIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.
	LoadBalancerPrefixes []string `json:"loadBalancerPrefixes"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudAutoscalingIntegration - AutoScaling Integration
type CloudAutoscalingIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAutoscalingIntegration) ImplementsCloudIntegration() {}

// CloudAutoscalingIntegrationInput - AWS Auto Scaling
type CloudAutoscalingIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsAppsyncIntegration - AppSync Integration
type CloudAwsAppsyncIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsAppsyncIntegration) ImplementsCloudIntegration() {}

// CloudAwsAppsyncIntegrationInput - AppSync
type CloudAwsAppsyncIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsAthenaIntegration - Athena Integration
type CloudAwsAthenaIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsAthenaIntegration) ImplementsCloudIntegration() {}

// CloudAwsAthenaIntegrationInput - Athena
type CloudAwsAthenaIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsCognitoIntegration - Cognito Integration
type CloudAwsCognitoIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsCognitoIntegration) ImplementsCloudIntegration() {}

// CloudAwsCognitoIntegrationInput - Cognito
type CloudAwsCognitoIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsConnectIntegration - Connect Integration
type CloudAwsConnectIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsConnectIntegration) ImplementsCloudIntegration() {}

// CloudAwsConnectIntegrationInput - Connect
type CloudAwsConnectIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsDirectconnectIntegration - Direct Connect Integration
type CloudAwsDirectconnectIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsDirectconnectIntegration) ImplementsCloudIntegration() {}

// CloudAwsDirectconnectIntegrationInput - Direct Connect
type CloudAwsDirectconnectIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsDisableIntegrationsInput - List of integrations
type CloudAwsDisableIntegrationsInput struct {
	// API Gateway integration
	APIgateway []CloudDisableAccountIntegrationInput `json:"apigateway"`
	// ALB/NLB integration
	Alb []CloudDisableAccountIntegrationInput `json:"alb"`
	// AutoScaling integration
	Autoscaling []CloudDisableAccountIntegrationInput `json:"autoscaling"`
	// AppSync integration
	AwsAppsync []CloudDisableAccountIntegrationInput `json:"awsAppsync"`
	// Athena integration
	AwsAthena []CloudDisableAccountIntegrationInput `json:"awsAthena"`
	// Cognito integration
	AwsCognito []CloudDisableAccountIntegrationInput `json:"awsCognito"`
	// Connect integration
	AwsConnect []CloudDisableAccountIntegrationInput `json:"awsConnect"`
	// Direct Connect integration
	AwsDirectconnect []CloudDisableAccountIntegrationInput `json:"awsDirectconnect"`
	// DocumentDB integration
	AwsDocdb []CloudDisableAccountIntegrationInput `json:"awsDocdb"`
	// FSx integration
	AwsFsx []CloudDisableAccountIntegrationInput `json:"awsFsx"`
	// Glue integration
	AwsGlue []CloudDisableAccountIntegrationInput `json:"awsGlue"`
	// Kinesis Data Analytics integration
	AwsKinesisanalytics []CloudDisableAccountIntegrationInput `json:"awsKinesisanalytics"`
	// Elemental MediaConvert integration
	AwsMediaconvert []CloudDisableAccountIntegrationInput `json:"awsMediaconvert"`
	// MediaPackage VOD integration
	AwsMediapackagevod []CloudDisableAccountIntegrationInput `json:"awsMediapackagevod"`
	// MQ integration
	AwsMq []CloudDisableAccountIntegrationInput `json:"awsMq"`
	// Managed Kafka integration
	AwsMsk []CloudDisableAccountIntegrationInput `json:"awsMsk"`
	// Neptune integration
	AwsNeptune []CloudDisableAccountIntegrationInput `json:"awsNeptune"`
	// QLDB integration
	AwsQldb []CloudDisableAccountIntegrationInput `json:"awsQldb"`
	// Route53 Resolver integration
	AwsRoute53resolver []CloudDisableAccountIntegrationInput `json:"awsRoute53resolver"`
	// Step Functions integration
	AwsStates []CloudDisableAccountIntegrationInput `json:"awsStates"`
	// Transit Gateway integration
	AwsTransitgateway []CloudDisableAccountIntegrationInput `json:"awsTransitgateway"`
	// WAF integration
	AwsWaf []CloudDisableAccountIntegrationInput `json:"awsWaf"`
	// WAFV2 integration
	AwsWafv2 []CloudDisableAccountIntegrationInput `json:"awsWafv2"`
	// X-Ray integration
	AwsXray []CloudDisableAccountIntegrationInput `json:"awsXray"`
	// Billing integration
	Billing []CloudDisableAccountIntegrationInput `json:"billing"`
	// CloudFront integration
	Cloudfront []CloudDisableAccountIntegrationInput `json:"cloudfront"`
	// CloudTrail integration
	Cloudtrail []CloudDisableAccountIntegrationInput `json:"cloudtrail"`
	// DynamoDB integration
	Dynamodb []CloudDisableAccountIntegrationInput `json:"dynamodb"`
	// EBS integration
	Ebs []CloudDisableAccountIntegrationInput `json:"ebs"`
	// EC2 integration
	Ec2 []CloudDisableAccountIntegrationInput `json:"ec2"`
	// ECS integration
	Ecs []CloudDisableAccountIntegrationInput `json:"ecs"`
	// EFS integration
	Efs []CloudDisableAccountIntegrationInput `json:"efs"`
	// ElastiCache integration
	Elasticache []CloudDisableAccountIntegrationInput `json:"elasticache"`
	// Elastic Beanstalk integration
	Elasticbeanstalk []CloudDisableAccountIntegrationInput `json:"elasticbeanstalk"`
	// Elasticsearch Service integration
	Elasticsearch []CloudDisableAccountIntegrationInput `json:"elasticsearch"`
	// ELB (Classic) integration
	Elb []CloudDisableAccountIntegrationInput `json:"elb"`
	// EMR integration
	Emr []CloudDisableAccountIntegrationInput `json:"emr"`
	// Health integration
	Health []CloudDisableAccountIntegrationInput `json:"health"`
	// IAM integration
	Iam []CloudDisableAccountIntegrationInput `json:"iam"`
	// IoT integration
	Iot []CloudDisableAccountIntegrationInput `json:"iot"`
	// Kinesis Streams integration
	Kinesis []CloudDisableAccountIntegrationInput `json:"kinesis"`
	// Kinesis Firehose integration
	KinesisFirehose []CloudDisableAccountIntegrationInput `json:"kinesisFirehose"`
	// Lambda integration
	Lambda []CloudDisableAccountIntegrationInput `json:"lambda"`
	// RDS integration
	Rds []CloudDisableAccountIntegrationInput `json:"rds"`
	// Redshift integration
	Redshift []CloudDisableAccountIntegrationInput `json:"redshift"`
	// Route 53 integration
	Route53 []CloudDisableAccountIntegrationInput `json:"route53"`
	// S3 integration
	S3 []CloudDisableAccountIntegrationInput `json:"s3"`
	// SES integration
	Ses []CloudDisableAccountIntegrationInput `json:"ses"`
	// SNS integration
	Sns []CloudDisableAccountIntegrationInput `json:"sns"`
	// SQS integration
	Sqs []CloudDisableAccountIntegrationInput `json:"sqs"`
	// Trusted Advisor integration
	Trustedadvisor []CloudDisableAccountIntegrationInput `json:"trustedadvisor"`
	// VPC integration
	Vpc []CloudDisableAccountIntegrationInput `json:"vpc"`
}

// CloudAwsDocdbIntegration - DocumentDB Integration
type CloudAwsDocdbIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsDocdbIntegration) ImplementsCloudIntegration() {}

// CloudAwsDocdbIntegrationInput - DocumentDB
type CloudAwsDocdbIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsFsxIntegration - FSx Integration
type CloudAwsFsxIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsFsxIntegration) ImplementsCloudIntegration() {}

// CloudAwsFsxIntegrationInput - FSx
type CloudAwsFsxIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsGlueIntegration - Glue Integration
type CloudAwsGlueIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsGlueIntegration) ImplementsCloudIntegration() {}

// CloudAwsGlueIntegrationInput - Glue
type CloudAwsGlueIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsGovCloudProvider - The Amazon Web Services cloud provider (GovCloud)
type CloudAwsGovCloudProvider struct {
	// The AWS Account ID
	AwsAccountId string `json:"awsAccountId"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud provider identifier in NewRelic.
	ID int `json:"id"`
	// The cloud provider icon name.
	Icon string `json:"icon"`
	// The cloud provider name.
	Name string `json:"name"`
	// Get details of one cloud provider service.
	Service CloudService `json:"service"`
	// Get details of all the cloud provider services available for integration.
	Services []CloudService `json:"services"`
	// The cloud provider short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsGovCloudProvider) ImplementsCloudProvider() {}

// CloudAwsGovcloudDisableIntegrationsInput - List of integrations
type CloudAwsGovcloudDisableIntegrationsInput struct {
	// API Gateway integration
	APIgateway []CloudDisableAccountIntegrationInput `json:"apigateway"`
	// ALB/NLB integration
	Alb []CloudDisableAccountIntegrationInput `json:"alb"`
	// AutoScaling integration
	Autoscaling []CloudDisableAccountIntegrationInput `json:"autoscaling"`
	// Direct Connect integration
	AwsDirectconnect []CloudDisableAccountIntegrationInput `json:"awsDirectconnect"`
	// Step Functions integration
	AwsStates []CloudDisableAccountIntegrationInput `json:"awsStates"`
	// CloudTrail integration
	Cloudtrail []CloudDisableAccountIntegrationInput `json:"cloudtrail"`
	// DynamoDB integration
	Dynamodb []CloudDisableAccountIntegrationInput `json:"dynamodb"`
	// EBS integration
	Ebs []CloudDisableAccountIntegrationInput `json:"ebs"`
	// EC2 integration
	Ec2 []CloudDisableAccountIntegrationInput `json:"ec2"`
	// Elasticsearch Service integration
	Elasticsearch []CloudDisableAccountIntegrationInput `json:"elasticsearch"`
	// ELB (Classic) integration
	Elb []CloudDisableAccountIntegrationInput `json:"elb"`
	// EMR integration
	Emr []CloudDisableAccountIntegrationInput `json:"emr"`
	// IAM integration
	Iam []CloudDisableAccountIntegrationInput `json:"iam"`
	// Lambda integration
	Lambda []CloudDisableAccountIntegrationInput `json:"lambda"`
	// RDS integration
	Rds []CloudDisableAccountIntegrationInput `json:"rds"`
	// Redshift integration
	Redshift []CloudDisableAccountIntegrationInput `json:"redshift"`
	// Route 53 integration
	Route53 []CloudDisableAccountIntegrationInput `json:"route53"`
	// S3 integration
	S3 []CloudDisableAccountIntegrationInput `json:"s3"`
	// SNS integration
	Sns []CloudDisableAccountIntegrationInput `json:"sns"`
	// SQS integration
	Sqs []CloudDisableAccountIntegrationInput `json:"sqs"`
}

// CloudAwsGovcloudIntegrationsInput - List of integrations
type CloudAwsGovcloudIntegrationsInput struct {
	// API Gateway integration
	APIgateway []CloudAPIgatewayIntegrationInput `json:"apigateway"`
	// ALB/NLB integration
	Alb []CloudAlbIntegrationInput `json:"alb"`
	// AutoScaling integration
	Autoscaling []CloudAutoscalingIntegrationInput `json:"autoscaling"`
	// Direct Connect integration
	AwsDirectconnect []CloudAwsDirectconnectIntegrationInput `json:"awsDirectconnect"`
	// Step Functions integration
	AwsStates []CloudAwsStatesIntegrationInput `json:"awsStates"`
	// CloudTrail integration
	Cloudtrail []CloudCloudtrailIntegrationInput `json:"cloudtrail"`
	// DynamoDB integration
	Dynamodb []CloudDynamodbIntegrationInput `json:"dynamodb"`
	// EBS integration
	Ebs []CloudEbsIntegrationInput `json:"ebs"`
	// EC2 integration
	Ec2 []CloudEc2IntegrationInput `json:"ec2"`
	// Elasticsearch Service integration
	Elasticsearch []CloudElasticsearchIntegrationInput `json:"elasticsearch"`
	// ELB (Classic) integration
	Elb []CloudElbIntegrationInput `json:"elb"`
	// EMR integration
	Emr []CloudEmrIntegrationInput `json:"emr"`
	// IAM integration
	Iam []CloudIamIntegrationInput `json:"iam"`
	// Lambda integration
	Lambda []CloudLambdaIntegrationInput `json:"lambda"`
	// RDS integration
	Rds []CloudRdsIntegrationInput `json:"rds"`
	// Redshift integration
	Redshift []CloudRedshiftIntegrationInput `json:"redshift"`
	// Route 53 integration
	Route53 []CloudRoute53IntegrationInput `json:"route53"`
	// S3 integration
	S3 []CloudS3IntegrationInput `json:"s3"`
	// SNS integration
	Sns []CloudSnsIntegrationInput `json:"sns"`
	// SQS integration
	Sqs []CloudSqsIntegrationInput `json:"sqs"`
}

// CloudAwsGovcloudLinkAccountInput - Information required to link an AWS GovCloud account to a NewRelic account.
type CloudAwsGovcloudLinkAccountInput struct {
	// The key used to make requests to AWS service APIs
	AccessKeyId string `json:"accessKeyId"`
	// The AWS account id
	AwsAccountId string `json:"awsAccountId"`
	// The linked account name.
	Name string `json:"name"`
	// The secret key used to make requests to AWS service APIs
	SecretAccessKey SecureValue `json:"secretAccessKey"`
}

// CloudAwsIntegrationsInput - List of integrations
type CloudAwsIntegrationsInput struct {
	// API Gateway integration
	APIgateway []CloudAPIgatewayIntegrationInput `json:"apigateway"`
	// ALB/NLB integration
	Alb []CloudAlbIntegrationInput `json:"alb"`
	// AutoScaling integration
	Autoscaling []CloudAutoscalingIntegrationInput `json:"autoscaling"`
	// AppSync integration
	AwsAppsync []CloudAwsAppsyncIntegrationInput `json:"awsAppsync"`
	// Athena integration
	AwsAthena []CloudAwsAthenaIntegrationInput `json:"awsAthena"`
	// Cognito integration
	AwsCognito []CloudAwsCognitoIntegrationInput `json:"awsCognito"`
	// Connect integration
	AwsConnect []CloudAwsConnectIntegrationInput `json:"awsConnect"`
	// Direct Connect integration
	AwsDirectconnect []CloudAwsDirectconnectIntegrationInput `json:"awsDirectconnect"`
	// DocumentDB integration
	AwsDocdb []CloudAwsDocdbIntegrationInput `json:"awsDocdb"`
	// FSx integration
	AwsFsx []CloudAwsFsxIntegrationInput `json:"awsFsx"`
	// Glue integration
	AwsGlue []CloudAwsGlueIntegrationInput `json:"awsGlue"`
	// Kinesis Data Analytics integration
	AwsKinesisanalytics []CloudAwsKinesisanalyticsIntegrationInput `json:"awsKinesisanalytics"`
	// Elemental MediaConvert integration
	AwsMediaconvert []CloudAwsMediaconvertIntegrationInput `json:"awsMediaconvert"`
	// MediaPackage VOD integration
	AwsMediapackagevod []CloudAwsMediapackagevodIntegrationInput `json:"awsMediapackagevod"`
	// MQ integration
	AwsMq []CloudAwsMqIntegrationInput `json:"awsMq"`
	// Managed Kafka integration
	AwsMsk []CloudAwsMskIntegrationInput `json:"awsMsk"`
	// Neptune integration
	AwsNeptune []CloudAwsNeptuneIntegrationInput `json:"awsNeptune"`
	// QLDB integration
	AwsQldb []CloudAwsQldbIntegrationInput `json:"awsQldb"`
	// Route53 Resolver integration
	AwsRoute53resolver []CloudAwsRoute53resolverIntegrationInput `json:"awsRoute53resolver"`
	// Step Functions integration
	AwsStates []CloudAwsStatesIntegrationInput `json:"awsStates"`
	// Transit Gateway integration
	AwsTransitgateway []CloudAwsTransitgatewayIntegrationInput `json:"awsTransitgateway"`
	// WAF integration
	AwsWaf []CloudAwsWafIntegrationInput `json:"awsWaf"`
	// WAFV2 integration
	AwsWafv2 []CloudAwsWafv2IntegrationInput `json:"awsWafv2"`
	// X-Ray integration
	AwsXray []CloudAwsXrayIntegrationInput `json:"awsXray"`
	// Billing integration
	Billing []CloudBillingIntegrationInput `json:"billing"`
	// CloudFront integration
	Cloudfront []CloudCloudfrontIntegrationInput `json:"cloudfront"`
	// CloudTrail integration
	Cloudtrail []CloudCloudtrailIntegrationInput `json:"cloudtrail"`
	// DynamoDB integration
	Dynamodb []CloudDynamodbIntegrationInput `json:"dynamodb"`
	// EBS integration
	Ebs []CloudEbsIntegrationInput `json:"ebs"`
	// EC2 integration
	Ec2 []CloudEc2IntegrationInput `json:"ec2"`
	// ECS integration
	Ecs []CloudEcsIntegrationInput `json:"ecs"`
	// EFS integration
	Efs []CloudEfsIntegrationInput `json:"efs"`
	// ElastiCache integration
	Elasticache []CloudElasticacheIntegrationInput `json:"elasticache"`
	// Elastic Beanstalk integration
	Elasticbeanstalk []CloudElasticbeanstalkIntegrationInput `json:"elasticbeanstalk"`
	// Elasticsearch Service integration
	Elasticsearch []CloudElasticsearchIntegrationInput `json:"elasticsearch"`
	// ELB (Classic) integration
	Elb []CloudElbIntegrationInput `json:"elb"`
	// EMR integration
	Emr []CloudEmrIntegrationInput `json:"emr"`
	// Health integration
	Health []CloudHealthIntegrationInput `json:"health"`
	// IAM integration
	Iam []CloudIamIntegrationInput `json:"iam"`
	// IoT integration
	Iot []CloudIotIntegrationInput `json:"iot"`
	// Kinesis Streams integration
	Kinesis []CloudKinesisIntegrationInput `json:"kinesis"`
	// Kinesis Firehose integration
	KinesisFirehose []CloudKinesisFirehoseIntegrationInput `json:"kinesisFirehose"`
	// Lambda integration
	Lambda []CloudLambdaIntegrationInput `json:"lambda"`
	// RDS integration
	Rds []CloudRdsIntegrationInput `json:"rds"`
	// Redshift integration
	Redshift []CloudRedshiftIntegrationInput `json:"redshift"`
	// Route 53 integration
	Route53 []CloudRoute53IntegrationInput `json:"route53"`
	// S3 integration
	S3 []CloudS3IntegrationInput `json:"s3"`
	// SES integration
	Ses []CloudSesIntegrationInput `json:"ses"`
	// SNS integration
	Sns []CloudSnsIntegrationInput `json:"sns"`
	// SQS integration
	Sqs []CloudSqsIntegrationInput `json:"sqs"`
	// Trusted Advisor integration
	Trustedadvisor []CloudTrustedadvisorIntegrationInput `json:"trustedadvisor"`
	// VPC integration
	Vpc []CloudVpcIntegrationInput `json:"vpc"`
}

// CloudAwsKinesisanalyticsIntegration - Kinesis Data Analytics Integration
type CloudAwsKinesisanalyticsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsKinesisanalyticsIntegration) ImplementsCloudIntegration() {}

// CloudAwsKinesisanalyticsIntegrationInput - Kinesis Data Analytics
type CloudAwsKinesisanalyticsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsLinkAccountInput - Information required to link a AWS account to a NewRelic account.
type CloudAwsLinkAccountInput struct {
	// The AWS role ARN (used to fetch data).
	Arn string `json:"arn"`
	// The linked account name.
	Name string `json:"name"`
}

// CloudAwsMediaconvertIntegration - Elemental MediaConvert Integration
type CloudAwsMediaconvertIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsMediaconvertIntegration) ImplementsCloudIntegration() {}

// CloudAwsMediaconvertIntegrationInput - Elemental MediaConvert
type CloudAwsMediaconvertIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsMediapackagevodIntegration - MediaPackage VOD Integration
type CloudAwsMediapackagevodIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsMediapackagevodIntegration) ImplementsCloudIntegration() {}

// CloudAwsMediapackagevodIntegrationInput - MediaPackage VOD
type CloudAwsMediapackagevodIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsMqIntegration - MQ Integration
type CloudAwsMqIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsMqIntegration) ImplementsCloudIntegration() {}

// CloudAwsMqIntegrationInput - MQ
type CloudAwsMqIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsMskIntegration - Managed Kafka Integration
type CloudAwsMskIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsMskIntegration) ImplementsCloudIntegration() {}

// CloudAwsMskIntegrationInput - Managed Kafka
type CloudAwsMskIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsNeptuneIntegration - Neptune Integration
type CloudAwsNeptuneIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsNeptuneIntegration) ImplementsCloudIntegration() {}

// CloudAwsNeptuneIntegrationInput - Neptune
type CloudAwsNeptuneIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsProvider - The Amazon Web Services cloud provider
type CloudAwsProvider struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud provider identifier in NewRelic.
	ID int `json:"id"`
	// The cloud provider icon name.
	Icon string `json:"icon"`
	// The cloud provider name.
	Name string `json:"name"`
	// The New Relic AWS Account ID that will use the Role.
	RoleAccountId string `json:"roleAccountId"`
	// The external ID required to assume the Role by the New Relic Account.
	RoleExternalId string `json:"roleExternalId"`
	// Get details of one cloud provider service.
	Service CloudService `json:"service"`
	// Get details of all the cloud provider services available for integration.
	Services []CloudService `json:"services"`
	// The cloud provider short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsProvider) ImplementsCloudProvider() {}

// CloudAwsQldbIntegration - QLDB Integration
type CloudAwsQldbIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsQldbIntegration) ImplementsCloudIntegration() {}

// CloudAwsQldbIntegrationInput - QLDB
type CloudAwsQldbIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsRoute53resolverIntegration - Route53 Resolver Integration
type CloudAwsRoute53resolverIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsRoute53resolverIntegration) ImplementsCloudIntegration() {}

// CloudAwsRoute53resolverIntegrationInput - Route53 Resolver
type CloudAwsRoute53resolverIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsStatesIntegration - Step Functions Integration
type CloudAwsStatesIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsStatesIntegration) ImplementsCloudIntegration() {}

// CloudAwsStatesIntegrationInput - Step Functions
type CloudAwsStatesIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsTransitgatewayIntegration - Transit Gateway Integration
type CloudAwsTransitgatewayIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsTransitgatewayIntegration) ImplementsCloudIntegration() {}

// CloudAwsTransitgatewayIntegrationInput - Transit Gateway
type CloudAwsTransitgatewayIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsWafIntegration - WAF Integration
type CloudAwsWafIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsWafIntegration) ImplementsCloudIntegration() {}

// CloudAwsWafIntegrationInput - WAF
type CloudAwsWafIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsWafv2Integration - WAFV2 Integration
type CloudAwsWafv2Integration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsWafv2Integration) ImplementsCloudIntegration() {}

// CloudAwsWafv2IntegrationInput - WAFV2
type CloudAwsWafv2IntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAwsXrayIntegration - X-Ray Integration
type CloudAwsXrayIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAwsXrayIntegration) ImplementsCloudIntegration() {}

// CloudAwsXrayIntegrationInput - X-Ray
type CloudAwsXrayIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudAzureAPImanagementIntegration - Api Management Integration
type CloudAzureAPImanagementIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureAPImanagementIntegration) ImplementsCloudIntegration() {}

// CloudAzureAPImanagementIntegrationInput - Api Management
type CloudAzureAPImanagementIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureAppgatewayIntegration - App Gateway Integration
type CloudAzureAppgatewayIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureAppgatewayIntegration) ImplementsCloudIntegration() {}

// CloudAzureAppgatewayIntegrationInput - App Gateway
type CloudAzureAppgatewayIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureAppserviceIntegration - App Service Integration
type CloudAzureAppserviceIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureAppserviceIntegration) ImplementsCloudIntegration() {}

// CloudAzureAppserviceIntegrationInput - Azure App Service
type CloudAzureAppserviceIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureContainersIntegration - Containers Integration
type CloudAzureContainersIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureContainersIntegration) ImplementsCloudIntegration() {}

// CloudAzureContainersIntegrationInput - Containers
type CloudAzureContainersIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureCosmosdbIntegration - Cosmos DB Integration
type CloudAzureCosmosdbIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureCosmosdbIntegration) ImplementsCloudIntegration() {}

// CloudAzureCosmosdbIntegrationInput - Azure Cosmos DB
type CloudAzureCosmosdbIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureCostmanagementIntegration - Cost Management Integration
type CloudAzureCostmanagementIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify if additional cost data per tag should be collected. This field is case sensitive.
	TagKeys []string `json:"tagKeys"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureCostmanagementIntegration) ImplementsCloudIntegration() {}

// CloudAzureCostmanagementIntegrationInput - Cost Management
type CloudAzureCostmanagementIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify if additional cost data per tag should be collected. This field is case sensitive.
	TagKeys []string `json:"tagKeys"`
}

// CloudAzureDatafactoryIntegration - Data Factory Integration
type CloudAzureDatafactoryIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureDatafactoryIntegration) ImplementsCloudIntegration() {}

// CloudAzureDatafactoryIntegrationInput - Data Factory
type CloudAzureDatafactoryIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureDisableIntegrationsInput - List of integrations
type CloudAzureDisableIntegrationsInput struct {
	// Api Management integration
	AzureAPImanagement []CloudDisableAccountIntegrationInput `json:"azureApimanagement"`
	// App Gateway integration
	AzureAppgateway []CloudDisableAccountIntegrationInput `json:"azureAppgateway"`
	// App Service integration
	AzureAppservice []CloudDisableAccountIntegrationInput `json:"azureAppservice"`
	// Containers integration
	AzureContainers []CloudDisableAccountIntegrationInput `json:"azureContainers"`
	// Cosmos DB integration
	AzureCosmosdb []CloudDisableAccountIntegrationInput `json:"azureCosmosdb"`
	// Cost Management integration
	AzureCostmanagement []CloudDisableAccountIntegrationInput `json:"azureCostmanagement"`
	// Data Factory integration
	AzureDatafactory []CloudDisableAccountIntegrationInput `json:"azureDatafactory"`
	// Event Hub integration
	AzureEventhub []CloudDisableAccountIntegrationInput `json:"azureEventhub"`
	// Express Route integration
	AzureExpressroute []CloudDisableAccountIntegrationInput `json:"azureExpressroute"`
	// Firewalls integration
	AzureFirewalls []CloudDisableAccountIntegrationInput `json:"azureFirewalls"`
	// Front Door integration
	AzureFrontdoor []CloudDisableAccountIntegrationInput `json:"azureFrontdoor"`
	// Functions integration
	AzureFunctions []CloudDisableAccountIntegrationInput `json:"azureFunctions"`
	// Key Vault integration
	AzureKeyvault []CloudDisableAccountIntegrationInput `json:"azureKeyvault"`
	// Load Balancer integration
	AzureLoadbalancer []CloudDisableAccountIntegrationInput `json:"azureLoadbalancer"`
	// Logic Apps integration
	AzureLogicapps []CloudDisableAccountIntegrationInput `json:"azureLogicapps"`
	// Machine Learning integration
	AzureMachinelearning []CloudDisableAccountIntegrationInput `json:"azureMachinelearning"`
	// Database for MariaDB integration
	AzureMariadb []CloudDisableAccountIntegrationInput `json:"azureMariadb"`
	// Database for MySQL integration
	AzureMysql []CloudDisableAccountIntegrationInput `json:"azureMysql"`
	// Database for PostgreSQL integration
	AzurePostgresql []CloudDisableAccountIntegrationInput `json:"azurePostgresql"`
	// Power BI Dedicated integration
	AzurePowerbidedicated []CloudDisableAccountIntegrationInput `json:"azurePowerbidedicated"`
	// Redis Cache integration
	AzureRediscache []CloudDisableAccountIntegrationInput `json:"azureRediscache"`
	// Service Bus integration
	AzureServicebus []CloudDisableAccountIntegrationInput `json:"azureServicebus"`
	// Service Fabric integration
	AzureServicefabric []CloudDisableAccountIntegrationInput `json:"azureServicefabric"`
	// SQL Database integration
	AzureSql []CloudDisableAccountIntegrationInput `json:"azureSql"`
	// SQL Managed Instances integration
	AzureSqlmanaged []CloudDisableAccountIntegrationInput `json:"azureSqlmanaged"`
	// Storage integration
	AzureStorage []CloudDisableAccountIntegrationInput `json:"azureStorage"`
	// Virtual machine scale sets integration
	AzureVirtualmachine []CloudDisableAccountIntegrationInput `json:"azureVirtualmachine"`
	// Virtual Network integration
	AzureVirtualnetworks []CloudDisableAccountIntegrationInput `json:"azureVirtualnetworks"`
	// Virtual Machines integration
	AzureVms []CloudDisableAccountIntegrationInput `json:"azureVms"`
	// VPN Gateways integration
	AzureVpngateways []CloudDisableAccountIntegrationInput `json:"azureVpngateways"`
}

// CloudAzureEventhubIntegration - Event Hub Integration
type CloudAzureEventhubIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureEventhubIntegration) ImplementsCloudIntegration() {}

// CloudAzureEventhubIntegrationInput - Event Hub
type CloudAzureEventhubIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureExpressrouteIntegration - Express Route Integration
type CloudAzureExpressrouteIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureExpressrouteIntegration) ImplementsCloudIntegration() {}

// CloudAzureExpressrouteIntegrationInput - Express Route
type CloudAzureExpressrouteIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureFirewallsIntegration - Firewalls Integration
type CloudAzureFirewallsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureFirewallsIntegration) ImplementsCloudIntegration() {}

// CloudAzureFirewallsIntegrationInput - Firewalls
type CloudAzureFirewallsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureFrontdoorIntegration - Front Door Integration
type CloudAzureFrontdoorIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureFrontdoorIntegration) ImplementsCloudIntegration() {}

// CloudAzureFrontdoorIntegrationInput - Front Door
type CloudAzureFrontdoorIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureFunctionsIntegration - Functions Integration
type CloudAzureFunctionsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureFunctionsIntegration) ImplementsCloudIntegration() {}

// CloudAzureFunctionsIntegrationInput - Azure Functions
type CloudAzureFunctionsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureIntegrationsInput - List of integrations
type CloudAzureIntegrationsInput struct {
	// Api Management integration
	AzureAPImanagement []CloudAzureAPImanagementIntegrationInput `json:"azureApimanagement"`
	// App Gateway integration
	AzureAppgateway []CloudAzureAppgatewayIntegrationInput `json:"azureAppgateway"`
	// App Service integration
	AzureAppservice []CloudAzureAppserviceIntegrationInput `json:"azureAppservice"`
	// Containers integration
	AzureContainers []CloudAzureContainersIntegrationInput `json:"azureContainers"`
	// Cosmos DB integration
	AzureCosmosdb []CloudAzureCosmosdbIntegrationInput `json:"azureCosmosdb"`
	// Cost Management integration
	AzureCostmanagement []CloudAzureCostmanagementIntegrationInput `json:"azureCostmanagement"`
	// Data Factory integration
	AzureDatafactory []CloudAzureDatafactoryIntegrationInput `json:"azureDatafactory"`
	// Event Hub integration
	AzureEventhub []CloudAzureEventhubIntegrationInput `json:"azureEventhub"`
	// Express Route integration
	AzureExpressroute []CloudAzureExpressrouteIntegrationInput `json:"azureExpressroute"`
	// Firewalls integration
	AzureFirewalls []CloudAzureFirewallsIntegrationInput `json:"azureFirewalls"`
	// Front Door integration
	AzureFrontdoor []CloudAzureFrontdoorIntegrationInput `json:"azureFrontdoor"`
	// Functions integration
	AzureFunctions []CloudAzureFunctionsIntegrationInput `json:"azureFunctions"`
	// Key Vault integration
	AzureKeyvault []CloudAzureKeyvaultIntegrationInput `json:"azureKeyvault"`
	// Load Balancer integration
	AzureLoadbalancer []CloudAzureLoadbalancerIntegrationInput `json:"azureLoadbalancer"`
	// Logic Apps integration
	AzureLogicapps []CloudAzureLogicappsIntegrationInput `json:"azureLogicapps"`
	// Machine Learning integration
	AzureMachinelearning []CloudAzureMachinelearningIntegrationInput `json:"azureMachinelearning"`
	// Database for MariaDB integration
	AzureMariadb []CloudAzureMariadbIntegrationInput `json:"azureMariadb"`
	// Database for MySQL integration
	AzureMysql []CloudAzureMysqlIntegrationInput `json:"azureMysql"`
	// Database for PostgreSQL integration
	AzurePostgresql []CloudAzurePostgresqlIntegrationInput `json:"azurePostgresql"`
	// Power BI Dedicated integration
	AzurePowerbidedicated []CloudAzurePowerbidedicatedIntegrationInput `json:"azurePowerbidedicated"`
	// Redis Cache integration
	AzureRediscache []CloudAzureRediscacheIntegrationInput `json:"azureRediscache"`
	// Service Bus integration
	AzureServicebus []CloudAzureServicebusIntegrationInput `json:"azureServicebus"`
	// Service Fabric integration
	AzureServicefabric []CloudAzureServicefabricIntegrationInput `json:"azureServicefabric"`
	// SQL Database integration
	AzureSql []CloudAzureSqlIntegrationInput `json:"azureSql"`
	// SQL Managed Instances integration
	AzureSqlmanaged []CloudAzureSqlmanagedIntegrationInput `json:"azureSqlmanaged"`
	// Storage integration
	AzureStorage []CloudAzureStorageIntegrationInput `json:"azureStorage"`
	// Virtual machine scale sets integration
	AzureVirtualmachine []CloudAzureVirtualmachineIntegrationInput `json:"azureVirtualmachine"`
	// Virtual Network integration
	AzureVirtualnetworks []CloudAzureVirtualnetworksIntegrationInput `json:"azureVirtualnetworks"`
	// Virtual Machines integration
	AzureVms []CloudAzureVmsIntegrationInput `json:"azureVms"`
	// VPN Gateways integration
	AzureVpngateways []CloudAzureVpngatewaysIntegrationInput `json:"azureVpngateways"`
}

// CloudAzureKeyvaultIntegration - Key Vault Integration
type CloudAzureKeyvaultIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureKeyvaultIntegration) ImplementsCloudIntegration() {}

// CloudAzureKeyvaultIntegrationInput - Key Vault
type CloudAzureKeyvaultIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureLinkAccountInput - Information required to link a Azure account to a NewRelic account.
type CloudAzureLinkAccountInput struct {
	// The Azure account application identifier (used to fetch data).
	ApplicationID string `json:"applicationId"`
	// The Azure account application secret key.
	ClientSecret SecureValue `json:"clientSecret"`
	// The linked account name.
	Name string `json:"name"`
	// The Azure account subscription identifier.
	SubscriptionId string `json:"subscriptionId"`
	// The Azure account tenant identifier.
	TenantId string `json:"tenantId"`
}

// CloudAzureLoadbalancerIntegration - Load Balancer Integration
type CloudAzureLoadbalancerIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureLoadbalancerIntegration) ImplementsCloudIntegration() {}

// CloudAzureLoadbalancerIntegrationInput - Azure Load Balancer
type CloudAzureLoadbalancerIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureLogicappsIntegration - Logic Apps Integration
type CloudAzureLogicappsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureLogicappsIntegration) ImplementsCloudIntegration() {}

// CloudAzureLogicappsIntegrationInput - Logic Apps
type CloudAzureLogicappsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureMachinelearningIntegration - Machine Learning Integration
type CloudAzureMachinelearningIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureMachinelearningIntegration) ImplementsCloudIntegration() {}

// CloudAzureMachinelearningIntegrationInput - Machine Learning
type CloudAzureMachinelearningIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureMariadbIntegration - Database for MariaDB Integration
type CloudAzureMariadbIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureMariadbIntegration) ImplementsCloudIntegration() {}

// CloudAzureMariadbIntegrationInput - Database for MariaDB
type CloudAzureMariadbIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureMysqlIntegration - Database for MySQL Integration
type CloudAzureMysqlIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureMysqlIntegration) ImplementsCloudIntegration() {}

// CloudAzureMysqlIntegrationInput - Database for MySQL
type CloudAzureMysqlIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzurePostgresqlIntegration - Database for PostgreSQL Integration
type CloudAzurePostgresqlIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzurePostgresqlIntegration) ImplementsCloudIntegration() {}

// CloudAzurePostgresqlIntegrationInput - Database for PostgreSQL
type CloudAzurePostgresqlIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzurePowerbidedicatedIntegration - Power BI Dedicated Integration
type CloudAzurePowerbidedicatedIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzurePowerbidedicatedIntegration) ImplementsCloudIntegration() {}

// CloudAzurePowerbidedicatedIntegrationInput - Power BI Dedicated
type CloudAzurePowerbidedicatedIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureRediscacheIntegration - Redis Cache Integration
type CloudAzureRediscacheIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureRediscacheIntegration) ImplementsCloudIntegration() {}

// CloudAzureRediscacheIntegrationInput - Azure Redis Cache
type CloudAzureRediscacheIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureServicebusIntegration - Service Bus Integration
type CloudAzureServicebusIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureServicebusIntegration) ImplementsCloudIntegration() {}

// CloudAzureServicebusIntegrationInput - Azure Service Bus
type CloudAzureServicebusIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureServicefabricIntegration - Service Fabric Integration
type CloudAzureServicefabricIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureServicefabricIntegration) ImplementsCloudIntegration() {}

// CloudAzureServicefabricIntegrationInput - Service Fabric
type CloudAzureServicefabricIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureSqlIntegration - SQL Database Integration
type CloudAzureSqlIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureSqlIntegration) ImplementsCloudIntegration() {}

// CloudAzureSqlIntegrationInput - Azure SQL Database
type CloudAzureSqlIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureSqlmanagedIntegration - SQL Managed Instances Integration
type CloudAzureSqlmanagedIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureSqlmanagedIntegration) ImplementsCloudIntegration() {}

// CloudAzureSqlmanagedIntegrationInput - SQL Managed Instances
type CloudAzureSqlmanagedIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureStorageIntegration - Storage Integration
type CloudAzureStorageIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureStorageIntegration) ImplementsCloudIntegration() {}

// CloudAzureStorageIntegrationInput - Azure Storage
type CloudAzureStorageIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureVirtualmachineIntegration - Virtual machine scale sets Integration
type CloudAzureVirtualmachineIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureVirtualmachineIntegration) ImplementsCloudIntegration() {}

// CloudAzureVirtualmachineIntegrationInput - Virtual machine scale sets
type CloudAzureVirtualmachineIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureVirtualnetworksIntegration - Virtual Network Integration
type CloudAzureVirtualnetworksIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureVirtualnetworksIntegration) ImplementsCloudIntegration() {}

// CloudAzureVirtualnetworksIntegrationInput - Azure Virtual Network
type CloudAzureVirtualnetworksIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureVmsIntegration - Virtual Machines Integration
type CloudAzureVmsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureVmsIntegration) ImplementsCloudIntegration() {}

// CloudAzureVmsIntegrationInput - Azure Virtual Machines
type CloudAzureVmsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudAzureVpngatewaysIntegration - VPN Gateways Integration
type CloudAzureVpngatewaysIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudAzureVpngatewaysIntegration) ImplementsCloudIntegration() {}

// CloudAzureVpngatewaysIntegrationInput - VPN Gateways
type CloudAzureVpngatewaysIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive.
	ResourceGroups []string `json:"resourceGroups"`
}

// CloudBaseIntegration - Base Integration Object
type CloudBaseIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudBaseIntegration) ImplementsCloudIntegration() {}

// CloudBaseProvider - Base Provider Object
type CloudBaseProvider struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud provider identifier in NewRelic.
	ID int `json:"id"`
	// The cloud provider icon name.
	Icon string `json:"icon"`
	// The cloud provider name.
	Name string `json:"name"`
	// Get details of one cloud provider service.
	Service CloudService `json:"service"`
	// Get details of all the cloud provider services available for integration.
	Services []CloudService `json:"services"`
	// The cloud provider short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudBaseProvider) ImplementsCloudProvider() {}

// CloudBillingIntegration - Billing Integration
type CloudBillingIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudBillingIntegration) ImplementsCloudIntegration() {}

// CloudBillingIntegrationInput - AWS Billing
type CloudBillingIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudCloudfrontIntegration - CloudFront Integration
type CloudCloudfrontIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchLambdasAtEdge bool `json:"fetchLambdasAtEdge"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudCloudfrontIntegration) ImplementsCloudIntegration() {}

// CloudCloudfrontIntegrationInput - Amazon CloudFront
type CloudCloudfrontIntegrationInput struct {
	// Specify if Lambdas@Edge should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchLambdasAtEdge bool `json:"fetchLambdasAtEdge"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudCloudtrailIntegration - CloudTrail Integration
type CloudCloudtrailIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudCloudtrailIntegration) ImplementsCloudIntegration() {}

// CloudCloudtrailIntegrationInput - AWS CloudTrail
type CloudCloudtrailIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudConfigureIntegrationPayload - Autogenerated return type of ConfigureIntegration
type CloudConfigureIntegrationPayload struct {
	// The list of errors.
	Errors []CloudIntegrationMutationError `json:"errors"`
	// The created/modified service integrations.
	Integrations []CloudIntegrationInterface `json:"integrations"`
}

// special
func (x *CloudConfigureIntegrationPayload) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		switch k {
		case "errors":
			err = json.Unmarshal(*v, &x.Errors)
			if err != nil {
				return err
			}
		case "integrations":
			var rawMessageIntegrations []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageIntegrations)
			if err != nil {
				return err
			}

			for _, m := range rawMessageIntegrations {
				xxx, err := UnmarshalCloudIntegrationInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Integrations = append(x.Integrations, *xxx)
				}
			}
		}
	}

	return nil
}

// CloudDisableAccountIntegrationInput - Information required to disable a cloud service integration from a linked account.
type CloudDisableAccountIntegrationInput struct {
	// The linked account identifier
	LinkedAccountId int `json:"linkedAccountId"`
}

// CloudDisableIntegrationPayload - Autogenerated return type of DisableIntegration
type CloudDisableIntegrationPayload struct {
	// The list of disabled cloud service integrations.
	DisabledIntegrations []CloudIntegrationInterface `json:"disabledIntegrations"`
	// The list of errors.
	Errors []CloudIntegrationMutationError `json:"errors"`
}

// special
func (x *CloudDisableIntegrationPayload) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		switch k {
		case "disabledIntegrations":
			var rawMessageDisabledIntegrations []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageDisabledIntegrations)
			if err != nil {
				return err
			}

			for _, m := range rawMessageDisabledIntegrations {
				xxx, err := UnmarshalCloudIntegrationInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.DisabledIntegrations = append(x.DisabledIntegrations, *xxx)
				}
			}
		case "errors":
			err = json.Unmarshal(*v, &x.Errors)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// CloudDisableIntegrationsInput - List of providers
type CloudDisableIntegrationsInput struct {
	// Aws provider
	Aws CloudAwsDisableIntegrationsInput `json:"aws"`
	// AwsGovcloud provider
	AwsGovcloud CloudAwsGovcloudDisableIntegrationsInput `json:"awsGovcloud"`
	// Azure provider
	Azure CloudAzureDisableIntegrationsInput `json:"azure"`
	// Gcp provider
	Gcp CloudGcpDisableIntegrationsInput `json:"gcp"`
}

// CloudDynamodbIntegration - DynamoDB Integration
type CloudDynamodbIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudDynamodbIntegration) ImplementsCloudIntegration() {}

// CloudDynamodbIntegrationInput - Amazon DynamoDB
type CloudDynamodbIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudEbsIntegration - EBS Integration
type CloudEbsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudEbsIntegration) ImplementsCloudIntegration() {}

// CloudEbsIntegrationInput - Amazon Elastic Block Store (EBS)
type CloudEbsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudEc2Integration - EC2 Integration
type CloudEc2Integration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if IP addresses of ec2 instance should be collected
	FetchIpAddresses bool `json:"fetchIpAddresses"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudEc2Integration) ImplementsCloudIntegration() {}

// CloudEc2IntegrationInput - Amazon Elastic Compute Cloud (EC2)
type CloudEc2IntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if IP addresses of ec2 instance should be collected
	FetchIpAddresses bool `json:"fetchIpAddresses"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudEcsIntegration - ECS Integration
type CloudEcsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudEcsIntegration) ImplementsCloudIntegration() {}

// CloudEcsIntegrationInput - Amazon Elastic Container Service (ECS)
type CloudEcsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudEfsIntegration - EFS Integration
type CloudEfsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudEfsIntegration) ImplementsCloudIntegration() {}

// CloudEfsIntegrationInput - Amazon Elastic File System (EFS)
type CloudEfsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudElasticacheIntegration - ElastiCache Integration
type CloudElasticacheIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudElasticacheIntegration) ImplementsCloudIntegration() {}

// CloudElasticacheIntegrationInput - Amazon ElastiCache
type CloudElasticacheIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudElasticbeanstalkIntegration - Elastic Beanstalk Integration
type CloudElasticbeanstalkIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudElasticbeanstalkIntegration) ImplementsCloudIntegration() {}

// CloudElasticbeanstalkIntegrationInput - AWS Elastic Beanstalk
type CloudElasticbeanstalkIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudElasticsearchIntegration - Elasticsearch Service Integration
type CloudElasticsearchIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
	FetchNodes bool `json:"fetchNodes"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudElasticsearchIntegration) ImplementsCloudIntegration() {}

// CloudElasticsearchIntegrationInput - Amazon Elasticsearch Service
type CloudElasticsearchIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.
	FetchNodes bool `json:"fetchNodes"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudElbIntegration - ELB (Classic) Integration
type CloudElbIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudElbIntegration) ImplementsCloudIntegration() {}

// CloudElbIntegrationInput - Elastic Load Balancing - Classic Load Balancer (ELB)
type CloudElbIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudEmrIntegration - EMR Integration
type CloudEmrIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudEmrIntegration) ImplementsCloudIntegration() {}

// CloudEmrIntegrationInput - Amazon Elastic MapReduce (EMR)
type CloudEmrIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudGcpAppengineIntegration - App Engine Integration
type CloudGcpAppengineIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpAppengineIntegration) ImplementsCloudIntegration() {}

// CloudGcpAppengineIntegrationInput - Google App Engine
type CloudGcpAppengineIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpBigqueryIntegration - BigQuery Integration
type CloudGcpBigqueryIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpBigqueryIntegration) ImplementsCloudIntegration() {}

// CloudGcpBigqueryIntegrationInput - BigQuery
type CloudGcpBigqueryIntegrationInput struct {
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpDataflowIntegration - Dataflow Integration
type CloudGcpDataflowIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpDataflowIntegration) ImplementsCloudIntegration() {}

// CloudGcpDataflowIntegrationInput - Dataflow
type CloudGcpDataflowIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpDataprocIntegration - Dataproc Integration
type CloudGcpDataprocIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpDataprocIntegration) ImplementsCloudIntegration() {}

// CloudGcpDataprocIntegrationInput - Dataproc
type CloudGcpDataprocIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpDatastoreIntegration - Datastore Integration
type CloudGcpDatastoreIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpDatastoreIntegration) ImplementsCloudIntegration() {}

// CloudGcpDatastoreIntegrationInput - Datastore
type CloudGcpDatastoreIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpDisableIntegrationsInput - List of integrations
type CloudGcpDisableIntegrationsInput struct {
	// App Engine integration
	GcpAppengine []CloudDisableAccountIntegrationInput `json:"gcpAppengine"`
	// BigQuery integration
	GcpBigquery []CloudDisableAccountIntegrationInput `json:"gcpBigquery"`
	// Dataflow integration
	GcpDataflow []CloudDisableAccountIntegrationInput `json:"gcpDataflow"`
	// Dataproc integration
	GcpDataproc []CloudDisableAccountIntegrationInput `json:"gcpDataproc"`
	// Datastore integration
	GcpDatastore []CloudDisableAccountIntegrationInput `json:"gcpDatastore"`
	// Firebase Database integration
	GcpFirebasedatabase []CloudDisableAccountIntegrationInput `json:"gcpFirebasedatabase"`
	// Firebase Hosting integration
	GcpFirebasehosting []CloudDisableAccountIntegrationInput `json:"gcpFirebasehosting"`
	// Firebase Storage integration
	GcpFirebasestorage []CloudDisableAccountIntegrationInput `json:"gcpFirebasestorage"`
	// Firestore integration
	GcpFirestore []CloudDisableAccountIntegrationInput `json:"gcpFirestore"`
	// Cloud Functions integration
	GcpFunctions []CloudDisableAccountIntegrationInput `json:"gcpFunctions"`
	// Interconnect integration
	GcpInterconnect []CloudDisableAccountIntegrationInput `json:"gcpInterconnect"`
	// Kubernetes Engine integration
	GcpKubernetes []CloudDisableAccountIntegrationInput `json:"gcpKubernetes"`
	// Cloud Load Balancing integration
	GcpLoadbalancing []CloudDisableAccountIntegrationInput `json:"gcpLoadbalancing"`
	// Cloud Pub/Sub integration
	GcpPubsub []CloudDisableAccountIntegrationInput `json:"gcpPubsub"`
	// Router integration
	GcpRouter []CloudDisableAccountIntegrationInput `json:"gcpRouter"`
	// Run integration
	GcpRun []CloudDisableAccountIntegrationInput `json:"gcpRun"`
	// Cloud Spanner integration
	GcpSpanner []CloudDisableAccountIntegrationInput `json:"gcpSpanner"`
	// Cloud SQL integration
	GcpSql []CloudDisableAccountIntegrationInput `json:"gcpSql"`
	// Cloud Storage integration
	GcpStorage []CloudDisableAccountIntegrationInput `json:"gcpStorage"`
	// Compute Engine integration
	GcpVms []CloudDisableAccountIntegrationInput `json:"gcpVms"`
	// VPC Access integration
	GcpVpcaccess []CloudDisableAccountIntegrationInput `json:"gcpVpcaccess"`
}

// CloudGcpFirebasedatabaseIntegration - Firebase Database Integration
type CloudGcpFirebasedatabaseIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpFirebasedatabaseIntegration) ImplementsCloudIntegration() {}

// CloudGcpFirebasedatabaseIntegrationInput - Firebase Database
type CloudGcpFirebasedatabaseIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpFirebasehostingIntegration - Firebase Hosting Integration
type CloudGcpFirebasehostingIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpFirebasehostingIntegration) ImplementsCloudIntegration() {}

// CloudGcpFirebasehostingIntegrationInput - Firebase Hosting
type CloudGcpFirebasehostingIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpFirebasestorageIntegration - Firebase Storage Integration
type CloudGcpFirebasestorageIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpFirebasestorageIntegration) ImplementsCloudIntegration() {}

// CloudGcpFirebasestorageIntegrationInput - Firebase Storage
type CloudGcpFirebasestorageIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpFirestoreIntegration - Firestore Integration
type CloudGcpFirestoreIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpFirestoreIntegration) ImplementsCloudIntegration() {}

// CloudGcpFirestoreIntegrationInput - Firestore
type CloudGcpFirestoreIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpFunctionsIntegration - Cloud Functions Integration
type CloudGcpFunctionsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpFunctionsIntegration) ImplementsCloudIntegration() {}

// CloudGcpFunctionsIntegrationInput - Google Cloud Functions
type CloudGcpFunctionsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpIntegrationsInput - List of integrations
type CloudGcpIntegrationsInput struct {
	// App Engine integration
	GcpAppengine []CloudGcpAppengineIntegrationInput `json:"gcpAppengine"`
	// BigQuery integration
	GcpBigquery []CloudGcpBigqueryIntegrationInput `json:"gcpBigquery"`
	// Dataflow integration
	GcpDataflow []CloudGcpDataflowIntegrationInput `json:"gcpDataflow"`
	// Dataproc integration
	GcpDataproc []CloudGcpDataprocIntegrationInput `json:"gcpDataproc"`
	// Datastore integration
	GcpDatastore []CloudGcpDatastoreIntegrationInput `json:"gcpDatastore"`
	// Firebase Database integration
	GcpFirebasedatabase []CloudGcpFirebasedatabaseIntegrationInput `json:"gcpFirebasedatabase"`
	// Firebase Hosting integration
	GcpFirebasehosting []CloudGcpFirebasehostingIntegrationInput `json:"gcpFirebasehosting"`
	// Firebase Storage integration
	GcpFirebasestorage []CloudGcpFirebasestorageIntegrationInput `json:"gcpFirebasestorage"`
	// Firestore integration
	GcpFirestore []CloudGcpFirestoreIntegrationInput `json:"gcpFirestore"`
	// Cloud Functions integration
	GcpFunctions []CloudGcpFunctionsIntegrationInput `json:"gcpFunctions"`
	// Interconnect integration
	GcpInterconnect []CloudGcpInterconnectIntegrationInput `json:"gcpInterconnect"`
	// Kubernetes Engine integration
	GcpKubernetes []CloudGcpKubernetesIntegrationInput `json:"gcpKubernetes"`
	// Cloud Load Balancing integration
	GcpLoadbalancing []CloudGcpLoadbalancingIntegrationInput `json:"gcpLoadbalancing"`
	// Cloud Pub/Sub integration
	GcpPubsub []CloudGcpPubsubIntegrationInput `json:"gcpPubsub"`
	// Router integration
	GcpRouter []CloudGcpRouterIntegrationInput `json:"gcpRouter"`
	// Run integration
	GcpRun []CloudGcpRunIntegrationInput `json:"gcpRun"`
	// Cloud Spanner integration
	GcpSpanner []CloudGcpSpannerIntegrationInput `json:"gcpSpanner"`
	// Cloud SQL integration
	GcpSql []CloudGcpSqlIntegrationInput `json:"gcpSql"`
	// Cloud Storage integration
	GcpStorage []CloudGcpStorageIntegrationInput `json:"gcpStorage"`
	// Compute Engine integration
	GcpVms []CloudGcpVmsIntegrationInput `json:"gcpVms"`
	// VPC Access integration
	GcpVpcaccess []CloudGcpVpcaccessIntegrationInput `json:"gcpVpcaccess"`
}

// CloudGcpInterconnectIntegration - Interconnect Integration
type CloudGcpInterconnectIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpInterconnectIntegration) ImplementsCloudIntegration() {}

// CloudGcpInterconnectIntegrationInput - Interconnect
type CloudGcpInterconnectIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpKubernetesIntegration - Kubernetes Engine Integration
type CloudGcpKubernetesIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpKubernetesIntegration) ImplementsCloudIntegration() {}

// CloudGcpKubernetesIntegrationInput - Google Kubernetes Engine
type CloudGcpKubernetesIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpLinkAccountInput - Information required to link a GCP account to a NewRelic account.
type CloudGcpLinkAccountInput struct {
	// The linked account name.
	Name string `json:"name"`
	// The GCP project identifier.
	ProjectId string `json:"projectId"`
}

// CloudGcpLoadbalancingIntegration - Cloud Load Balancing Integration
type CloudGcpLoadbalancingIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpLoadbalancingIntegration) ImplementsCloudIntegration() {}

// CloudGcpLoadbalancingIntegrationInput - Google Cloud Load Balancing
type CloudGcpLoadbalancingIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpProvider - The Google Cloud Platform cloud provider
type CloudGcpProvider struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud provider identifier in NewRelic.
	ID int `json:"id"`
	// The cloud provider icon name.
	Icon string `json:"icon"`
	// The cloud provider name.
	Name string `json:"name"`
	// Get details of one cloud provider service.
	Service CloudService `json:"service"`
	// The service account identifier used to link the GCP project to NewRelic.
	ServiceAccountId string `json:"serviceAccountId"`
	// Get details of all the cloud provider services available for integration.
	Services []CloudService `json:"services"`
	// The cloud provider short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpProvider) ImplementsCloudProvider() {}

// CloudGcpPubsubIntegration - Cloud Pub/Sub Integration
type CloudGcpPubsubIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpPubsubIntegration) ImplementsCloudIntegration() {}

// CloudGcpPubsubIntegrationInput - Cloud Pub/Sub
type CloudGcpPubsubIntegrationInput struct {
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpRouterIntegration - Router Integration
type CloudGcpRouterIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpRouterIntegration) ImplementsCloudIntegration() {}

// CloudGcpRouterIntegrationInput - Router
type CloudGcpRouterIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpRunIntegration - Run Integration
type CloudGcpRunIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpRunIntegration) ImplementsCloudIntegration() {}

// CloudGcpRunIntegrationInput - Run
type CloudGcpRunIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpSpannerIntegration - Cloud Spanner Integration
type CloudGcpSpannerIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpSpannerIntegration) ImplementsCloudIntegration() {}

// CloudGcpSpannerIntegrationInput - Cloud Spanner
type CloudGcpSpannerIntegrationInput struct {
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpSqlIntegration - Cloud SQL Integration
type CloudGcpSqlIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpSqlIntegration) ImplementsCloudIntegration() {}

// CloudGcpSqlIntegrationInput - Google Cloud SQL
type CloudGcpSqlIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpStorageIntegration - Cloud Storage Integration
type CloudGcpStorageIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpStorageIntegration) ImplementsCloudIntegration() {}

// CloudGcpStorageIntegrationInput - Google Cloud Storage
type CloudGcpStorageIntegrationInput struct {
	// Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpVmsIntegration - Compute Engine Integration
type CloudGcpVmsIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpVmsIntegration) ImplementsCloudIntegration() {}

// CloudGcpVmsIntegrationInput - Google Compute Engine
type CloudGcpVmsIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudGcpVpcaccessIntegration - VPC Access Integration
type CloudGcpVpcaccessIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudGcpVpcaccessIntegration) ImplementsCloudIntegration() {}

// CloudGcpVpcaccessIntegrationInput - VPC Access
type CloudGcpVpcaccessIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudHealthIntegration - Health Integration
type CloudHealthIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudHealthIntegration) ImplementsCloudIntegration() {}

// CloudHealthIntegrationInput - AWS Health
type CloudHealthIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudIamIntegration - IAM Integration
type CloudIamIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudIamIntegration) ImplementsCloudIntegration() {}

// CloudIamIntegrationInput - AWS Identity and Access Management (IAM)
type CloudIamIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudIntegration - The configuration of a cloud service integration for a linked account.
type CloudIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudIntegration) ImplementsCloudIntegration() {}

// CloudIntegrationMutationError - Integration Mutation Error
type CloudIntegrationMutationError struct {
	// The passed integration slug.
	IntegrationSlug string `json:"integrationSlug"`
	// The passed linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The error message.
	Message string `json:"message"`
	// The passed newrelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The error status.
	Type string `json:"type"`
}

// CloudIntegrationsInput - List of providers
type CloudIntegrationsInput struct {
	// Aws provider
	Aws CloudAwsIntegrationsInput `json:"aws"`
	// AwsGovcloud provider
	AwsGovcloud CloudAwsGovcloudIntegrationsInput `json:"awsGovcloud"`
	// Azure provider
	Azure CloudAzureIntegrationsInput `json:"azure"`
	// Gcp provider
	Gcp CloudGcpIntegrationsInput `json:"gcp"`
}

// CloudIotIntegration - IoT Integration
type CloudIotIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudIotIntegration) ImplementsCloudIntegration() {}

// CloudIotIntegrationInput - AWS IoT
type CloudIotIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudKinesisFirehoseIntegration - Kinesis Firehose Integration
type CloudKinesisFirehoseIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudKinesisFirehoseIntegration) ImplementsCloudIntegration() {}

// CloudKinesisFirehoseIntegrationInput - Amazon Kinesis Data Firehose
type CloudKinesisFirehoseIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudKinesisIntegration - Kinesis Streams Integration
type CloudKinesisIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchShards bool `json:"fetchShards"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudKinesisIntegration) ImplementsCloudIntegration() {}

// CloudKinesisIntegrationInput - Amazon Kinesis Data Streams
type CloudKinesisIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if Shards should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchShards bool `json:"fetchShards"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudLambdaIntegration - Lambda Integration
type CloudLambdaIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudLambdaIntegration) ImplementsCloudIntegration() {}

// CloudLambdaIntegrationInput - AWS Lambda
type CloudLambdaIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudLinkAccountPayload - Autogenerated return type of LinkAccount
type CloudLinkAccountPayload struct {
	// The list of errors.
	Errors []CloudAccountMutationError `json:"errors"`
	// The created Linked accounts.
	LinkedAccounts []CloudLinkedAccount `json:"linkedAccounts"`
}

// CloudLinkCloudAccountsInput - Specific Cloud provider information required to link the Cloud provider account to a NewRelic account.
type CloudLinkCloudAccountsInput struct {
	// Aws provider
	Aws []CloudAwsLinkAccountInput `json:"aws"`
	// AwsGovcloud provider
	AwsGovcloud []CloudAwsGovcloudLinkAccountInput `json:"awsGovcloud"`
	// Azure provider
	Azure []CloudAzureLinkAccountInput `json:"azure"`
	// Gcp provider
	Gcp []CloudGcpLinkAccountInput `json:"gcp"`
}

// CloudLinkedAccount - A cloud account linked to a NewRelic account.
type CloudLinkedAccount struct {
	// The credential. This is a Role ARN for AWS, an application ID for Azure and a service account ID or user account email for GCP.
	AuthLabel string `json:"authLabel"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Indicates whether the account disabled.
	Disabled bool `json:"disabled"`
	// The cloud account identifier. This is the Account ID in AWS, the Subscription ID in Azure and the Project ID in GCP.
	ExternalId string `json:"externalId"`
	// The linked account identifier in NewRelic.
	ID int `json:"id"`
	// Get details of one cloud service integration.
	Integration CloudIntegrationInterface `json:"integration"`
	// Get details of all cloud service integrations.
	Integrations []CloudIntegrationInterface `json:"integrations"`
	// The linked account name in NewRelic.
	Name string `json:"name"`
	// The New Relic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud provider.
	Provider CloudProviderInterface `json:"provider"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

// special
func (x *CloudLinkedAccount) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		switch k {
		case "authLabel":
			err = json.Unmarshal(*v, &x.AuthLabel)
			if err != nil {
				return err
			}
		case "createdAt":
			err = json.Unmarshal(*v, &x.CreatedAt)
			if err != nil {
				return err
			}
		case "disabled":
			err = json.Unmarshal(*v, &x.Disabled)
			if err != nil {
				return err
			}
		case "externalId":
			err = json.Unmarshal(*v, &x.ExternalId)
			if err != nil {
				return err
			}
		case "id":
			err = json.Unmarshal(*v, &x.ID)
			if err != nil {
				return err
			}
		case "integration":
			xxx, err := UnmarshalCloudIntegrationInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Integration = *xxx
			}
		case "integrations":
			var rawMessageIntegrations []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageIntegrations)
			if err != nil {
				return err
			}

			for _, m := range rawMessageIntegrations {
				xxx, err := UnmarshalCloudIntegrationInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Integrations = append(x.Integrations, *xxx)
				}
			}
		case "name":
			err = json.Unmarshal(*v, &x.Name)
			if err != nil {
				return err
			}
		case "nrAccountId":
			err = json.Unmarshal(*v, &x.NrAccountId)
			if err != nil {
				return err
			}
		case "provider":
			xxx, err := UnmarshalCloudProviderInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Provider = *xxx
			}
		case "updatedAt":
			err = json.Unmarshal(*v, &x.UpdatedAt)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// CloudProvider - A cloud services provider.
type CloudProvider struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud provider identifier in NewRelic.
	ID int `json:"id"`
	// The cloud provider icon name.
	Icon string `json:"icon"`
	// The cloud provider name.
	Name string `json:"name"`
	// Get details of one cloud provider service.
	Service CloudService `json:"service"`
	// Get details of all the cloud provider services available for integration.
	Services []CloudService `json:"services"`
	// The cloud provider short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudProvider) ImplementsCloudProvider() {}

// CloudRdsIntegration - RDS Integration
type CloudRdsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudRdsIntegration) ImplementsCloudIntegration() {}

// CloudRdsIntegrationInput - Amazon Relation Database Service (RDS)
type CloudRdsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudRedshiftIntegration - Redshift Integration
type CloudRedshiftIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudRedshiftIntegration) ImplementsCloudIntegration() {}

// CloudRedshiftIntegrationInput - Amazon Redshift
type CloudRedshiftIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudRenameAccountPayload - Autogenerated return type of RenameAccount
type CloudRenameAccountPayload struct {
	// The list of errors.
	Errors []CloudAccountMutationError `json:"errors"`
	// The updated linked accounts.
	LinkedAccounts []CloudLinkedAccount `json:"linkedAccounts"`
}

// CloudRenameAccountsInput - Information required when operating on a Linked Account.
type CloudRenameAccountsInput struct {
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The linked account new name.
	Name string `json:"name"`
}

// CloudRoute53Integration - Route 53 Integration
type CloudRoute53Integration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudRoute53Integration) ImplementsCloudIntegration() {}

// CloudRoute53IntegrationInput - Amazon Route 53
type CloudRoute53IntegrationInput struct {
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudS3Integration - S3 Integration
type CloudS3Integration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudS3Integration) ImplementsCloudIntegration() {}

// CloudS3IntegrationInput - Amazon Simple Storage Service (S3)
type CloudS3IntegrationInput struct {
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudService - A Cloud Provider service available for monitoring.
type CloudService struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service identifier in NewRelic.
	ID int `json:"id"`
	// The cloud service icon name.
	Icon string `json:"icon"`
	// Shows if the cloud service is enabled for integrating.
	IsEnabled bool `json:"isEnabled"`
	// The cloud service name.
	Name string `json:"name"`
	// The cloud provider.
	Provider CloudProviderInterface `json:"provider"`
	// The cloud service unique short name.
	Slug string `json:"slug"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

// special
func (x *CloudService) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		switch k {
		case "createdAt":
			err = json.Unmarshal(*v, &x.CreatedAt)
			if err != nil {
				return err
			}
		case "id":
			err = json.Unmarshal(*v, &x.ID)
			if err != nil {
				return err
			}
		case "icon":
			err = json.Unmarshal(*v, &x.Icon)
			if err != nil {
				return err
			}
		case "isEnabled":
			err = json.Unmarshal(*v, &x.IsEnabled)
			if err != nil {
				return err
			}
		case "name":
			err = json.Unmarshal(*v, &x.Name)
			if err != nil {
				return err
			}
		case "provider":
			xxx, err := UnmarshalCloudProviderInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Provider = *xxx
			}
		case "slug":
			err = json.Unmarshal(*v, &x.Slug)
			if err != nil {
				return err
			}
		case "updatedAt":
			err = json.Unmarshal(*v, &x.UpdatedAt)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// CloudSesIntegration - SES Integration
type CloudSesIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudSesIntegration) ImplementsCloudIntegration() {}

// CloudSesIntegrationInput - Amazon Simple Email Service (SES)
type CloudSesIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudSnsIntegration - SNS Integration
type CloudSnsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudSnsIntegration) ImplementsCloudIntegration() {}

// CloudSnsIntegrationInput - Amazon Simple Notification Service (SNS)
type CloudSnsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudSqsIntegration - SQS Integration
type CloudSqsIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
	QueuePrefixes []string `json:"queuePrefixes"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudSqsIntegration) ImplementsCloudIntegration() {}

// CloudSqsIntegrationInput - Amazon Simple Queue Service (SQS)
type CloudSqsIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchExtendedInventory bool `json:"fetchExtendedInventory"`
	// Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchTags bool `json:"fetchTags"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.
	QueuePrefixes []string `json:"queuePrefixes"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

// CloudTrustedadvisorIntegration - Trusted Advisor Integration
type CloudTrustedadvisorIntegration struct {
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudTrustedadvisorIntegration) ImplementsCloudIntegration() {}

// CloudTrustedadvisorIntegrationInput - Trusted Advisor
type CloudTrustedadvisorIntegrationInput struct {
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
}

// CloudUnlinkAccountPayload - Autogenerated return type of UnlinkAccount
type CloudUnlinkAccountPayload struct {
	// The list of errors.
	Errors []CloudAccountMutationError `json:"errors"`
	// The unlinked accounts.
	UnlinkedAccounts []CloudLinkedAccount `json:"unlinkedAccounts"`
}

// CloudUnlinkAccountsInput - Information required to unlink (remove) a linked account.
type CloudUnlinkAccountsInput struct {
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
}

// CloudVpcIntegration - VPC Integration
type CloudVpcIntegration struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// The object creation date, in epoch (Unix) time
	CreatedAt serialization.EpochTime `json:"createdAt"`
	// Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchNatGateway bool `json:"fetchNatGateway"`
	// Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchVpn bool `json:"fetchVpn"`
	// The cloud service integration identifier.
	ID int `json:"id"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The parent linked account identifier.
	LinkedAccount CloudLinkedAccount `json:"linkedAccount"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// The cloud service integration name.
	Name string `json:"name"`
	// The parent NewRelic account identifier.
	NrAccountId int `json:"nrAccountId"`
	// The cloud service used in the integration.
	Service CloudService `json:"service"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
	// The object last update date, in epoch (Unix) time
	UpdatedAt serialization.EpochTime `json:"updatedAt"`
}

func (x *CloudVpcIntegration) ImplementsCloudIntegration() {}

// CloudVpcIntegrationInput - Amazon Virtual Private Cloud (VPC)
type CloudVpcIntegrationInput struct {
	// Specify each AWS region that includes the resources that you want to monitor.
	AwsRegions []string `json:"awsRegions"`
	// Specify if NAT gateway should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchNatGateway bool `json:"fetchNatGateway"`
	// Specify if VPN should be monitored. May affect total data collection time and contribute to the Cloud provider API rate limit.
	FetchVpn bool `json:"fetchVpn"`
	// [DEPRECATED] Multiple polling interval is no longer supported, use only metrics_polling_interval
	InventoryPollingInterval int `json:"inventoryPollingInterval"`
	// The linked account identifier.
	LinkedAccountId int `json:"linkedAccountId"`
	// The data polling interval in seconds.
	MetricsPollingInterval int `json:"metricsPollingInterval"`
	// Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagKey string `json:"tagKey"`
	// Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.
	TagValue string `json:"tagValue"`
}

type linkedAccountsResponse struct {
	Actor Actor `json:"actor"`
}

// SecureValue - The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.
type SecureValue string

// CloudIntegration - The configuration of a cloud service integration for a linked account.
type CloudIntegrationInterface interface {
	ImplementsCloudIntegration()
}

//yes
func UnmarshalCloudIntegrationInterface(b []byte) (*CloudIntegrationInterface, error) {
	var err error

	var rawMessageCloudIntegration map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageCloudIntegration)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageCloudIntegration["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "CloudAlbIntegration":
			var interfaceType CloudAlbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudApigatewayIntegration":
			var interfaceType CloudAPIgatewayIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAutoscalingIntegration":
			var interfaceType CloudAutoscalingIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsAppsyncIntegration":
			var interfaceType CloudAwsAppsyncIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsAthenaIntegration":
			var interfaceType CloudAwsAthenaIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsCognitoIntegration":
			var interfaceType CloudAwsCognitoIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsConnectIntegration":
			var interfaceType CloudAwsConnectIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsDirectconnectIntegration":
			var interfaceType CloudAwsDirectconnectIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsDocdbIntegration":
			var interfaceType CloudAwsDocdbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsFsxIntegration":
			var interfaceType CloudAwsFsxIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsGlueIntegration":
			var interfaceType CloudAwsGlueIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsKinesisanalyticsIntegration":
			var interfaceType CloudAwsKinesisanalyticsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsMediaconvertIntegration":
			var interfaceType CloudAwsMediaconvertIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsMediapackagevodIntegration":
			var interfaceType CloudAwsMediapackagevodIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsMqIntegration":
			var interfaceType CloudAwsMqIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsMskIntegration":
			var interfaceType CloudAwsMskIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsNeptuneIntegration":
			var interfaceType CloudAwsNeptuneIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsQldbIntegration":
			var interfaceType CloudAwsQldbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsRoute53resolverIntegration":
			var interfaceType CloudAwsRoute53resolverIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsStatesIntegration":
			var interfaceType CloudAwsStatesIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsTransitgatewayIntegration":
			var interfaceType CloudAwsTransitgatewayIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsWafIntegration":
			var interfaceType CloudAwsWafIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsWafv2Integration":
			var interfaceType CloudAwsWafv2Integration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsXrayIntegration":
			var interfaceType CloudAwsXrayIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureApimanagementIntegration":
			var interfaceType CloudAzureAPImanagementIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureAppgatewayIntegration":
			var interfaceType CloudAzureAppgatewayIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureAppserviceIntegration":
			var interfaceType CloudAzureAppserviceIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureContainersIntegration":
			var interfaceType CloudAzureContainersIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureCosmosdbIntegration":
			var interfaceType CloudAzureCosmosdbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureCostmanagementIntegration":
			var interfaceType CloudAzureCostmanagementIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureDatafactoryIntegration":
			var interfaceType CloudAzureDatafactoryIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureEventhubIntegration":
			var interfaceType CloudAzureEventhubIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureExpressrouteIntegration":
			var interfaceType CloudAzureExpressrouteIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureFirewallsIntegration":
			var interfaceType CloudAzureFirewallsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureFrontdoorIntegration":
			var interfaceType CloudAzureFrontdoorIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureFunctionsIntegration":
			var interfaceType CloudAzureFunctionsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureKeyvaultIntegration":
			var interfaceType CloudAzureKeyvaultIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureLoadbalancerIntegration":
			var interfaceType CloudAzureLoadbalancerIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureLogicappsIntegration":
			var interfaceType CloudAzureLogicappsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureMachinelearningIntegration":
			var interfaceType CloudAzureMachinelearningIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureMariadbIntegration":
			var interfaceType CloudAzureMariadbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureMysqlIntegration":
			var interfaceType CloudAzureMysqlIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzurePostgresqlIntegration":
			var interfaceType CloudAzurePostgresqlIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzurePowerbidedicatedIntegration":
			var interfaceType CloudAzurePowerbidedicatedIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureRediscacheIntegration":
			var interfaceType CloudAzureRediscacheIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureServicebusIntegration":
			var interfaceType CloudAzureServicebusIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureServicefabricIntegration":
			var interfaceType CloudAzureServicefabricIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureSqlIntegration":
			var interfaceType CloudAzureSqlIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureSqlmanagedIntegration":
			var interfaceType CloudAzureSqlmanagedIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureStorageIntegration":
			var interfaceType CloudAzureStorageIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureVirtualmachineIntegration":
			var interfaceType CloudAzureVirtualmachineIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureVirtualnetworksIntegration":
			var interfaceType CloudAzureVirtualnetworksIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureVmsIntegration":
			var interfaceType CloudAzureVmsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudAzureVpngatewaysIntegration":
			var interfaceType CloudAzureVpngatewaysIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudBaseIntegration":
			var interfaceType CloudBaseIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudBillingIntegration":
			var interfaceType CloudBillingIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudCloudfrontIntegration":
			var interfaceType CloudCloudfrontIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudCloudtrailIntegration":
			var interfaceType CloudCloudtrailIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudDynamodbIntegration":
			var interfaceType CloudDynamodbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudEbsIntegration":
			var interfaceType CloudEbsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudEc2Integration":
			var interfaceType CloudEc2Integration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudEcsIntegration":
			var interfaceType CloudEcsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudEfsIntegration":
			var interfaceType CloudEfsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudElasticacheIntegration":
			var interfaceType CloudElasticacheIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudElasticbeanstalkIntegration":
			var interfaceType CloudElasticbeanstalkIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudElasticsearchIntegration":
			var interfaceType CloudElasticsearchIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudElbIntegration":
			var interfaceType CloudElbIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudEmrIntegration":
			var interfaceType CloudEmrIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpAppengineIntegration":
			var interfaceType CloudGcpAppengineIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpBigqueryIntegration":
			var interfaceType CloudGcpBigqueryIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpDataflowIntegration":
			var interfaceType CloudGcpDataflowIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpDataprocIntegration":
			var interfaceType CloudGcpDataprocIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpDatastoreIntegration":
			var interfaceType CloudGcpDatastoreIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpFirebasedatabaseIntegration":
			var interfaceType CloudGcpFirebasedatabaseIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpFirebasehostingIntegration":
			var interfaceType CloudGcpFirebasehostingIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpFirebasestorageIntegration":
			var interfaceType CloudGcpFirebasestorageIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpFirestoreIntegration":
			var interfaceType CloudGcpFirestoreIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpFunctionsIntegration":
			var interfaceType CloudGcpFunctionsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpInterconnectIntegration":
			var interfaceType CloudGcpInterconnectIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpKubernetesIntegration":
			var interfaceType CloudGcpKubernetesIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpLoadbalancingIntegration":
			var interfaceType CloudGcpLoadbalancingIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpPubsubIntegration":
			var interfaceType CloudGcpPubsubIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpRouterIntegration":
			var interfaceType CloudGcpRouterIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpRunIntegration":
			var interfaceType CloudGcpRunIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpSpannerIntegration":
			var interfaceType CloudGcpSpannerIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpSqlIntegration":
			var interfaceType CloudGcpSqlIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpStorageIntegration":
			var interfaceType CloudGcpStorageIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpVmsIntegration":
			var interfaceType CloudGcpVmsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpVpcaccessIntegration":
			var interfaceType CloudGcpVpcaccessIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudHealthIntegration":
			var interfaceType CloudHealthIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudIamIntegration":
			var interfaceType CloudIamIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudIotIntegration":
			var interfaceType CloudIotIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudKinesisFirehoseIntegration":
			var interfaceType CloudKinesisFirehoseIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudKinesisIntegration":
			var interfaceType CloudKinesisIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudLambdaIntegration":
			var interfaceType CloudLambdaIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudRdsIntegration":
			var interfaceType CloudRdsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudRedshiftIntegration":
			var interfaceType CloudRedshiftIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudRoute53Integration":
			var interfaceType CloudRoute53Integration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudS3Integration":
			var interfaceType CloudS3Integration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudSesIntegration":
			var interfaceType CloudSesIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudSnsIntegration":
			var interfaceType CloudSnsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudSqsIntegration":
			var interfaceType CloudSqsIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudTrustedadvisorIntegration":
			var interfaceType CloudTrustedadvisorIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		case "CloudVpcIntegration":
			var interfaceType CloudVpcIntegration
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudIntegrationInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageCloudIntegration {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface CloudIntegration did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface CloudIntegration was not matched against all PossibleTypes: %s", typeName)
}

// CloudProvider - A cloud services provider.
type CloudProviderInterface interface {
	ImplementsCloudProvider()
}

//yes
func UnmarshalCloudProviderInterface(b []byte) (*CloudProviderInterface, error) {
	var err error

	var rawMessageCloudProvider map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageCloudProvider)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageCloudProvider["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "CloudAwsGovCloudProvider":
			var interfaceType CloudAwsGovCloudProvider
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudProviderInterface = &interfaceType

			return &xxx, nil
		case "CloudAwsProvider":
			var interfaceType CloudAwsProvider
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudProviderInterface = &interfaceType

			return &xxx, nil
		case "CloudBaseProvider":
			var interfaceType CloudBaseProvider
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudProviderInterface = &interfaceType

			return &xxx, nil
		case "CloudGcpProvider":
			var interfaceType CloudGcpProvider
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CloudProviderInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageCloudProvider {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface CloudProvider did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface CloudProvider was not matched against all PossibleTypes: %s", typeName)
}

// Code generated by tutone: DO NOT EDIT
package cloud

import "github.com/newrelic/newrelic-client-go/pkg/errors"

// Create or modify a cloud integration.
//
// For details and mutation examples visit
// [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
func (a *Cloud) CloudConfigureIntegration(
	accountID int,
	integrations CloudIntegrationsInput,
) (*CloudConfigureIntegrationPayload, error) {

	resp := CloudConfigureIntegrationResponse{}
	vars := map[string]interface{}{
		"accountId":    accountID,
		"integrations": integrations,
	}

	if err := a.client.NerdGraphQuery(CloudConfigureIntegrationMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CloudConfigureIntegrationPayload, nil
}

type CloudConfigureIntegrationResponse struct {
	CloudConfigureIntegrationPayload CloudConfigureIntegrationPayload `json:"CloudConfigureIntegration"`
}

const CloudConfigureIntegrationMutation = `mutation(
	$accountId: Int!,
	$integrations: CloudIntegrationsInput!,
) { cloudConfigureIntegration(
	accountId: $accountId,
	integrations: $integrations,
) {
	
} }`

// Disable a cloud integration. Stops collecting data for the specified integration.
//
// For details and mutation examples visit
// [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
func (a *Cloud) CloudDisableIntegration(
	accountID int,
	integrations CloudDisableIntegrationsInput,
) (*CloudDisableIntegrationPayload, error) {

	resp := CloudDisableIntegrationResponse{}
	vars := map[string]interface{}{
		"accountId":    accountID,
		"integrations": integrations,
	}

	if err := a.client.NerdGraphQuery(CloudDisableIntegrationMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CloudDisableIntegrationPayload, nil
}

type CloudDisableIntegrationResponse struct {
	CloudDisableIntegrationPayload CloudDisableIntegrationPayload `json:"CloudDisableIntegration"`
}

const CloudDisableIntegrationMutation = `mutation(
	$accountId: Int,
	$integrations: CloudDisableIntegrationsInput,
) { cloudDisableIntegration(
	accountId: $accountId,
	integrations: $integrations,
) {
	
} }`

// Link a cloud provider account to a New Relic Account.
//
// For details and mutation examples visit
// [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
func (a *Cloud) CloudLinkAccount(
	accountID int,
	accounts CloudLinkCloudAccountsInput,
) (*CloudLinkAccountPayload, error) {

	resp := CloudLinkAccountResponse{}
	vars := map[string]interface{}{
		"accountId": accountID,
		"accounts":  accounts,
	}

	if err := a.client.NerdGraphQuery(CloudLinkAccountMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CloudLinkAccountPayload, nil
}

type CloudLinkAccountResponse struct {
	CloudLinkAccountPayload CloudLinkAccountPayload `json:"CloudLinkAccount"`
}

const CloudLinkAccountMutation = `mutation(
	$accountId: Int,
	$accounts: CloudLinkCloudAccountsInput,
) { cloudLinkAccount(
	accountId: $accountId,
	accounts: $accounts,
) {
	
} }`

// Rename one or more linked cloud provider accounts.
//
// For details and mutation examples visit
// [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
func (a *Cloud) CloudRenameAccount(
	accountID int,
	accounts []CloudRenameAccountsInput,
) (*CloudRenameAccountPayload, error) {

	resp := CloudRenameAccountResponse{}
	vars := map[string]interface{}{
		"accountId": accountID,
		"accounts":  accounts,
	}

	if err := a.client.NerdGraphQuery(CloudRenameAccountMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CloudRenameAccountPayload, nil
}

type CloudRenameAccountResponse struct {
	CloudRenameAccountPayload CloudRenameAccountPayload `json:"CloudRenameAccount"`
}

const CloudRenameAccountMutation = `mutation(
	$accountId: Int,
	$accounts: [CloudRenameAccountsInput],
) { cloudRenameAccount(
	accountId: $accountId,
	accounts: $accounts,
) {
	
} }`

// Unlink one or more cloud provider accounts.
// Stops collecting data for all the associated integrations.
//
// For details and mutation examples visit
// [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/manage-your-aws-azure-google-cloud-integrations-graphql-api).
func (a *Cloud) CloudUnlinkAccount(
	accountID int,
	accounts []CloudUnlinkAccountsInput,
) (*CloudUnlinkAccountPayload, error) {

	resp := CloudUnlinkAccountResponse{}
	vars := map[string]interface{}{
		"accountId": accountID,
		"accounts":  accounts,
	}

	if err := a.client.NerdGraphQuery(CloudUnlinkAccountMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.CloudUnlinkAccountPayload, nil
}

type CloudUnlinkAccountResponse struct {
	CloudUnlinkAccountPayload CloudUnlinkAccountPayload `json:"CloudUnlinkAccount"`
}

const CloudUnlinkAccountMutation = `mutation(
	$accountId: Int,
	$accounts: [CloudUnlinkAccountsInput],
) { cloudUnlinkAccount(
	accountId: $accountId,
	accounts: $accounts,
) {
	
} }`

// Get all linked cloud provider accounts scoped to the Actor.
func (a *Cloud) GetLinkedAccounts(
	provider string,
) (*[]CloudLinkedAccount, error) {

	resp := linkedAccountsResponse{}
	vars := map[string]interface{}{
		"provider": provider,
	}

	if err := a.client.NerdGraphQuery(getLinkedAccountsQuery, vars, &resp); err != nil {
		return nil, err
	}

	if len(resp.Actor.Cloud.LinkedAccounts) == 0 {
		return nil, errors.NewNotFound("")
	}

	return &resp.Actor.Cloud.LinkedAccounts, nil
}

const getLinkedAccountsQuery = `query(
) { actor { cloud { linkedAccounts(
) {

} } } }`

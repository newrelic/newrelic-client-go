// Code generated by tutone: DO NOT EDIT
package alerts

import "context"

// Creates a notification channel
func (a *Alerts) AlertsNotificationChannelCreate(
	accountID int,
	notificationChannel AlertsNotificationChannelCreateConfiguration,
) (*AlertsNotificationChannelCreateResponse, error) {
	return a.AlertsNotificationChannelCreateWithContext(context.Background(),
		accountID,
		notificationChannel,
	)
}

// Creates a notification channel
func (a *Alerts) AlertsNotificationChannelCreateWithContext(
	ctx context.Context,
	accountID int,
	notificationChannel AlertsNotificationChannelCreateConfiguration,
) (*AlertsNotificationChannelCreateResponse, error) {

	resp := AlertsNotificationChannelCreateQueryResponse{}
	vars := map[string]interface{}{
		"accountId":           accountID,
		"notificationChannel": notificationChannel,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AlertsNotificationChannelCreateMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AlertsNotificationChannelCreateResponse, nil
}

type AlertsNotificationChannelCreateQueryResponse struct {
	AlertsNotificationChannelCreateResponse AlertsNotificationChannelCreateResponse `json:"AlertsNotificationChannelCreate"`
}

const AlertsNotificationChannelCreateMutation = `mutation(
	$accountId: Int!,
	$notificationChannel: AlertsNotificationChannelCreateConfiguration!,
) { alertsNotificationChannelCreate(
	accountId: $accountId,
	notificationChannel: $notificationChannel,
) {
	notificationChannel
} }`

// Deletes a notification channel
func (a *Alerts) AlertsNotificationChannelDelete(
	accountID int,
	iD string,
) (*AlertsNotificationChannelDeleteResponse, error) {
	return a.AlertsNotificationChannelDeleteWithContext(context.Background(),
		accountID,
		iD,
	)
}

// Deletes a notification channel
func (a *Alerts) AlertsNotificationChannelDeleteWithContext(
	ctx context.Context,
	accountID int,
	iD string,
) (*AlertsNotificationChannelDeleteResponse, error) {

	resp := AlertsNotificationChannelDeleteQueryResponse{}
	vars := map[string]interface{}{
		"accountId": accountID,
		"id":        iD,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AlertsNotificationChannelDeleteMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AlertsNotificationChannelDeleteResponse, nil
}

type AlertsNotificationChannelDeleteQueryResponse struct {
	AlertsNotificationChannelDeleteResponse AlertsNotificationChannelDeleteResponse `json:"AlertsNotificationChannelDelete"`
}

const AlertsNotificationChannelDeleteMutation = `mutation(
	$accountId: Int!,
	$id: ID!,
) { alertsNotificationChannelDelete(
	accountId: $accountId,
	id: $id,
) {
	id
} }`

// Updates an existing notification channel
func (a *Alerts) AlertsNotificationChannelUpdate(
	accountID int,
	iD string,
	notificationChannel AlertsNotificationChannelUpdateConfiguration,
) (*AlertsNotificationChannelUpdateResponse, error) {
	return a.AlertsNotificationChannelUpdateWithContext(context.Background(),
		accountID,
		iD,
		notificationChannel,
	)
}

// Updates an existing notification channel
func (a *Alerts) AlertsNotificationChannelUpdateWithContext(
	ctx context.Context,
	accountID int,
	iD string,
	notificationChannel AlertsNotificationChannelUpdateConfiguration,
) (*AlertsNotificationChannelUpdateResponse, error) {

	resp := AlertsNotificationChannelUpdateQueryResponse{}
	vars := map[string]interface{}{
		"accountId":           accountID,
		"id":                  iD,
		"notificationChannel": notificationChannel,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AlertsNotificationChannelUpdateMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AlertsNotificationChannelUpdateResponse, nil
}

type AlertsNotificationChannelUpdateQueryResponse struct {
	AlertsNotificationChannelUpdateResponse AlertsNotificationChannelUpdateResponse `json:"AlertsNotificationChannelUpdate"`
}

const AlertsNotificationChannelUpdateMutation = `mutation(
	$accountId: Int!,
	$id: ID!,
	$notificationChannel: AlertsNotificationChannelUpdateConfiguration!,
) { alertsNotificationChannelUpdate(
	accountId: $accountId,
	id: $id,
	notificationChannel: $notificationChannel,
) {
	notificationChannel
} }`

// Dissociates notification channels from a policy.
func (a *Alerts) AlertsNotificationChannelsRemoveFromPolicy(
	accountID int,
	notificationChannelIds []string,
	policyID string,
) (*AlertsNotificationChannelsRemoveFromPolicyResponse, error) {
	return a.AlertsNotificationChannelsRemoveFromPolicyWithContext(context.Background(),
		accountID,
		notificationChannelIds,
		policyID,
	)
}

// Dissociates notification channels from a policy.
func (a *Alerts) AlertsNotificationChannelsRemoveFromPolicyWithContext(
	ctx context.Context,
	accountID int,
	notificationChannelIds []string,
	policyID string,
) (*AlertsNotificationChannelsRemoveFromPolicyResponse, error) {

	resp := AlertsNotificationChannelsRemoveFromPolicyQueryResponse{}
	vars := map[string]interface{}{
		"accountId":              accountID,
		"notificationChannelIds": notificationChannelIds,
		"policyId":               policyID,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AlertsNotificationChannelsRemoveFromPolicyMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AlertsNotificationChannelsRemoveFromPolicyResponse, nil
}

type AlertsNotificationChannelsRemoveFromPolicyQueryResponse struct {
	AlertsNotificationChannelsRemoveFromPolicyResponse AlertsNotificationChannelsRemoveFromPolicyResponse `json:"AlertsNotificationChannelsRemoveFromPolicy"`
}

const AlertsNotificationChannelsRemoveFromPolicyMutation = `mutation(
	$accountId: Int!,
	$notificationChannelIds: [ID!]!,
	$policyId: ID!,
) { alertsNotificationChannelsRemoveFromPolicy(
	accountId: $accountId,
	notificationChannelIds: $notificationChannelIds,
	policyId: $policyId,
) {
	policyId
} }`

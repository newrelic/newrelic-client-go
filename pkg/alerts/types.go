// Code generated by tutone: DO NOT EDIT
package alerts

import (
	"encoding/json"
	"fmt"

	"github.com/newrelic/newrelic-client-go/pkg/nrtime"
)

// AlertsDayOfWeek - The day of the week used to configure a WEEKLY scheduled MutingRule
type AlertsDayOfWeek string

var AlertsDayOfWeekTypes = struct {
	// Friday
	FRIDAY AlertsDayOfWeek
	// Monday
	MONDAY AlertsDayOfWeek
	// Saturday
	SATURDAY AlertsDayOfWeek
	// Sunday
	SUNDAY AlertsDayOfWeek
	// Thursday
	THURSDAY AlertsDayOfWeek
	// Tuesday
	TUESDAY AlertsDayOfWeek
	// Wednesday
	WEDNESDAY AlertsDayOfWeek
}{
	// Friday
	FRIDAY: "FRIDAY",
	// Monday
	MONDAY: "MONDAY",
	// Saturday
	SATURDAY: "SATURDAY",
	// Sunday
	SUNDAY: "SUNDAY",
	// Thursday
	THURSDAY: "THURSDAY",
	// Tuesday
	TUESDAY: "TUESDAY",
	// Wednesday
	WEDNESDAY: "WEDNESDAY",
}

// AlertsIncidentPreference - Determines how incidents are created for critical violations of the conditions contained in the policy.
type AlertsIncidentPreference string

var AlertsIncidentPreferenceTypes = struct {
	// A condition will create a condition-level incident when it violates its critical threshold.
	// Other violating conditions will create their own incidents.
	PER_CONDITION AlertsIncidentPreference
	// Each target of each condition will create an entity-level incident upon critical violation.
	// Other violating targets will create their own incidents (even on the same condition).
	PER_CONDITION_AND_TARGET AlertsIncidentPreference
	// A condition will create a policy-level incident when it violates its critical threshold.
	// Other violating conditions will be grouped into this incident.
	PER_POLICY AlertsIncidentPreference
}{
	// A condition will create a condition-level incident when it violates its critical threshold.
	// Other violating conditions will create their own incidents.
	PER_CONDITION: "PER_CONDITION",
	// Each target of each condition will create an entity-level incident upon critical violation.
	// Other violating targets will create their own incidents (even on the same condition).
	PER_CONDITION_AND_TARGET: "PER_CONDITION_AND_TARGET",
	// A condition will create a policy-level incident when it violates its critical threshold.
	// Other violating conditions will be grouped into this incident.
	PER_POLICY: "PER_POLICY",
}

// AlertsMutingRuleConditionGroupOperator - An operator used to combine MutingRuleConditions within a MutingRuleConditionGroup.
type AlertsMutingRuleConditionGroupOperator string

var AlertsMutingRuleConditionGroupOperatorTypes = struct {
	// Match conditions by AND
	AND AlertsMutingRuleConditionGroupOperator
	// Match conditions by OR
	OR AlertsMutingRuleConditionGroupOperator
}{
	// Match conditions by AND
	AND: "AND",
	// Match conditions by OR
	OR: "OR",
}

// AlertsMutingRuleConditionOperator - The list of operators to be used in a MutingRuleCondition. Each operator is limited to one value in the `values` list unless otherwise specified.
type AlertsMutingRuleConditionOperator string

var AlertsMutingRuleConditionOperatorTypes = struct {
	// Where attribute is any.
	ANY AlertsMutingRuleConditionOperator
	// Where attribute contains value.
	CONTAINS AlertsMutingRuleConditionOperator
	// Where attribute ends with value.
	ENDS_WITH AlertsMutingRuleConditionOperator
	// Where attribute equals value.
	EQUALS AlertsMutingRuleConditionOperator
	// Where attribute in values. (Limit 500)
	IN AlertsMutingRuleConditionOperator
	// Where attribute is blank.
	IS_BLANK AlertsMutingRuleConditionOperator
	// Where attribute is not blank.
	IS_NOT_BLANK AlertsMutingRuleConditionOperator
	// Where attribute does not contain value.
	NOT_CONTAINS AlertsMutingRuleConditionOperator
	// Where attribute does not end with value.
	NOT_ENDS_WITH AlertsMutingRuleConditionOperator
	// Where attribute does not equal value.
	NOT_EQUALS AlertsMutingRuleConditionOperator
	// Where attribute not in values. (Limit 500)
	NOT_IN AlertsMutingRuleConditionOperator
	// Where attribute does not start with value.
	NOT_STARTS_WITH AlertsMutingRuleConditionOperator
	// Where attribute starts with value.
	STARTS_WITH AlertsMutingRuleConditionOperator
}{
	// Where attribute is any.
	ANY: "ANY",
	// Where attribute contains value.
	CONTAINS: "CONTAINS",
	// Where attribute ends with value.
	ENDS_WITH: "ENDS_WITH",
	// Where attribute equals value.
	EQUALS: "EQUALS",
	// Where attribute in values. (Limit 500)
	IN: "IN",
	// Where attribute is blank.
	IS_BLANK: "IS_BLANK",
	// Where attribute is not blank.
	IS_NOT_BLANK: "IS_NOT_BLANK",
	// Where attribute does not contain value.
	NOT_CONTAINS: "NOT_CONTAINS",
	// Where attribute does not end with value.
	NOT_ENDS_WITH: "NOT_ENDS_WITH",
	// Where attribute does not equal value.
	NOT_EQUALS: "NOT_EQUALS",
	// Where attribute not in values. (Limit 500)
	NOT_IN: "NOT_IN",
	// Where attribute does not start with value.
	NOT_STARTS_WITH: "NOT_STARTS_WITH",
	// Where attribute starts with value.
	STARTS_WITH: "STARTS_WITH",
}

// AlertsMutingRuleScheduleRepeat - Details about if or how frequently a MutingRule's schedule repeats.
type AlertsMutingRuleScheduleRepeat string

var AlertsMutingRuleScheduleRepeatTypes = struct {
	// Schedule repeats once per calendar day
	DAILY AlertsMutingRuleScheduleRepeat
	// Schedule repeats once per calendar month
	MONTHLY AlertsMutingRuleScheduleRepeat
	// Schedule repeats once per specified day per calendar week
	WEEKLY AlertsMutingRuleScheduleRepeat
}{
	// Schedule repeats once per calendar day
	DAILY: "DAILY",
	// Schedule repeats once per calendar month
	MONTHLY: "MONTHLY",
	// Schedule repeats once per specified day per calendar week
	WEEKLY: "WEEKLY",
}

// AlertsNRQLConditionTermsOperator - Operator used to compare against the threshold for NrqlConditions.
type AlertsNRQLConditionTermsOperator string

var AlertsNRQLConditionTermsOperatorTypes = struct {
	// For comparing values above a threshold.
	ABOVE AlertsNRQLConditionTermsOperator
	// For comparing values above or equal to a threshold.
	ABOVE_OR_EQUALS AlertsNRQLConditionTermsOperator
	// For comparing values below a threshold.
	BELOW AlertsNRQLConditionTermsOperator
	// For comparing values below or equal to a threshold.
	BELOW_OR_EQUALS AlertsNRQLConditionTermsOperator
	// For comparing values equal to a threshold.
	EQUALS AlertsNRQLConditionTermsOperator
	// For comparing values that do not equal a threshold.
	NOT_EQUALS AlertsNRQLConditionTermsOperator
}{
	// For comparing values above a threshold.
	ABOVE: "ABOVE",
	// For comparing values above or equal to a threshold.
	ABOVE_OR_EQUALS: "ABOVE_OR_EQUALS",
	// For comparing values below a threshold.
	BELOW: "BELOW",
	// For comparing values below or equal to a threshold.
	BELOW_OR_EQUALS: "BELOW_OR_EQUALS",
	// For comparing values equal to a threshold.
	EQUALS: "EQUALS",
	// For comparing values that do not equal a threshold.
	NOT_EQUALS: "NOT_EQUALS",
}

// AlertsNotificationChannelCreateErrorType - The error type for creating a notification channel.
type AlertsNotificationChannelCreateErrorType string

var AlertsNotificationChannelCreateErrorTypeTypes = struct {
	// Bad user input error.
	BAD_USER_INPUT AlertsNotificationChannelCreateErrorType
	// Forbidden error.
	FORBIDDEN_ERROR AlertsNotificationChannelCreateErrorType
	// Server error.
	SERVER_ERROR AlertsNotificationChannelCreateErrorType
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR AlertsNotificationChannelCreateErrorType
}{
	// Bad user input error.
	BAD_USER_INPUT: "BAD_USER_INPUT",
	// Forbidden error.
	FORBIDDEN_ERROR: "FORBIDDEN_ERROR",
	// Server error.
	SERVER_ERROR: "SERVER_ERROR",
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR: "TOO_MANY_REQUESTS_ERROR",
}

// AlertsNotificationChannelDeleteErrorType - The error type for deleting a notification channel.
type AlertsNotificationChannelDeleteErrorType string

var AlertsNotificationChannelDeleteErrorTypeTypes = struct {
	// Bad user input error.
	BAD_USER_INPUT AlertsNotificationChannelDeleteErrorType
	// Forbidden error.
	FORBIDDEN_ERROR AlertsNotificationChannelDeleteErrorType
	// Not found error.
	NOT_FOUND_ERROR AlertsNotificationChannelDeleteErrorType
	// Server error.
	SERVER_ERROR AlertsNotificationChannelDeleteErrorType
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR AlertsNotificationChannelDeleteErrorType
}{
	// Bad user input error.
	BAD_USER_INPUT: "BAD_USER_INPUT",
	// Forbidden error.
	FORBIDDEN_ERROR: "FORBIDDEN_ERROR",
	// Not found error.
	NOT_FOUND_ERROR: "NOT_FOUND_ERROR",
	// Server error.
	SERVER_ERROR: "SERVER_ERROR",
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR: "TOO_MANY_REQUESTS_ERROR",
}

// AlertsNotificationChannelType - The type of the notification channel which determines its configuration field.
type AlertsNotificationChannelType string

var AlertsNotificationChannelTypeTypes = struct {
	// Campfire notification channel.
	CAMPFIRE AlertsNotificationChannelType
	// Email notification channel.
	EMAIL AlertsNotificationChannelType
	// HipChat notification channel.
	HIP_CHAT AlertsNotificationChannelType
	// OpsGenie notification channel.
	OPSGENIE AlertsNotificationChannelType
	// PagerDuty notification channel.
	PAGERDUTY AlertsNotificationChannelType
	// Slack notification channel.
	SLACK AlertsNotificationChannelType
	// User notification channel.
	USER AlertsNotificationChannelType
	// VictorOps notification channel.
	VICTOROPS AlertsNotificationChannelType
	// Webhook notification channel.
	WEBHOOK AlertsNotificationChannelType
	// xMatters notification channel.
	XMATTERS AlertsNotificationChannelType
}{
	// Campfire notification channel.
	CAMPFIRE: "CAMPFIRE",
	// Email notification channel.
	EMAIL: "EMAIL",
	// HipChat notification channel.
	HIP_CHAT: "HIP_CHAT",
	// OpsGenie notification channel.
	OPSGENIE: "OPSGENIE",
	// PagerDuty notification channel.
	PAGERDUTY: "PAGERDUTY",
	// Slack notification channel.
	SLACK: "SLACK",
	// User notification channel.
	USER: "USER",
	// VictorOps notification channel.
	VICTOROPS: "VICTOROPS",
	// Webhook notification channel.
	WEBHOOK: "WEBHOOK",
	// xMatters notification channel.
	XMATTERS: "XMATTERS",
}

// AlertsNotificationChannelUpdateErrorType - The error type for updating a notification channel.
type AlertsNotificationChannelUpdateErrorType string

var AlertsNotificationChannelUpdateErrorTypeTypes = struct {
	// Bad user input error.
	BAD_USER_INPUT AlertsNotificationChannelUpdateErrorType
	// Forbidden error.
	FORBIDDEN_ERROR AlertsNotificationChannelUpdateErrorType
	// Not found error.
	NOT_FOUND_ERROR AlertsNotificationChannelUpdateErrorType
	// Server error.
	SERVER_ERROR AlertsNotificationChannelUpdateErrorType
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR AlertsNotificationChannelUpdateErrorType
}{
	// Bad user input error.
	BAD_USER_INPUT: "BAD_USER_INPUT",
	// Forbidden error.
	FORBIDDEN_ERROR: "FORBIDDEN_ERROR",
	// Not found error.
	NOT_FOUND_ERROR: "NOT_FOUND_ERROR",
	// Server error.
	SERVER_ERROR: "SERVER_ERROR",
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR: "TOO_MANY_REQUESTS_ERROR",
}

// AlertsNotificationChannelsRemoveFromPolicyErrorType - The error type for dissociating notification channels from a policy.
type AlertsNotificationChannelsRemoveFromPolicyErrorType string

var AlertsNotificationChannelsRemoveFromPolicyErrorTypeTypes = struct {
	// Bad user input error.
	BAD_USER_INPUT AlertsNotificationChannelsRemoveFromPolicyErrorType
	// Forbidden error.
	FORBIDDEN_ERROR AlertsNotificationChannelsRemoveFromPolicyErrorType
	// Not found error.
	NOT_FOUND_ERROR AlertsNotificationChannelsRemoveFromPolicyErrorType
	// Server error.
	SERVER_ERROR AlertsNotificationChannelsRemoveFromPolicyErrorType
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR AlertsNotificationChannelsRemoveFromPolicyErrorType
}{
	// Bad user input error.
	BAD_USER_INPUT: "BAD_USER_INPUT",
	// Forbidden error.
	FORBIDDEN_ERROR: "FORBIDDEN_ERROR",
	// Not found error.
	NOT_FOUND_ERROR: "NOT_FOUND_ERROR",
	// Server error.
	SERVER_ERROR: "SERVER_ERROR",
	// Too many requests error.
	TOO_MANY_REQUESTS_ERROR: "TOO_MANY_REQUESTS_ERROR",
}

// AlertsOpsGenieDataCenterRegion - OpsGenie data center region
type AlertsOpsGenieDataCenterRegion string

var AlertsOpsGenieDataCenterRegionTypes = struct {
	// EU data center region
	EU AlertsOpsGenieDataCenterRegion
	// US data center region
	US AlertsOpsGenieDataCenterRegion
}{
	// EU data center region
	EU: "EU",
	// US data center region
	US: "US",
}

// AlertsWebhookCustomPayloadType - Webhook custom payload type
type AlertsWebhookCustomPayloadType string

var AlertsWebhookCustomPayloadTypeTypes = struct {
	// FORM payload type
	FORM AlertsWebhookCustomPayloadType
	// JSON payload type
	JSON AlertsWebhookCustomPayloadType
}{
	// FORM payload type
	FORM: "FORM",
	// JSON payload type
	JSON: "JSON",
}

// AlertsCampfireNotificationChannel - Campfire notification channel.
type AlertsCampfireNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// Campfire channel specific configuration.
	Config AlertsCampfireNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsCampfireNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsCampfireNotificationChannelConfig - Configuration for Campfire notification channel.
type AlertsCampfireNotificationChannelConfig struct {
	// Room.
	Room string `json:"room"`
	// Subdomain.
	Subdomain string `json:"subdomain"`
	// Authentication token.
	Token SecureValue `json:"token"`
}

// AlertsEmailNotificationChannel - Email notification channel.
type AlertsEmailNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// Email channel specific configuration.
	Config AlertsEmailNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsEmailNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsEmailNotificationChannelConfig - Configuration for Email notification channel.
type AlertsEmailNotificationChannelConfig struct {
	// List of email recipients.
	Emails []string `json:"emails"`
	// Include details about the violation as a JSON attachment.
	IncludeJson bool `json:"includeJson"`
}

// AlertsEmailNotificationChannelCreateInput - The input for creating a new Email notification channel.
type AlertsEmailNotificationChannelCreateInput struct {
	// List of email recipients.
	Emails []string `json:"emails"`
	// Include details about the violation as a JSON attachment.
	IncludeJson bool `json:"includeJson"`
	// Notification channel name.
	Name string `json:"name"`
}

// AlertsEmailNotificationChannelUpdateInput - The input for updating an existing Email notification channel.
type AlertsEmailNotificationChannelUpdateInput struct {
	// List of email recipients.
	Emails []string `json:"emails"`
	// Include details about the violation as a JSON attachment.
	IncludeJson bool `json:"includeJson,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
}

// AlertsHipChatNotificationChannel - HipChat notification channel.
type AlertsHipChatNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// HipChat channel specific configuration.
	Config AlertsHipChatNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsHipChatNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsHipChatNotificationChannelConfig - Configuration for HipChat notification channel.
type AlertsHipChatNotificationChannelConfig struct {
	// Authentication token.
	AuthToken SecureValue `json:"authToken"`
	// Base URL.
	BaseURL string `json:"baseUrl"`
	// Room ID.
	RoomId string `json:"roomId"`
}

// AlertsMutingRuleConditionGroupInput - A group of MutingRuleConditions combined by an operator.
type AlertsMutingRuleConditionGroupInput struct {
	// The individual MutingRuleConditions within the group.
	Conditions []AlertsMutingRuleConditionInput `json:"conditions,omitempty"`
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator AlertsMutingRuleConditionGroupOperator `json:"operator"`
}

// AlertsMutingRuleConditionInput - A condition which describes how to target a New Relic Alerts Violation.
type AlertsMutingRuleConditionInput struct {
	// The attribute on a violation. Expects one of:
	//
	// * **accountId** - The account id
	// * **conditionId** - The alert condition id
	// * **conditionName** - The alert condition name
	// * **conditionRunbookUrl** - The alert condition's runbook url
	// * **conditionType** - The alert condition type, such as `metric`
	// * **entity.guid** - The entity GUID
	// * **nrqlEventType** - The NRQL event type
	// * **nrqlQuery** - The NRQL query string
	// * **policyId** - The alert policy id
	// * **policyName** - The alert policy name
	// * **product** - The target product (e.g., `SYNTHETICS`)
	// * **tags.<NAME>** - Arbitrary tags associated with some entity (e.g., FACET from a NRQL query, for example `tags.appName` or `tags.host`)
	// * **targetId** - The ID of the alerts target
	// * **targetName** - The name of the alerts target
	Attribute string `json:"attribute"`
	// The operator used to compare the attribute's value with the supplied value(s).
	Operator AlertsMutingRuleConditionOperator `json:"operator"`
	// The value(s) to compare against the attribute's value.
	Values []string `json:"values"`
}

// AlertsMutingRuleInput - Input for creating MutingRules for New Relic Alerts Violations.
type AlertsMutingRuleInput struct {
	// The condition that defines which violations to target.
	Condition AlertsMutingRuleConditionGroupInput `json:"condition,omitempty"`
	// The description of the MutingRule.
	Description string `json:"description,omitempty"`
	// Whether the MutingRule is enabled
	Enabled bool `json:"enabled"`
	// The name of the MutingRule.
	Name string `json:"name"`
	// The time window when the MutingRule should actively mute violations.
	Schedule AlertsMutingRuleScheduleInput `json:"schedule,omitempty"`
}

// AlertsMutingRuleScheduleInput - The time window when the MutingRule should actively mute violations.
type AlertsMutingRuleScheduleInput struct {
	// The datetime stamp when the MutingRule schedule should stop repeating.
	// This is in local ISO 8601 format without an offset.
	//
	// Example: `'2020-07-10T15:00:00'`
	//
	// Note: Either `endRepeat` or `repeatCount` should be used to end a MutingRule schedule.
	// Both fields should not be provided together.
	EndRepeat nrtime.NaiveDateTime `json:"endRepeat,omitempty"`
	// The datetime stamp representing when the MutingRule should end.
	// This is in local ISO 8601 format without an offset.
	//
	// Example: `'2020-07-10T15:00:00'`
	EndTime nrtime.NaiveDateTime `json:"endTime,omitempty"`
	// The frequency the MutingRule schedule repeats.
	// If the MutingRule repeats `WEEKLY`, be sure to set `weeklyRepeatDays`.
	// If the MutingRule does not repeat, use `null`.
	//
	// Example: `DAILY`
	Repeat AlertsMutingRuleScheduleRepeat `json:"repeat,omitempty"`
	// The number of times the MutingRule schedule should repeat.
	//
	// Note: Either `repeatCount` or `endRepeat` should be used to end a MutingRule schedule.
	// Both fields should not be provided together.
	RepeatCount int `json:"repeatCount,omitempty"`
	// The datetime stamp representing when the MutingRule should start.
	// This is in local ISO 8601 format without an offset.
	//
	// Example: `'2020-07-08T14:30:00'`
	StartTime nrtime.NaiveDateTime `json:"startTime,omitempty"`
	// The time zone that applies to the MutingRule schedule.
	//
	// Example: `'America/Los_Angeles'`
	//
	// See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
	TimeZone string `json:"timeZone"`
	// The day(s) of the week that a MutingRule should repeat when the repeat field is set to `WEEKLY`.
	//
	// Example: `[MONDAY, WEDNESDAY]`
	WeeklyRepeatDays []AlertsDayOfWeek `json:"weeklyRepeatDays"`
}

// AlertsNotificationChannel - A notification channel.
type AlertsNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsNotificationChannelCreateConfiguration - The input configuration for creating a notification channel.
type AlertsNotificationChannelCreateConfiguration struct {
	// The input configuration for creating an Email notification channel.
	Email AlertsEmailNotificationChannelCreateInput `json:"email,omitempty"`
	// The input configuration for creating an OpsGenie notification channel.
	OpsGenie AlertsOpsGenieNotificationChannelCreateInput `json:"opsGenie,omitempty"`
	// The input configuration for creating a PagerDuty notification channel.
	PagerDuty AlertsPagerDutyNotificationChannelCreateInput `json:"pagerDuty,omitempty"`
	// The input configuration for creating a Slack notification channel.
	Slack AlertsSlackNotificationChannelCreateInput `json:"slack,omitempty"`
	// The input configuration for creating a VictorOps notification channel.
	VictorOps AlertsVictorOpsNotificationChannelCreateInput `json:"victorOps,omitempty"`
	// The input configuration for creating a Webhook notification channel.
	Webhook AlertsWebhookNotificationChannelCreateInput `json:"webhook,omitempty"`
	// The input configuration for creating an xMatters notification channel.
	XMatters AlertsXMattersNotificationChannelCreateInput `json:"xMatters,omitempty"`
}

// AlertsNotificationChannelCreateError - The error for creating a notification channel.
type AlertsNotificationChannelCreateError struct {
	// Error description.
	Description string `json:"description"`
	// Error type.
	ErrorType AlertsNotificationChannelCreateErrorType `json:"errorType"`
}

// AlertsNotificationChannelCreateResponse - The response for creating a notification channel.
type AlertsNotificationChannelCreateResponse struct {
	// Error.
	Error AlertsNotificationChannelCreateError `json:"error,omitempty"`
	// Notification channel.
	NotificationChannel AlertsNotificationChannel `json:"notificationChannel,omitempty"`
}

// AlertsNotificationChannelDeleteError - The error for deleting a notification channel.
type AlertsNotificationChannelDeleteError struct {
	// Error description.
	Description string `json:"description"`
	// Error type.
	ErrorType AlertsNotificationChannelDeleteErrorType `json:"errorType"`
	// Notification channel ID.
	NotificationChannelId string `json:"notificationChannelId"`
}

// AlertsNotificationChannelDeleteResponse - The response for deleting a notification channel.
type AlertsNotificationChannelDeleteResponse struct {
	// Error.
	Error AlertsNotificationChannelDeleteError `json:"error,omitempty"`
	// Notification channel ID.
	ID string `json:"id"`
}

// AlertsNotificationChannelId - A notification channel ID - temporarily until addToPolicy will support returning full notification channels.
type AlertsNotificationChannelId struct {
	// Channel ID.
	ID string `json:"id"`
}

// AlertsNotificationChannelPoliciesResultSet - A result set containing associated policies information for a notification channel.
type AlertsNotificationChannelPoliciesResultSet struct {
	// A set of policies associated with the channel.
	Policies []AlertsNotificationChannelPolicy `json:"policies"`
	// Total number of policies associated with the channel.
	TotalCount int `json:"totalCount"`
}

// AlertsNotificationChannelPolicy - Information about a policy associated with a notification channel.
type AlertsNotificationChannelPolicy struct {
	// Policy ID.
	ID string `json:"id"`
	// Policy name.
	Name string `json:"name"`
}

// AlertsNotificationChannelUpdateConfiguration - The input configuration for updating a notification channel.
type AlertsNotificationChannelUpdateConfiguration struct {
	// The input configuration for updating an Email notification channel.
	Email AlertsEmailNotificationChannelUpdateInput `json:"email,omitempty"`
	// The input configuration for updating an OpsGenie notification channel.
	OpsGenie AlertsOpsGenieNotificationChannelUpdateInput `json:"opsGenie,omitempty"`
	// The input configuration for updating a PagerDuty notification channel.
	PagerDuty AlertsPagerDutyNotificationChannelUpdateInput `json:"pagerDuty,omitempty"`
	// The input configuration for updating a Slack notification channel.
	Slack AlertsSlackNotificationChannelUpdateInput `json:"slack,omitempty"`
	// The input configuration for updating a VictorOps notification channel.
	VictorOps AlertsVictorOpsNotificationChannelUpdateInput `json:"victorOps,omitempty"`
	// The input configuration for updating a Webhook notification channel.
	Webhook AlertsWebhookNotificationChannelUpdateInput `json:"webhook,omitempty"`
	// The input configuration for updating an xMatters notification channel.
	XMatters AlertsXMattersNotificationChannelUpdateInput `json:"xMatters,omitempty"`
}

// AlertsNotificationChannelUpdateError - The error for updating a notification channel.
type AlertsNotificationChannelUpdateError struct {
	// Error description.
	Description string `json:"description"`
	// Error type.
	ErrorType AlertsNotificationChannelUpdateErrorType `json:"errorType"`
	// Notification channel ID.
	NotificationChannelId string `json:"notificationChannelId"`
}

// AlertsNotificationChannelUpdateResponse - The response for updating a notification channel.
type AlertsNotificationChannelUpdateResponse struct {
	// Error.
	Error AlertsNotificationChannelUpdateError `json:"error,omitempty"`
	// Notification channel.
	NotificationChannel AlertsNotificationChannel `json:"notificationChannel,omitempty"`
}

// AlertsNotificationChannelsRemoveFromPolicyError - The error for dissociating notification channels from a policy.
type AlertsNotificationChannelsRemoveFromPolicyError struct {
	// Error description.
	Description string `json:"description"`
	// Error type.
	ErrorType AlertsNotificationChannelsRemoveFromPolicyErrorType `json:"errorType"`
	// Notification channel ID.
	NotificationChannelId string `json:"notificationChannelId"`
}

// AlertsNotificationChannelsRemoveFromPolicyResponse - The response for dissociating notification channels from a policy.
type AlertsNotificationChannelsRemoveFromPolicyResponse struct {
	// Errors.
	Errors []AlertsNotificationChannelsRemoveFromPolicyError `json:"errors"`
	// Notification channels.
	NotificationChannels []AlertsNotificationChannelId `json:"notificationChannels"`
	// Policy ID.
	PolicyID string `json:"policyId"`
}

// AlertsOpsGenieNotificationChannel - OpsGenie notification channel.
type AlertsOpsGenieNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// OpsGenie channel specific configuration.
	Config AlertsOpsGenieNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsOpsGenieNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsOpsGenieNotificationChannelConfig - Configuration for OpsGenie notification channel.
type AlertsOpsGenieNotificationChannelConfig struct {
	// API key.
	APIKey SecureValue `json:"apiKey"`
	// OpsGenie data center region.
	DataCenterRegion AlertsOpsGenieDataCenterRegion `json:"dataCenterRegion"`
	// List of email recipients.
	Recipients []string `json:"recipients"`
	// Tags.
	Tags []string `json:"tags"`
	// Teams.
	Teams []string `json:"teams"`
}

// AlertsOpsGenieNotificationChannelCreateInput - The input for creating a new OpsGenie notification channel.
type AlertsOpsGenieNotificationChannelCreateInput struct {
	// API key.
	APIKey SecureValue `json:"apiKey"`
	// OpsGenie data center region.
	DataCenterRegion AlertsOpsGenieDataCenterRegion `json:"dataCenterRegion"`
	// Notification channel name.
	Name string `json:"name"`
	// List of email recipients.
	Recipients []string `json:"recipients"`
	// Tags.
	Tags []string `json:"tags"`
	// Teams.
	Teams []string `json:"teams"`
}

// AlertsOpsGenieNotificationChannelUpdateInput - The input for updating an existing OpsGenie notification channel.
type AlertsOpsGenieNotificationChannelUpdateInput struct {
	// API key.
	APIKey SecureValue `json:"apiKey,omitempty"`
	// OpsGenie data center region.
	DataCenterRegion AlertsOpsGenieDataCenterRegion `json:"dataCenterRegion,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
	// List of email recipients.
	Recipients []string `json:"recipients"`
	// Tags.
	Tags []string `json:"tags"`
	// Teams.
	Teams []string `json:"teams"`
}

// AlertsPagerDutyNotificationChannel - PagerDuty notification channel.
type AlertsPagerDutyNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// PagerDuty channel specific configuration.
	Config AlertsPagerDutyNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsPagerDutyNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsPagerDutyNotificationChannelConfig - Configuration for PagerDuty notification channel.
type AlertsPagerDutyNotificationChannelConfig struct {
	// API key.
	APIKey SecureValue `json:"apiKey"`
}

// AlertsPagerDutyNotificationChannelCreateInput - The input for creating a new PagerDuty notification channel.
type AlertsPagerDutyNotificationChannelCreateInput struct {
	// API key.
	APIKey SecureValue `json:"apiKey"`
	// Notification channel name.
	Name string `json:"name"`
}

// AlertsPagerDutyNotificationChannelUpdateInput - The input for updating an existing PagerDuty notification channel.
type AlertsPagerDutyNotificationChannelUpdateInput struct {
	// API key.
	APIKey SecureValue `json:"apiKey,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
}

// AlertsPoliciesSearchCriteriaInput - Search criteria for returning specific policies.
type AlertsPoliciesSearchCriteriaInput struct {
	// The list of policy ids to return.
	IDs []string `json:"ids"`
	// Exact name of the policy.
	Name string `json:"name,omitempty"`
	// String to partially match a policy name.
	NameLike string `json:"nameLike,omitempty"`
}

// AlertsPoliciesSearchResultSet - Collection of policies with pagination information.
type AlertsPoliciesSearchResultSet struct {
	// Cursor pointing to the end of the current page of policy records. Null if final page.
	NextCursor string `json:"nextCursor,omitempty"`
	// Set of policies returned for the supplied cursor and criteria.
	Policies []AlertsPolicy `json:"policies"`
	// Total number of policy records for the given search criteria.
	TotalCount int `json:"totalCount"`
}

// AlertsPolicy - Container for conditions with associated notifications channels.
type AlertsPolicy struct {
	// Account ID of the policy.
	AccountID int `json:"accountId"`
	// Primary key for policies.
	ID string `json:"id"`
	// Determines how incidents are created for critical violations of the conditions contained in the policy.
	IncidentPreference AlertsIncidentPreference `json:"incidentPreference"`
	// Description of the policy.
	Name string `json:"name"`
}

// AlertsPolicyInput - Container for conditions with associated notifications channels.
type AlertsPolicyInput struct {
	// Determines how incidents are created for critical violations of the conditions contained in the policy.
	IncidentPreference AlertsIncidentPreference `json:"incidentPreference"`
	// Description of the policy.
	Name string `json:"name"`
}

// AlertsPolicyUpdateInput - Policy fields to be updated.
type AlertsPolicyUpdateInput struct {
	// Determines how incidents are created for critical violations of the conditions contained in the policy.
	IncidentPreference AlertsIncidentPreference `json:"incidentPreference,omitempty"`
	// Description of the policy.
	Name string `json:"name,omitempty"`
}

// AlertsSlackNotificationChannel - Slack notification channel.
type AlertsSlackNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// Slack channel specific configuration.
	Config AlertsSlackNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsSlackNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsSlackNotificationChannelConfig - Configuration for Slack notification channel.
type AlertsSlackNotificationChannelConfig struct {
	// Slack channel name.
	TeamChannel string `json:"teamChannel,omitempty"`
	// Slack channel URL.
	URL SecureValue `json:"url"`
}

// AlertsSlackNotificationChannelCreateInput - The input for creating a new Slack notification channel.
type AlertsSlackNotificationChannelCreateInput struct {
	// Notification channel name.
	Name string `json:"name"`
	// Slack channel name.
	TeamChannel string `json:"teamChannel,omitempty"`
	// Slack channel URL.
	URL SecureValue `json:"url"`
}

// AlertsSlackNotificationChannelUpdateInput - The input for updating an existing Slack notification channel.
type AlertsSlackNotificationChannelUpdateInput struct {
	// Notification channel name.
	Name string `json:"name,omitempty"`
	// Slack channel name.
	TeamChannel string `json:"teamChannel,omitempty"`
	// Slack channel URL.
	URL SecureValue `json:"url,omitempty"`
}

// AlertsUserNotificationChannel - User notification channel.
type AlertsUserNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// User channel specific configuration.
	Config AlertsUserNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsUserNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsUserNotificationChannelConfig - Configuration for user notification channel.
type AlertsUserNotificationChannelConfig struct {
	// User ID.
	UserID string `json:"userId"`
}

// AlertsVictorOpsNotificationChannel - VictorOps notification channel.
type AlertsVictorOpsNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// VictorOps channel specific configuration.
	Config AlertsVictorOpsNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsVictorOpsNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsVictorOpsNotificationChannelConfig - Configuration for VictorOps notification channel.
type AlertsVictorOpsNotificationChannelConfig struct {
	// Key.
	Key SecureValue `json:"key"`
	// Route key.
	RouteKey string `json:"routeKey"`
}

// AlertsVictorOpsNotificationChannelCreateInput - The input for creating a new VictorOps notification channel.
type AlertsVictorOpsNotificationChannelCreateInput struct {
	// Key.
	Key SecureValue `json:"key"`
	// Notification channel name.
	Name string `json:"name"`
	// Route key.
	RouteKey string `json:"routeKey"`
}

// AlertsVictorOpsNotificationChannelUpdateInput - The input for updating an existing VictorOps notification channel.
type AlertsVictorOpsNotificationChannelUpdateInput struct {
	// Key.
	Key SecureValue `json:"key,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
	// Route key.
	RouteKey string `json:"routeKey,omitempty"`
}

// AlertsWebhookBasicAuthInput - Webhook basic auth
type AlertsWebhookBasicAuthInput struct {
	// Password
	Password SecureValue `json:"password"`
	// Username
	Username string `json:"username"`
}

// AlertsWebhookBasicAuthMutationInput - Webhook basic auth
type AlertsWebhookBasicAuthMutationInput struct {
	// Password
	Password SecureValue `json:"password"`
	// Username
	Username string `json:"username"`
}

// AlertsWebhookCustomHeaderInput - Webhook header
type AlertsWebhookCustomHeaderInput struct {
	// Header name
	Name string `json:"name"`
	// Header value
	Value SecureValue `json:"value"`
}

// AlertsWebhookCustomHeaderMutationInput - Webhook header
type AlertsWebhookCustomHeaderMutationInput struct {
	// Header name
	Name string `json:"name"`
	// Header value
	Value SecureValue `json:"value"`
}

// AlertsWebhookNotificationChannel - Webhook notification channel.
type AlertsWebhookNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// Webhook channel specific configuration.
	Config AlertsWebhookNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsWebhookNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsWebhookNotificationChannelConfig - Configuration for Webhook notification channel.
type AlertsWebhookNotificationChannelConfig struct {
	// Base URL.
	BaseURL string `json:"baseUrl"`
	// Basic auth.
	BasicAuth AlertsWebhookBasicAuthInput `json:"basicAuth,omitempty"`
	// Custom HTTP headers.
	CustomHttpHeaders []AlertsWebhookCustomHeaderInput `json:"customHttpHeaders"`
	// Custom payload body.
	CustomPayloadBody string `json:"customPayloadBody,omitempty"`
	// Custom payload type.
	CustomPayloadType AlertsWebhookCustomPayloadType `json:"customPayloadType,omitempty"`
}

// AlertsWebhookNotificationChannelCreateInput - The input for creating a new Webhook notification channel.
type AlertsWebhookNotificationChannelCreateInput struct {
	// Base URL.
	BaseURL string `json:"baseUrl"`
	// Basic auth.
	BasicAuth AlertsWebhookBasicAuthMutationInput `json:"basicAuth,omitempty"`
	// Custom HTTP headers.
	CustomHttpHeaders []AlertsWebhookCustomHeaderMutationInput `json:"customHttpHeaders,omitempty"`
	// Custom payload body.
	CustomPayloadBody string `json:"customPayloadBody,omitempty"`
	// Custom payload type.
	CustomPayloadType AlertsWebhookCustomPayloadType `json:"customPayloadType,omitempty"`
	// Notification channel name.
	Name string `json:"name"`
}

// AlertsWebhookNotificationChannelUpdateInput - The input for updating an existing Webhook notification channel.
type AlertsWebhookNotificationChannelUpdateInput struct {
	// Base URL.
	BaseURL string `json:"baseUrl,omitempty"`
	// Basic auth.
	BasicAuth AlertsWebhookBasicAuthMutationInput `json:"basicAuth,omitempty"`
	// Custom HTTP headers.
	CustomHttpHeaders []AlertsWebhookCustomHeaderMutationInput `json:"customHttpHeaders,omitempty"`
	// Custom payload body.
	CustomPayloadBody string `json:"customPayloadBody,omitempty"`
	// Custom payload type.
	CustomPayloadType AlertsWebhookCustomPayloadType `json:"customPayloadType,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
}

// AlertsXMattersNotificationChannel - xMatters notification channel.
type AlertsXMattersNotificationChannel struct {
	// Policies associated with the channel.
	AssociatedPolicies AlertsNotificationChannelPoliciesResultSet `json:"associatedPolicies"`
	// xMatters channel specific configuration.
	Config AlertsXMattersNotificationChannelConfig `json:"config"`
	// Channel ID.
	ID string `json:"id"`
	// Channel name.
	Name string `json:"name"`
	// Channel type.
	Type AlertsNotificationChannelType `json:"type"`
}

func (x *AlertsXMattersNotificationChannel) ImplementsAlertsNotificationChannel() {}

// AlertsXMattersNotificationChannelConfig - Configuration for xMatters notification channel.
type AlertsXMattersNotificationChannelConfig struct {
	// Integration URL.
	IntegrationURL SecureValue `json:"integrationUrl"`
}

// AlertsXMattersNotificationChannelCreateInput - The input for creating a new xMatters notification channel.
type AlertsXMattersNotificationChannelCreateInput struct {
	// Integration URL.
	IntegrationURL SecureValue `json:"integrationUrl"`
	// Notification channel name.
	Name string `json:"name"`
}

// AlertsXMattersNotificationChannelUpdateInput - The input for updating an existing xMatters notification channel.
type AlertsXMattersNotificationChannelUpdateInput struct {
	// Integration URL.
	IntegrationURL SecureValue `json:"integrationUrl,omitempty"`
	// Notification channel name.
	Name string `json:"name,omitempty"`
}

// SecureValue - The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.
type SecureValue string

// AlertsNotificationChannel - A notification channel.
type AlertsNotificationChannelInterface interface {
	ImplementsAlertsNotificationChannel()
}

// UnmarshalAlertsNotificationChannelInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalAlertsNotificationChannelInterface(b []byte) (*AlertsNotificationChannelInterface, error) {
	var err error

	var rawMessageAlertsNotificationChannel map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageAlertsNotificationChannel)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageAlertsNotificationChannel) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageAlertsNotificationChannel["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "AlertsCampfireNotificationChannel":
			var interfaceType AlertsCampfireNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsEmailNotificationChannel":
			var interfaceType AlertsEmailNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsHipChatNotificationChannel":
			var interfaceType AlertsHipChatNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsOpsGenieNotificationChannel":
			var interfaceType AlertsOpsGenieNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsPagerDutyNotificationChannel":
			var interfaceType AlertsPagerDutyNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsSlackNotificationChannel":
			var interfaceType AlertsSlackNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsUserNotificationChannel":
			var interfaceType AlertsUserNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsVictorOpsNotificationChannel":
			var interfaceType AlertsVictorOpsNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsWebhookNotificationChannel":
			var interfaceType AlertsWebhookNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		case "AlertsXMattersNotificationChannel":
			var interfaceType AlertsXMattersNotificationChannel
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertsNotificationChannelInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageAlertsNotificationChannel {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface AlertsNotificationChannel did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface AlertsNotificationChannel was not matched against all PossibleTypes: %s", typeName)
}

// Code *NOT* generated by tutone
package nrdb

import (
	"encoding/json"
	"fmt"
)

// NRDBResultContainerMultiResultCustomized - A data structure that contains the results of the NRDB query along
// with other capabilities that enhance those results.
//
// Direct query results are available through `results`, `totalResult` and
// `otherResult`. The query you made is accessible through `nrql`, along with
// `metadata` about the query itself. Enhanced capabilities include
// `eventDefinitions`, `suggestedFacets` and more.
type NRDBResultContainerMultiResultCustomized struct {
	// In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
	CurrentResults []NRDBResult `json:"currentResults,omitempty"`
	// Generate a publicly sharable Embedded Chart URL for the NRQL query.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).
	EmbeddedChartURL string `json:"embeddedChartUrl,omitempty"`
	// Retrieve a list of event type definitions, providing descriptions
	// of the event types returned by this query, as well as details
	// of their attributes.
	EventDefinitions []EventDefinition `json:"eventDefinitions,omitempty"`
	// Metadata about the query and result.
	Metadata NRDBMetadata `json:"metadata,omitempty"`
	// The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.
	NRQL NRQL `json:"nrql,omitempty"`
	// In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_
	// contained in an individual `results` facet.
	// OtherResult can be either NRDBResult or []NRDBResult
	OtherResult interface{} `json:"otherResult,omitempty"`
	// In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
	PreviousResults []NRDBResult `json:"previousResults,omitempty"`
	// Metadata about the execution of an asynchronous NRQL query.
	QueryProgress NRDBQueryProgress `json:"queryProgress,omitempty"`
	// The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.
	RawResponse NRDBRawResults `json:"rawResponse,omitempty"`
	// The query results. This is a flat list of objects who's structure matches the query submitted.
	Results []NRDBResult `json:"results,omitempty"`
	// Generate a publicly sharable static chart URL for the NRQL query.
	StaticChartURL string `json:"staticChartUrl,omitempty"`
	// Retrieve a list of suggested NRQL facets for this NRDB query, to be used with
	// the `FACET` keyword in NRQL.
	//
	// Results are based on historical query behaviors.
	//
	// If the query already has a `FACET` clause, it will be ignored for the purposes
	// of suggesting facets.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).
	SuggestedFacets []NRQLFacetSuggestion `json:"suggestedFacets,omitempty"`
	// Suggested queries that could help explain an anomaly in your timeseries based on either statistical differences in the data or historical usage.
	//
	// If no `anomalyTimeWindow` is supplied, we will attempt to detect a spike in the NRQL results. If no spike is found, the suggested query results will be empty.
	//
	// Input NRQL must be a TIMESERIES query and must have exactly one result.
	SuggestedQueries SuggestedNRQLQueryResponse `json:"suggestedQueries,omitempty"`
	// In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,
	// whether or not they are contained in an individual `results` facet.
	// TotalResult can be either NRDBResult or []NRDBResult
	TotalResult interface{} `json:"totalResult,omitempty"`
}

func (n *NRDBResultContainerMultiResultCustomized) UnmarshalJSON(data []byte) error {
	type Alias NRDBResultContainerMultiResultCustomized
	aux := &struct {
		TotalResult json.RawMessage `json:"totalResult,omitempty"`
		OtherResult json.RawMessage `json:"otherResult,omitempty"`
		*Alias
	}{
		Alias: (*Alias)(n),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	// Attempt to unmarshal TotalResult as NRDBResult
	var singleTotalResult NRDBResult
	if err := json.Unmarshal(aux.TotalResult, &singleTotalResult); err == nil {
		n.TotalResult = singleTotalResult
	} else {
		// Attempt to unmarshal TotalResult as []NRDBResult
		var multipleTotalResults []NRDBResult
		if err := json.Unmarshal(aux.TotalResult, &multipleTotalResults); err == nil {
			n.TotalResult = multipleTotalResults
		} else {
			return fmt.Errorf("failed to unmarshal TotalResult as NRDBResult or []NRDBResult")
		}
	}

	// Attempt to unmarshal OtherResult as NRDBResult
	var singleOtherResult NRDBResult
	if err := json.Unmarshal(aux.OtherResult, &singleOtherResult); err == nil {
		n.OtherResult = singleOtherResult
	} else {
		// Attempt to unmarshal OtherResult as []NRDBResult
		var multipleOtherResults []NRDBResult
		if err := json.Unmarshal(aux.OtherResult, &multipleOtherResults); err == nil {
			n.OtherResult = multipleOtherResults
		} else {
			return fmt.Errorf("failed to unmarshal OtherResult as NRDBResult or []NRDBResult")
		}
	}

	return nil
}

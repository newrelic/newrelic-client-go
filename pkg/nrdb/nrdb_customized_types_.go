// Code *NOT* generated by tutone
package nrdb

import (
	"encoding/json"
	"fmt"
)

// NRDBResultContainerMultiResultCustomized is a specialized container for NRQL query results
// that handles the variable format of otherResult and totalResult fields.
//
// This container differs from NRDBResultContainer by using interface{} types for
// otherResult and totalResult, allowing them to be either a single object (NRDBResult)
// or an array of objects ([]NRDBResult), depending on the query structure.
//
// This is particularly useful for queries that combine FACET and TIMESERIES clauses,
// which can return these fields as arrays rather than single objects.
type NRDBResultContainerMultiResultCustomized struct {
	// In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
	CurrentResults []NRDBResult `json:"currentResults,omitempty"`
	// Generate a publicly sharable Embedded Chart URL for the NRQL query.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).
	EmbeddedChartURL string `json:"embeddedChartUrl,omitempty"`
	// Retrieve a list of event type definitions
	EventDefinitions []EventDefinition `json:"eventDefinitions,omitempty"`
	// Metadata about the query and result.
	Metadata NRDBMetadata `json:"metadata,omitempty"`
	// The NRQL query that was executed to yield these results.
	NRQL NRQL `json:"nrql,omitempty"`
	// OtherResult contains the aggregates representing the events _not_ contained in an individual `results` facet.
	//
	// IMPORTANT: Unlike the standard NRDBResultContainer, this field can be either:
	// - NRDBResult (a single map[string]interface{}): For standard queries or FACET-only/TIMESERIES-only queries
	// - []NRDBResult (an array of maps): For queries combining both FACET and TIMESERIES clauses
	//
	// Use type assertion to determine the actual type before using:
	//   if singleResult, ok := result.OtherResult.(NRDBResult); ok {
	//     // Handle single result
	//   } else if multipleResults, ok := result.OtherResult.([]NRDBResult); ok {
	//     // Handle multiple results
	//   }
	OtherResult interface{} `json:"otherResult,omitempty"`
	// In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
	PreviousResults []NRDBResult `json:"previousResults,omitempty"`
	// Metadata about the execution of an asynchronous NRQL query.
	QueryProgress NRDBQueryProgress `json:"queryProgress,omitempty"`
	// The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.
	RawResponse NRDBRawResults `json:"rawResponse,omitempty"`
	// The query results. This is a flat list of objects that match the query submitted.
	Results []NRDBResult `json:"results,omitempty"`
	// Generate a publicly sharable static chart URL for the NRQL query.
	StaticChartURL string `json:"staticChartUrl,omitempty"`
	// Retrieve a list of suggested NRQL facets for this NRDB query
	SuggestedFacets []NRQLFacetSuggestion `json:"suggestedFacets,omitempty"`
	// Suggested queries that could help explain an anomaly
	SuggestedQueries SuggestedNRQLQueryResponse `json:"suggestedQueries,omitempty"`
	// TotalResult contains the aggregates representing _all_ the events in the query results.
	//
	// IMPORTANT: Unlike the standard NRDBResultContainer, this field can be either:
	// - NRDBResult (a single map[string]interface{}): For standard queries or FACET-only/TIMESERIES-only queries
	// - []NRDBResult (an array of maps): For queries combining both FACET and TIMESERIES clauses
	//
	// Use type assertion to determine the actual type before using:
	//   if singleResult, ok := result.TotalResult.(NRDBResult); ok {
	//     // Handle single result
	//   } else if multipleResults, ok := result.TotalResult.([]NRDBResult); ok {
	//     // Handle multiple results
	//   }
	TotalResult interface{} `json:"totalResult,omitempty"`
}

// UnmarshalJSON implements custom JSON unmarshaling for NRDBResultContainerMultiResultCustomized.
// This method handles the complex case where otherResult and totalResult can be either
// a single object or an array of objects, depending on the query.
//
// For standard queries or those with only FACET or only TIMESERIES:
//   - otherResult and totalResult will be single NRDBResult objects
//
// For queries combining both FACET and TIMESERIES:
//   - otherResult and totalResult will be arrays of NRDBResult objects ([]NRDBResult)
func (n *NRDBResultContainerMultiResultCustomized) UnmarshalJSON(data []byte) error {
	type Alias NRDBResultContainerMultiResultCustomized
	aux := &struct {
		TotalResult json.RawMessage `json:"totalResult,omitempty"`
		OtherResult json.RawMessage `json:"otherResult,omitempty"`
		*Alias
	}{
		Alias: (*Alias)(n),
	}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	// Attempt to unmarshal TotalResult as NRDBResult
	var singleTotalResult NRDBResult
	if err := json.Unmarshal(aux.TotalResult, &singleTotalResult); err == nil {
		n.TotalResult = singleTotalResult
	} else {
		// Attempt to unmarshal TotalResult as []NRDBResult
		var multipleTotalResults []NRDBResult
		if err := json.Unmarshal(aux.TotalResult, &multipleTotalResults); err == nil {
			n.TotalResult = multipleTotalResults
		} else {
			return fmt.Errorf("failed to unmarshal TotalResult as NRDBResult or []NRDBResult")
		}
	}

	// Attempt to unmarshal OtherResult as NRDBResult
	var singleOtherResult NRDBResult
	if err := json.Unmarshal(aux.OtherResult, &singleOtherResult); err == nil {
		n.OtherResult = singleOtherResult
	} else {
		// Attempt to unmarshal OtherResult as []NRDBResult
		var multipleOtherResults []NRDBResult
		if err := json.Unmarshal(aux.OtherResult, &multipleOtherResults); err == nil {
			n.OtherResult = multipleOtherResults
		} else {
			return fmt.Errorf("failed to unmarshal OtherResult as NRDBResult or []NRDBResult")
		}
	}

	return nil
}

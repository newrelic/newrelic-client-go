// Code generated by tutone: DO NOT EDIT
package notifications

import "context"

// Create a Destination
func (a *Notifications) AiNotificationsCreateDestination(
	accountID int,
	destination AiNotificationsDestinationInput,
) (*AiNotificationsDestinationResponse, error) {
	return a.AiNotificationsCreateDestinationWithContext(context.Background(),
		accountID,
		destination,
	)
}

// Create a Destination
func (a *Notifications) AiNotificationsCreateDestinationWithContext(
	ctx context.Context,
	accountID int,
	destination AiNotificationsDestinationInput,
) (*AiNotificationsDestinationResponse, error) {

	resp := AiNotificationsCreateDestinationQueryResponse{}
	vars := map[string]interface{}{
		"accountId":   accountID,
		"destination": destination,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AiNotificationsCreateDestinationMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AiNotificationsDestinationResponse, nil
}

type AiNotificationsCreateDestinationQueryResponse struct {
	AiNotificationsDestinationResponse AiNotificationsDestinationResponse `json:"AiNotificationsCreateDestination"`
}

const AiNotificationsCreateDestinationMutation = `mutation(
	$accountId: Int!,
	$destination: AiNotificationsDestinationInput!,
) { aiNotificationsCreateDestination(
	accountId: $accountId,
	destination: $destination,
) {
	destination {
		accountId
		active
		auth {
			... on AiNotificationsBasicAuth {
			  authType
			  user
			}
			... on AiNotificationsOAuth2Auth {
			  accessTokenUrl
			  scope
			  refreshable
			  refreshInterval
			  prefix
			  clientId
			  authorizationUrl
			  authType
			}
			... on AiNotificationsTokenAuth {
			  authType
			  prefix
			}
		}
		createdAt
		id
		isUserAuthenticated
		lastSent
		name
		properties {
			displayValue
			key
			label
			value
		}
		status
		type
		updatedAt
		updatedBy
	}
    errors {
      ... on AiNotificationsConstraintsError {
        constraints {
          dependencies
          name
        }
      }
      ... on AiNotificationsDataValidationError {
        details
        fields {
          field
          message
        }
      }
      ... on AiNotificationsResponseError {
        description
        details
        type
      }
      ... on AiNotificationsSuggestionError {
        description
        type
        details
      }
    }
    error {
      ... on AiNotificationsSuggestionError {
        description
        type
        details
      }
      ... on AiNotificationsResponseError {
        description
        type
        details
      }
      ... on AiNotificationsDataValidationError {
        details
        fields {
          message
          field
        }
      }
      ... on AiNotificationsConstraintsError {
        constraints {
          name
          dependencies
        }
      }
    }
} }`

// Delete a Destination
func (a *Notifications) AiNotificationsDeleteDestination(
	accountID int,
	destinationId string,
) (*AiNotificationsDeleteResponse, error) {
	return a.AiNotificationsDeleteDestinationWithContext(context.Background(),
		accountID,
		destinationId,
	)
}

// Delete a Destination
func (a *Notifications) AiNotificationsDeleteDestinationWithContext(
	ctx context.Context,
	accountID int,
	destinationId string,
) (*AiNotificationsDeleteResponse, error) {

	resp := AiNotificationsDeleteDestinationQueryResponse{}
	vars := map[string]interface{}{
		"accountId":     accountID,
		"destinationId": destinationId,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AiNotificationsDeleteDestinationMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AiNotificationsDeleteResponse, nil
}

type AiNotificationsDeleteDestinationQueryResponse struct {
	AiNotificationsDeleteResponse AiNotificationsDeleteResponse `json:"AiNotificationsDeleteDestination"`
}

const AiNotificationsDeleteDestinationMutation = `mutation(
	$accountId: Int!,
	$destinationId: ID!,
) { aiNotificationsDeleteDestination(
	accountId: $accountId,
	destinationId: $destinationId,
) {
	error {
		description
		details
		type
	}
	errors {
		description
		details
		type
	}
	ids
} }`

// Update a Destination
func (a *Notifications) AiNotificationsUpdateDestination(
	accountID int,
	destination AiNotificationsDestinationUpdate,
	destinationId string,
) (*AiNotificationsDestinationResponse, error) {
	return a.AiNotificationsUpdateDestinationWithContext(context.Background(),
		accountID,
		destination,
		destinationId,
	)
}

// Update a Destination
func (a *Notifications) AiNotificationsUpdateDestinationWithContext(
	ctx context.Context,
	accountID int,
	destination AiNotificationsDestinationUpdate,
	destinationId string,
) (*AiNotificationsDestinationResponse, error) {

	resp := AiNotificationsUpdateDestinationQueryResponse{}
	vars := map[string]interface{}{
		"accountId":     accountID,
		"destination":   destination,
		"destinationId": destinationId,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, AiNotificationsUpdateDestinationMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.AiNotificationsDestinationResponse, nil
}

type AiNotificationsUpdateDestinationQueryResponse struct {
	AiNotificationsDestinationResponse AiNotificationsDestinationResponse `json:"AiNotificationsUpdateDestination"`
}

const AiNotificationsUpdateDestinationMutation = `mutation(
	$accountId: Int!,
	$destination: AiNotificationsDestinationUpdate!,
	$destinationId: ID!,
) { aiNotificationsUpdateDestination(
	accountId: $accountId,
	destination: $destination,
	destinationId: $destinationId,
) {
	destination {
		accountId
		active
		auth {
			... on AiNotificationsBasicAuth {
			  authType
			  user
			}
			... on AiNotificationsOAuth2Auth {
			  accessTokenUrl
			  scope
			  refreshable
			  refreshInterval
			  prefix
			  clientId
			  authorizationUrl
			  authType
			}
			... on AiNotificationsTokenAuth {
			  authType
			  prefix
			}
		}
		createdAt
		id
		isUserAuthenticated
		lastSent
		name
		properties {
			displayValue
			key
			label
			value
		}
		status
		type
		updatedAt
		updatedBy
	}
    errors {
      ... on AiNotificationsConstraintsError {
        constraints {
          dependencies
          name
        }
      }
      ... on AiNotificationsDataValidationError {
        details
        fields {
          field
          message
        }
      }
      ... on AiNotificationsResponseError {
        description
        details
        type
      }
      ... on AiNotificationsSuggestionError {
        description
        type
        details
      }
    }
    error {
      ... on AiNotificationsSuggestionError {
        description
        type
        details
      }
      ... on AiNotificationsResponseError {
        description
        type
        details
      }
      ... on AiNotificationsDataValidationError {
        details
        fields {
          message
          field
        }
      }
      ... on AiNotificationsConstraintsError {
        constraints {
          name
          dependencies
        }
      }
    }
} }`

// Fetch a Destinations by type
func (a *Notifications) GetDestinations(
	accountID int,
	cursor string,
	filters AiNotificationsDestinationFilter,
	sorter AiNotificationsDestinationSorter,
) (*AiNotificationsDestinationsResponse, error) {
	return a.GetDestinationsWithContext(context.Background(),
		accountID,
		cursor,
		filters,
		sorter,
	)
}

// Fetch a Destinations by type
func (a *Notifications) GetDestinationsWithContext(
	ctx context.Context,
	accountID int,
	cursor string,
	filters AiNotificationsDestinationFilter,
	sorter AiNotificationsDestinationSorter,
) (*AiNotificationsDestinationsResponse, error) {

	resp := destinationsResponse{}
	vars := map[string]interface{}{
		"accountID": accountID,
		"cursor":    cursor,
		"filters":   filters,
		"sorter":    sorter,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getDestinationsQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.Actor.Account.AiNotifications.Destinations, nil
}

const getDestinationsQuery = `query(
	$accountID: Int!,
) { actor { account(id: $accountID) { aiNotifications { destinations {
	entities {
		accountId
		active
		auth {
			... on AiNotificationsBasicAuth {
			  authType
			  user
			}
			... on AiNotificationsOAuth2Auth {
			  accessTokenUrl
			  scope
			  refreshable
			  refreshInterval
			  prefix
			  clientId
			  authorizationUrl
			  authType
			}
			... on AiNotificationsTokenAuth {
			  authType
			  prefix
			}
		}
		createdAt
		id
		isUserAuthenticated
		lastSent
		name
		properties {
			displayValue
			key
			label
			value
		}
		status
		type
		updatedAt
		updatedBy
	}
	error {
		description
		details
		type
	}
	errors {
		description
		details
		type
	}
	nextCursor
	totalCount
} } } } }`

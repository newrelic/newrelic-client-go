// Code generated by tutone: DO NOT EDIT
package eventstometrics

import "context"

// Create a new rule which will make metrics from event data.
func (a *Eventstometrics) EventsToMetricsCreateRule(
	rules []EventsToMetricsCreateRuleInput,
) (*EventsToMetricsCreateRuleResult, error) {
	return a.EventsToMetricsCreateRuleWithContext(context.Background(),
		rules,
	)
}

// Create a new rule which will make metrics from event data.
func (a *Eventstometrics) EventsToMetricsCreateRuleWithContext(
	ctx context.Context,
	rules []EventsToMetricsCreateRuleInput,
) (*EventsToMetricsCreateRuleResult, error) {

	resp := EventsToMetricsCreateRuleQueryResponse{}
	vars := map[string]interface{}{
		"rules": rules,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EventsToMetricsCreateRuleMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EventsToMetricsCreateRuleResult, nil
}

type EventsToMetricsCreateRuleQueryResponse struct {
	EventsToMetricsCreateRuleResult EventsToMetricsCreateRuleResult `json:"EventsToMetricsCreateRule"`
}

const EventsToMetricsCreateRuleMutation = `mutation(
	$rules: [EventsToMetricsCreateRuleInput]!,
) { eventsToMetricsCreateRule(
	rules: $rules,
) {
	failures {
		errors {
			description
			reason
		}
		submitted {
			accountId
			description
			name
			nrql
		}
	}
	successes {
		accountId
		createdAt
		description
		enabled
		id
		name
		nrql
		updatedAt
	}
} }`

// Delete an event-to-metric rule.
func (a *Eventstometrics) EventsToMetricsDeleteRule(
	deletes []EventsToMetricsDeleteRuleInput,
) (*EventsToMetricsDeleteRuleResult, error) {
	return a.EventsToMetricsDeleteRuleWithContext(context.Background(),
		deletes,
	)
}

// Delete an event-to-metric rule.
func (a *Eventstometrics) EventsToMetricsDeleteRuleWithContext(
	ctx context.Context,
	deletes []EventsToMetricsDeleteRuleInput,
) (*EventsToMetricsDeleteRuleResult, error) {

	resp := EventsToMetricsDeleteRuleQueryResponse{}
	vars := map[string]interface{}{
		"deletes": deletes,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EventsToMetricsDeleteRuleMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EventsToMetricsDeleteRuleResult, nil
}

type EventsToMetricsDeleteRuleQueryResponse struct {
	EventsToMetricsDeleteRuleResult EventsToMetricsDeleteRuleResult `json:"EventsToMetricsDeleteRule"`
}

const EventsToMetricsDeleteRuleMutation = `mutation(
	$deletes: [EventsToMetricsDeleteRuleInput]!,
) { eventsToMetricsDeleteRule(
	deletes: $deletes,
) {
	failures {
		errors {
			description
			reason
		}
		submitted {
			accountId
			ruleId
		}
	}
	successes {
		accountId
		createdAt
		description
		enabled
		id
		name
		nrql
		updatedAt
	}
} }`

// Enable or disable an event-to-metric rule.
func (a *Eventstometrics) EventsToMetricsUpdateRule(
	updates []EventsToMetricsUpdateRuleInput,
) (*EventsToMetricsUpdateRuleResult, error) {
	return a.EventsToMetricsUpdateRuleWithContext(context.Background(),
		updates,
	)
}

// Enable or disable an event-to-metric rule.
func (a *Eventstometrics) EventsToMetricsUpdateRuleWithContext(
	ctx context.Context,
	updates []EventsToMetricsUpdateRuleInput,
) (*EventsToMetricsUpdateRuleResult, error) {

	resp := EventsToMetricsUpdateRuleQueryResponse{}
	vars := map[string]interface{}{
		"updates": updates,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EventsToMetricsUpdateRuleMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EventsToMetricsUpdateRuleResult, nil
}

type EventsToMetricsUpdateRuleQueryResponse struct {
	EventsToMetricsUpdateRuleResult EventsToMetricsUpdateRuleResult `json:"EventsToMetricsUpdateRule"`
}

const EventsToMetricsUpdateRuleMutation = `mutation(
	$updates: [EventsToMetricsUpdateRuleInput]!,
) { eventsToMetricsUpdateRule(
	updates: $updates,
) {
	failures {
		errors {
			description
			reason
		}
		submitted {
			accountId
			enabled
			ruleId
		}
	}
	successes {
		accountId
		createdAt
		description
		enabled
		id
		name
		nrql
		updatedAt
	}
} }`

// List rules for your account by id.
func (a *Eventstometrics) GetRulesById(
	accountID int,
	ruleIds []string,
) (*EventsToMetricsListRuleResult, error) {
	return a.GetRulesByIdWithContext(context.Background(),
		accountID,
		ruleIds,
	)
}

// List rules for your account by id.
func (a *Eventstometrics) GetRulesByIdWithContext(
	ctx context.Context,
	accountID int,
	ruleIds []string,
) (*EventsToMetricsListRuleResult, error) {

	resp := rulesByIdResponse{}
	vars := map[string]interface{}{
		"accountID": accountID,
		"ruleIds":   ruleIds,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getRulesByIdQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.Actor.Account.EventsToMetrics.RulesById, nil
}

const getRulesByIdQuery = `query(
	$accountID: Int!,
	$ruleIds: [ID]!,
) { actor { account(id: $accountID) { eventsToMetrics { rulesById(
	ruleIds: $ruleIds,
) {
	rules {
		accountId
		createdAt
		description
		enabled
		id
		name
		nrql
		updatedAt
	}
} } } } }`

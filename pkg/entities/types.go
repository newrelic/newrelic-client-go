// Code generated by tutone: DO NOT EDIT
package entities

import (
	"encoding/json"
	"fmt"

	"github.com/newrelic/newrelic-client-go/pkg/accounts"
	"github.com/newrelic/newrelic-client-go/pkg/nrdb"
	"github.com/newrelic/newrelic-client-go/pkg/nrtime"
)

// BrowserAgentInstallType - Browser agent install types.
type BrowserAgentInstallType string

var BrowserAgentInstallTypeTypes = struct {
	// Lite agent install type.
	LITE BrowserAgentInstallType
	// Pro agent install type.
	PRO BrowserAgentInstallType
	// Pro + SPA agent install type.
	PRO_SPA BrowserAgentInstallType
}{
	// Lite agent install type.
	LITE: "LITE",
	// Pro agent install type.
	PRO: "PRO",
	// Pro + SPA agent install type.
	PRO_SPA: "PRO_SPA",
}

// DashboardAlertSeverity - Alert severity.
type DashboardAlertSeverity string

var DashboardAlertSeverityTypes = struct {
	// CRITICAL
	CRITICAL DashboardAlertSeverity
	// NOT_ALERTING
	NOT_ALERTING DashboardAlertSeverity
	// WARNING
	WARNING DashboardAlertSeverity
}{
	// CRITICAL
	CRITICAL: "CRITICAL",
	// NOT_ALERTING
	NOT_ALERTING: "NOT_ALERTING",
	// WARNING
	WARNING: "WARNING",
}

// DashboardPermissions - Permission that represent visibility & editability
type DashboardPermissions string

var DashboardPermissionsTypes = struct {
	// Private
	PRIVATE DashboardPermissions
	// Public read only
	PUBLIC_READ_ONLY DashboardPermissions
	// Public read & write
	PUBLIC_READ_WRITE DashboardPermissions
}{
	// Private
	PRIVATE: "PRIVATE",
	// Public read only
	PUBLIC_READ_ONLY: "PUBLIC_READ_ONLY",
	// Public read & write
	PUBLIC_READ_WRITE: "PUBLIC_READ_WRITE",
}

// EntityAlertSeverity -
type EntityAlertSeverity string

var EntityAlertSeverityTypes = struct {
	// Critical violation in progress
	CRITICAL EntityAlertSeverity
	// Not alerting
	NOT_ALERTING EntityAlertSeverity
	// No alert conditions set up
	NOT_CONFIGURED EntityAlertSeverity
	// Warning violation in progress
	WARNING EntityAlertSeverity
}{
	// Critical violation in progress
	CRITICAL: "CRITICAL",
	// Not alerting
	NOT_ALERTING: "NOT_ALERTING",
	// No alert conditions set up
	NOT_CONFIGURED: "NOT_CONFIGURED",
	// Warning violation in progress
	WARNING: "WARNING",
}

// EntityCollectionType - Indicates where this collection is used
type EntityCollectionType string

var EntityCollectionTypeTypes = struct {
	// Collections that define the entities that belong to a workload
	WORKLOAD EntityCollectionType
	// Collections that define the entity groups that are used to calculate the status of a workload
	WORKLOAD_STATUS_RULE_GROUP EntityCollectionType
}{
	// Collections that define the entities that belong to a workload
	WORKLOAD: "WORKLOAD",
	// Collections that define the entity groups that are used to calculate the status of a workload
	WORKLOAD_STATUS_RULE_GROUP: "WORKLOAD_STATUS_RULE_GROUP",
}

// EntityInfrastructureIntegrationType - The type of Infrastructure Integration
type EntityInfrastructureIntegrationType string

var EntityInfrastructureIntegrationTypeTypes = struct {
	// APACHE_SERVER integration
	APACHE_SERVER EntityInfrastructureIntegrationType
	// AWSELASTICSEARCHNODE integration
	AWSELASTICSEARCHNODE EntityInfrastructureIntegrationType
	// AWS_ALB integration
	AWS_ALB EntityInfrastructureIntegrationType
	// AWS_ALB_LISTENER integration
	AWS_ALB_LISTENER EntityInfrastructureIntegrationType
	// AWS_ALB_LISTENER_RULE integration
	AWS_ALB_LISTENER_RULE EntityInfrastructureIntegrationType
	// AWS_ALB_TARGET_GROUP integration
	AWS_ALB_TARGET_GROUP EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_API integration
	AWS_API_GATEWAY_API EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_RESOURCE integration
	AWS_API_GATEWAY_RESOURCE EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration
	AWS_API_GATEWAY_RESOURCE_WITH_METRICS EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_STAGE integration
	AWS_API_GATEWAY_STAGE EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_GROUP integration
	AWS_AUTO_SCALING_GROUP EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_INSTANCE integration
	AWS_AUTO_SCALING_INSTANCE EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration
	AWS_AUTO_SCALING_LAUNCH_CONFIGURATION EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_POLICY integration
	AWS_AUTO_SCALING_POLICY EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_REGION_LIMIT integration
	AWS_AUTO_SCALING_REGION_LIMIT EntityInfrastructureIntegrationType
	// AWS_BILLING_ACCOUNT_COST integration
	AWS_BILLING_ACCOUNT_COST EntityInfrastructureIntegrationType
	// AWS_BILLING_ACCOUNT_SERVICE_COST integration
	AWS_BILLING_ACCOUNT_SERVICE_COST EntityInfrastructureIntegrationType
	// AWS_BILLING_BUDGET integration
	AWS_BILLING_BUDGET EntityInfrastructureIntegrationType
	// AWS_BILLING_SERVICE_COST integration
	AWS_BILLING_SERVICE_COST EntityInfrastructureIntegrationType
	// AWS_CLOUD_FRONT_DISTRIBUTION integration
	AWS_CLOUD_FRONT_DISTRIBUTION EntityInfrastructureIntegrationType
	// AWS_CLOUD_TRAIL integration
	AWS_CLOUD_TRAIL EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration
	AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_REGION integration
	AWS_DYNAMO_DB_REGION EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_TABLE integration
	AWS_DYNAMO_DB_TABLE EntityInfrastructureIntegrationType
	// AWS_EBS_VOLUME integration
	AWS_EBS_VOLUME EntityInfrastructureIntegrationType
	// AWS_ECS_CLUSTER integration
	AWS_ECS_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ECS_SERVICE integration
	AWS_ECS_SERVICE EntityInfrastructureIntegrationType
	// AWS_EFS_FILE_SYSTEM integration
	AWS_EFS_FILE_SYSTEM EntityInfrastructureIntegrationType
	// AWS_ELASTICSEARCH_CLUSTER integration
	AWS_ELASTICSEARCH_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTICSEARCH_INSTANCE integration
	AWS_ELASTICSEARCH_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration
	AWS_ELASTIC_BEANSTALK_ENVIRONMENT EntityInfrastructureIntegrationType
	// AWS_ELASTIC_BEANSTALK_INSTANCE integration
	AWS_ELASTIC_BEANSTALK_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_CLUSTER integration
	AWS_ELASTIC_MAP_REDUCE_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration
	AWS_ELASTI_CACHE_MEMCACHED_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_MEMCACHED_NODE integration
	AWS_ELASTI_CACHE_MEMCACHED_NODE EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_REDIS_CLUSTER integration
	AWS_ELASTI_CACHE_REDIS_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_REDIS_NODE integration
	AWS_ELASTI_CACHE_REDIS_NODE EntityInfrastructureIntegrationType
	// AWS_ELB integration
	AWS_ELB EntityInfrastructureIntegrationType
	// AWS_HEALTH_ISSUE integration
	AWS_HEALTH_ISSUE EntityInfrastructureIntegrationType
	// AWS_HEALTH_NOTIFICATION integration
	AWS_HEALTH_NOTIFICATION EntityInfrastructureIntegrationType
	// AWS_HEALTH_SCHEDULED_CHANGE integration
	AWS_HEALTH_SCHEDULED_CHANGE EntityInfrastructureIntegrationType
	// AWS_HEALTH_UNKNOWN integration
	AWS_HEALTH_UNKNOWN EntityInfrastructureIntegrationType
	// AWS_IAM integration
	AWS_IAM EntityInfrastructureIntegrationType
	// AWS_IAM_GROUP integration
	AWS_IAM_GROUP EntityInfrastructureIntegrationType
	// AWS_IAM_OPEN_ID_PROVIDER integration
	AWS_IAM_OPEN_ID_PROVIDER EntityInfrastructureIntegrationType
	// AWS_IAM_POLICY integration
	AWS_IAM_POLICY EntityInfrastructureIntegrationType
	// AWS_IAM_ROLE integration
	AWS_IAM_ROLE EntityInfrastructureIntegrationType
	// AWS_IAM_SAML_PROVIDER integration
	AWS_IAM_SAML_PROVIDER EntityInfrastructureIntegrationType
	// AWS_IAM_SERVER_CERTIFICATE integration
	AWS_IAM_SERVER_CERTIFICATE EntityInfrastructureIntegrationType
	// AWS_IAM_USER integration
	AWS_IAM_USER EntityInfrastructureIntegrationType
	// AWS_IAM_VIRTUAL_MFA_DEVICE integration
	AWS_IAM_VIRTUAL_MFA_DEVICE EntityInfrastructureIntegrationType
	// AWS_IOT_BROKER integration
	AWS_IOT_BROKER EntityInfrastructureIntegrationType
	// AWS_IOT_RULE integration
	AWS_IOT_RULE EntityInfrastructureIntegrationType
	// AWS_IOT_RULE_ACTION integration
	AWS_IOT_RULE_ACTION EntityInfrastructureIntegrationType
	// AWS_KINESIS_DELIVERY_STREAM integration
	AWS_KINESIS_DELIVERY_STREAM EntityInfrastructureIntegrationType
	// AWS_KINESIS_STREAM integration
	AWS_KINESIS_STREAM EntityInfrastructureIntegrationType
	// AWS_KINESIS_STREAM_SHARD integration
	AWS_KINESIS_STREAM_SHARD EntityInfrastructureIntegrationType
	// AWS_LAMBDA_AGENT_TRANSACTION integration
	AWS_LAMBDA_AGENT_TRANSACTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration
	AWS_LAMBDA_AGENT_TRANSACTION_ERROR EntityInfrastructureIntegrationType
	// AWS_LAMBDA_EDGE_FUNCTION integration
	AWS_LAMBDA_EDGE_FUNCTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_EVENT_SOURCE_MAPPING integration
	AWS_LAMBDA_EVENT_SOURCE_MAPPING EntityInfrastructureIntegrationType
	// AWS_LAMBDA_FUNCTION integration
	AWS_LAMBDA_FUNCTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_FUNCTION_ALIAS integration
	AWS_LAMBDA_FUNCTION_ALIAS EntityInfrastructureIntegrationType
	// AWS_LAMBDA_OPERATION integration
	AWS_LAMBDA_OPERATION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_REGION integration
	AWS_LAMBDA_REGION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_SPAN integration
	AWS_LAMBDA_SPAN EntityInfrastructureIntegrationType
	// AWS_LAMBDA_TRACE integration
	AWS_LAMBDA_TRACE EntityInfrastructureIntegrationType
	// AWS_RDS_DB_CLUSTER integration
	AWS_RDS_DB_CLUSTER EntityInfrastructureIntegrationType
	// AWS_RDS_DB_INSTANCE integration
	AWS_RDS_DB_INSTANCE EntityInfrastructureIntegrationType
	// AWS_REDSHIFT_CLUSTER integration
	AWS_REDSHIFT_CLUSTER EntityInfrastructureIntegrationType
	// AWS_REDSHIFT_NODE integration
	AWS_REDSHIFT_NODE EntityInfrastructureIntegrationType
	// AWS_ROUTE53_HEALTH_CHECK integration
	AWS_ROUTE53_HEALTH_CHECK EntityInfrastructureIntegrationType
	// AWS_ROUTE53_ZONE integration
	AWS_ROUTE53_ZONE EntityInfrastructureIntegrationType
	// AWS_ROUTE53_ZONE_RECORD_SET integration
	AWS_ROUTE53_ZONE_RECORD_SET EntityInfrastructureIntegrationType
	// AWS_S3_BUCKET integration
	AWS_S3_BUCKET EntityInfrastructureIntegrationType
	// AWS_S3_BUCKET_REQUESTS integration
	AWS_S3_BUCKET_REQUESTS EntityInfrastructureIntegrationType
	// AWS_SES_CONFIGURATION_SET integration
	AWS_SES_CONFIGURATION_SET EntityInfrastructureIntegrationType
	// AWS_SES_EVENT_DESTINATION integration
	AWS_SES_EVENT_DESTINATION EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_FILTER integration
	AWS_SES_RECEIPT_FILTER EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_RULE integration
	AWS_SES_RECEIPT_RULE EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_RULE_SET integration
	AWS_SES_RECEIPT_RULE_SET EntityInfrastructureIntegrationType
	// AWS_SES_REGION integration
	AWS_SES_REGION EntityInfrastructureIntegrationType
	// AWS_SNS_SUBSCRIPTION integration
	AWS_SNS_SUBSCRIPTION EntityInfrastructureIntegrationType
	// AWS_SNS_TOPIC integration
	AWS_SNS_TOPIC EntityInfrastructureIntegrationType
	// AWS_SQS_QUEUE integration
	AWS_SQS_QUEUE EntityInfrastructureIntegrationType
	// AWS_VPC integration
	AWS_VPC EntityInfrastructureIntegrationType
	// AWS_VPC_ENDPOINT integration
	AWS_VPC_ENDPOINT EntityInfrastructureIntegrationType
	// AWS_VPC_INTERNET_GATEWAY integration
	AWS_VPC_INTERNET_GATEWAY EntityInfrastructureIntegrationType
	// AWS_VPC_NAT_GATEWAY integration
	AWS_VPC_NAT_GATEWAY EntityInfrastructureIntegrationType
	// AWS_VPC_NETWORK_ACL integration
	AWS_VPC_NETWORK_ACL EntityInfrastructureIntegrationType
	// AWS_VPC_NETWORK_INTERFACE integration
	AWS_VPC_NETWORK_INTERFACE EntityInfrastructureIntegrationType
	// AWS_VPC_PEERING_CONNECTION integration
	AWS_VPC_PEERING_CONNECTION EntityInfrastructureIntegrationType
	// AWS_VPC_ROUTE_TABLE integration
	AWS_VPC_ROUTE_TABLE EntityInfrastructureIntegrationType
	// AWS_VPC_SECURITY_GROUP integration
	AWS_VPC_SECURITY_GROUP EntityInfrastructureIntegrationType
	// AWS_VPC_SUBNET integration
	AWS_VPC_SUBNET EntityInfrastructureIntegrationType
	// AWS_VPC_VPN_CONNECTION integration
	AWS_VPC_VPN_CONNECTION EntityInfrastructureIntegrationType
	// AWS_VPC_VPN_TUNNEL integration
	AWS_VPC_VPN_TUNNEL EntityInfrastructureIntegrationType
	// AZURE_APP_SERVICE_HOST_NAME integration
	AZURE_APP_SERVICE_HOST_NAME EntityInfrastructureIntegrationType
	// AZURE_APP_SERVICE_WEB_APP integration
	AZURE_APP_SERVICE_WEB_APP EntityInfrastructureIntegrationType
	// AZURE_COSMOS_DB_ACCOUNT integration
	AZURE_COSMOS_DB_ACCOUNT EntityInfrastructureIntegrationType
	// AZURE_FUNCTIONS_APP integration
	AZURE_FUNCTIONS_APP EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER integration
	AZURE_LOAD_BALANCER EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_BACKEND integration
	AZURE_LOAD_BALANCER_BACKEND EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_FRONTEND_IP integration
	AZURE_LOAD_BALANCER_FRONTEND_IP EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_POOL EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_RULE EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_PROBE integration
	AZURE_LOAD_BALANCER_PROBE EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_RULE integration
	AZURE_LOAD_BALANCER_RULE EntityInfrastructureIntegrationType
	// AZURE_MARIADB_SERVER integration
	AZURE_MARIADB_SERVER EntityInfrastructureIntegrationType
	// AZURE_MYSQL_SERVER integration
	AZURE_MYSQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_POSTGRESQL_SERVER integration
	AZURE_POSTGRESQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_REDIS_CACHE integration
	AZURE_REDIS_CACHE EntityInfrastructureIntegrationType
	// AZURE_REDIS_CACHE_SHARD integration
	AZURE_REDIS_CACHE_SHARD EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_NAMESPACE integration
	AZURE_SERVICE_BUS_NAMESPACE EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_QUEUE integration
	AZURE_SERVICE_BUS_QUEUE EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_SUBSCRIPTION integration
	AZURE_SERVICE_BUS_SUBSCRIPTION EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_TOPIC integration
	AZURE_SERVICE_BUS_TOPIC EntityInfrastructureIntegrationType
	// AZURE_SQL_DATABASE integration
	AZURE_SQL_DATABASE EntityInfrastructureIntegrationType
	// AZURE_SQL_ELASTIC_POOL integration
	AZURE_SQL_ELASTIC_POOL EntityInfrastructureIntegrationType
	// AZURE_SQL_FIREWALL integration
	AZURE_SQL_FIREWALL EntityInfrastructureIntegrationType
	// AZURE_SQL_REPLICATION_LINK integration
	AZURE_SQL_REPLICATION_LINK EntityInfrastructureIntegrationType
	// AZURE_SQL_RESTORE_POINT integration
	AZURE_SQL_RESTORE_POINT EntityInfrastructureIntegrationType
	// AZURE_SQL_SERVER integration
	AZURE_SQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_STORAGE_ACCOUNT integration
	AZURE_STORAGE_ACCOUNT EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS integration
	AZURE_VIRTUAL_NETWORKS EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration
	AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration
	AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_PEERING integration
	AZURE_VIRTUAL_NETWORKS_PEERING EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration
	AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_ROUTE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_RULE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SUBNET integration
	AZURE_VIRTUAL_NETWORKS_SUBNET EntityInfrastructureIntegrationType
	// CASSANDRA_NODE integration
	CASSANDRA_NODE EntityInfrastructureIntegrationType
	// CONSUL_AGENT integration
	CONSUL_AGENT EntityInfrastructureIntegrationType
	// COUCHBASE_BUCKET integration
	COUCHBASE_BUCKET EntityInfrastructureIntegrationType
	// COUCHBASE_CLUSTER integration
	COUCHBASE_CLUSTER EntityInfrastructureIntegrationType
	// COUCHBASE_NODE integration
	COUCHBASE_NODE EntityInfrastructureIntegrationType
	// COUCHBASE_QUERY_ENGINE integration
	COUCHBASE_QUERY_ENGINE EntityInfrastructureIntegrationType
	// ELASTICSEARCH_NODE integration
	ELASTICSEARCH_NODE EntityInfrastructureIntegrationType
	// F5_NODE integration
	F5_NODE EntityInfrastructureIntegrationType
	// F5_POOL integration
	F5_POOL EntityInfrastructureIntegrationType
	// F5_POOL_MEMBER integration
	F5_POOL_MEMBER EntityInfrastructureIntegrationType
	// F5_SYSTEM integration
	F5_SYSTEM EntityInfrastructureIntegrationType
	// F5_VIRTUAL_SERVER integration
	F5_VIRTUAL_SERVER EntityInfrastructureIntegrationType
	// GCP_APP_ENGINE_SERVICE integration
	GCP_APP_ENGINE_SERVICE EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_DATA_SET integration
	GCP_BIG_QUERY_DATA_SET EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_PROJECT integration
	GCP_BIG_QUERY_PROJECT EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_TABLE integration
	GCP_BIG_QUERY_TABLE EntityInfrastructureIntegrationType
	// GCP_CLOUD_FUNCTION integration
	GCP_CLOUD_FUNCTION EntityInfrastructureIntegrationType
	// GCP_CLOUD_SQL integration
	GCP_CLOUD_SQL EntityInfrastructureIntegrationType
	// GCP_CLOUD_TASKS_QUEUE integration
	GCP_CLOUD_TASKS_QUEUE EntityInfrastructureIntegrationType
	// GCP_HTTP_LOAD_BALANCER integration
	GCP_HTTP_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_INTERNAL_LOAD_BALANCER integration
	GCP_INTERNAL_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_CONTAINER integration
	GCP_KUBERNETES_CONTAINER EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_NODE integration
	GCP_KUBERNETES_NODE EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_POD integration
	GCP_KUBERNETES_POD EntityInfrastructureIntegrationType
	// GCP_PUB_SUB_SUBSCRIPTION integration
	GCP_PUB_SUB_SUBSCRIPTION EntityInfrastructureIntegrationType
	// GCP_PUB_SUB_TOPIC integration
	GCP_PUB_SUB_TOPIC EntityInfrastructureIntegrationType
	// GCP_SPANNER_DATABASE integration
	GCP_SPANNER_DATABASE EntityInfrastructureIntegrationType
	// GCP_SPANNER_INSTANCE integration
	GCP_SPANNER_INSTANCE EntityInfrastructureIntegrationType
	// GCP_STORAGE_BUCKET integration
	GCP_STORAGE_BUCKET EntityInfrastructureIntegrationType
	// GCP_TCP_SSL_PROXY_LOAD_BALANCER integration
	GCP_TCP_SSL_PROXY_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_VIRTUAL_MACHINE_DISK integration
	GCP_VIRTUAL_MACHINE_DISK EntityInfrastructureIntegrationType
	// KAFKA_BROKER integration
	KAFKA_BROKER EntityInfrastructureIntegrationType
	// KAFKA_TOPIC integration
	KAFKA_TOPIC EntityInfrastructureIntegrationType
	// KUBERNETES_CLUSTER integration
	KUBERNETES_CLUSTER EntityInfrastructureIntegrationType
	// MEMCACHED_INSTANCE integration
	MEMCACHED_INSTANCE EntityInfrastructureIntegrationType
	// MSSQL_INSTANCE integration
	MSSQL_INSTANCE EntityInfrastructureIntegrationType
	// MYSQL_NODE integration
	MYSQL_NODE EntityInfrastructureIntegrationType
	// NA integration
	NA EntityInfrastructureIntegrationType
	// NGINX_SERVER integration
	NGINX_SERVER EntityInfrastructureIntegrationType
	// ORACLE_DB_INSTANCE integration
	ORACLE_DB_INSTANCE EntityInfrastructureIntegrationType
	// POSTGRE_SQL_INSTANCE integration
	POSTGRE_SQL_INSTANCE EntityInfrastructureIntegrationType
	// RABBIT_MQ_CLUSTER integration
	RABBIT_MQ_CLUSTER EntityInfrastructureIntegrationType
	// RABBIT_MQ_EXCHANGE integration
	RABBIT_MQ_EXCHANGE EntityInfrastructureIntegrationType
	// RABBIT_MQ_NODE integration
	RABBIT_MQ_NODE EntityInfrastructureIntegrationType
	// RABBIT_MQ_QUEUE integration
	RABBIT_MQ_QUEUE EntityInfrastructureIntegrationType
	// REDIS_INSTANCE integration
	REDIS_INSTANCE EntityInfrastructureIntegrationType
	// VARNISH_INSTANCE integration
	VARNISH_INSTANCE EntityInfrastructureIntegrationType
}{
	// APACHE_SERVER integration
	APACHE_SERVER: "APACHE_SERVER",
	// AWSELASTICSEARCHNODE integration
	AWSELASTICSEARCHNODE: "AWSELASTICSEARCHNODE",
	// AWS_ALB integration
	AWS_ALB: "AWS_ALB",
	// AWS_ALB_LISTENER integration
	AWS_ALB_LISTENER: "AWS_ALB_LISTENER",
	// AWS_ALB_LISTENER_RULE integration
	AWS_ALB_LISTENER_RULE: "AWS_ALB_LISTENER_RULE",
	// AWS_ALB_TARGET_GROUP integration
	AWS_ALB_TARGET_GROUP: "AWS_ALB_TARGET_GROUP",
	// AWS_API_GATEWAY_API integration
	AWS_API_GATEWAY_API: "AWS_API_GATEWAY_API",
	// AWS_API_GATEWAY_RESOURCE integration
	AWS_API_GATEWAY_RESOURCE: "AWS_API_GATEWAY_RESOURCE",
	// AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration
	AWS_API_GATEWAY_RESOURCE_WITH_METRICS: "AWS_API_GATEWAY_RESOURCE_WITH_METRICS",
	// AWS_API_GATEWAY_STAGE integration
	AWS_API_GATEWAY_STAGE: "AWS_API_GATEWAY_STAGE",
	// AWS_AUTO_SCALING_GROUP integration
	AWS_AUTO_SCALING_GROUP: "AWS_AUTO_SCALING_GROUP",
	// AWS_AUTO_SCALING_INSTANCE integration
	AWS_AUTO_SCALING_INSTANCE: "AWS_AUTO_SCALING_INSTANCE",
	// AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration
	AWS_AUTO_SCALING_LAUNCH_CONFIGURATION: "AWS_AUTO_SCALING_LAUNCH_CONFIGURATION",
	// AWS_AUTO_SCALING_POLICY integration
	AWS_AUTO_SCALING_POLICY: "AWS_AUTO_SCALING_POLICY",
	// AWS_AUTO_SCALING_REGION_LIMIT integration
	AWS_AUTO_SCALING_REGION_LIMIT: "AWS_AUTO_SCALING_REGION_LIMIT",
	// AWS_BILLING_ACCOUNT_COST integration
	AWS_BILLING_ACCOUNT_COST: "AWS_BILLING_ACCOUNT_COST",
	// AWS_BILLING_ACCOUNT_SERVICE_COST integration
	AWS_BILLING_ACCOUNT_SERVICE_COST: "AWS_BILLING_ACCOUNT_SERVICE_COST",
	// AWS_BILLING_BUDGET integration
	AWS_BILLING_BUDGET: "AWS_BILLING_BUDGET",
	// AWS_BILLING_SERVICE_COST integration
	AWS_BILLING_SERVICE_COST: "AWS_BILLING_SERVICE_COST",
	// AWS_CLOUD_FRONT_DISTRIBUTION integration
	AWS_CLOUD_FRONT_DISTRIBUTION: "AWS_CLOUD_FRONT_DISTRIBUTION",
	// AWS_CLOUD_TRAIL integration
	AWS_CLOUD_TRAIL: "AWS_CLOUD_TRAIL",
	// AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration
	AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX: "AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX",
	// AWS_DYNAMO_DB_REGION integration
	AWS_DYNAMO_DB_REGION: "AWS_DYNAMO_DB_REGION",
	// AWS_DYNAMO_DB_TABLE integration
	AWS_DYNAMO_DB_TABLE: "AWS_DYNAMO_DB_TABLE",
	// AWS_EBS_VOLUME integration
	AWS_EBS_VOLUME: "AWS_EBS_VOLUME",
	// AWS_ECS_CLUSTER integration
	AWS_ECS_CLUSTER: "AWS_ECS_CLUSTER",
	// AWS_ECS_SERVICE integration
	AWS_ECS_SERVICE: "AWS_ECS_SERVICE",
	// AWS_EFS_FILE_SYSTEM integration
	AWS_EFS_FILE_SYSTEM: "AWS_EFS_FILE_SYSTEM",
	// AWS_ELASTICSEARCH_CLUSTER integration
	AWS_ELASTICSEARCH_CLUSTER: "AWS_ELASTICSEARCH_CLUSTER",
	// AWS_ELASTICSEARCH_INSTANCE integration
	AWS_ELASTICSEARCH_INSTANCE: "AWS_ELASTICSEARCH_INSTANCE",
	// AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration
	AWS_ELASTIC_BEANSTALK_ENVIRONMENT: "AWS_ELASTIC_BEANSTALK_ENVIRONMENT",
	// AWS_ELASTIC_BEANSTALK_INSTANCE integration
	AWS_ELASTIC_BEANSTALK_INSTANCE: "AWS_ELASTIC_BEANSTALK_INSTANCE",
	// AWS_ELASTIC_MAP_REDUCE_CLUSTER integration
	AWS_ELASTIC_MAP_REDUCE_CLUSTER: "AWS_ELASTIC_MAP_REDUCE_CLUSTER",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE: "AWS_ELASTIC_MAP_REDUCE_INSTANCE",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET: "AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP: "AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP",
	// AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration
	AWS_ELASTI_CACHE_MEMCACHED_CLUSTER: "AWS_ELASTI_CACHE_MEMCACHED_CLUSTER",
	// AWS_ELASTI_CACHE_MEMCACHED_NODE integration
	AWS_ELASTI_CACHE_MEMCACHED_NODE: "AWS_ELASTI_CACHE_MEMCACHED_NODE",
	// AWS_ELASTI_CACHE_REDIS_CLUSTER integration
	AWS_ELASTI_CACHE_REDIS_CLUSTER: "AWS_ELASTI_CACHE_REDIS_CLUSTER",
	// AWS_ELASTI_CACHE_REDIS_NODE integration
	AWS_ELASTI_CACHE_REDIS_NODE: "AWS_ELASTI_CACHE_REDIS_NODE",
	// AWS_ELB integration
	AWS_ELB: "AWS_ELB",
	// AWS_HEALTH_ISSUE integration
	AWS_HEALTH_ISSUE: "AWS_HEALTH_ISSUE",
	// AWS_HEALTH_NOTIFICATION integration
	AWS_HEALTH_NOTIFICATION: "AWS_HEALTH_NOTIFICATION",
	// AWS_HEALTH_SCHEDULED_CHANGE integration
	AWS_HEALTH_SCHEDULED_CHANGE: "AWS_HEALTH_SCHEDULED_CHANGE",
	// AWS_HEALTH_UNKNOWN integration
	AWS_HEALTH_UNKNOWN: "AWS_HEALTH_UNKNOWN",
	// AWS_IAM integration
	AWS_IAM: "AWS_IAM",
	// AWS_IAM_GROUP integration
	AWS_IAM_GROUP: "AWS_IAM_GROUP",
	// AWS_IAM_OPEN_ID_PROVIDER integration
	AWS_IAM_OPEN_ID_PROVIDER: "AWS_IAM_OPEN_ID_PROVIDER",
	// AWS_IAM_POLICY integration
	AWS_IAM_POLICY: "AWS_IAM_POLICY",
	// AWS_IAM_ROLE integration
	AWS_IAM_ROLE: "AWS_IAM_ROLE",
	// AWS_IAM_SAML_PROVIDER integration
	AWS_IAM_SAML_PROVIDER: "AWS_IAM_SAML_PROVIDER",
	// AWS_IAM_SERVER_CERTIFICATE integration
	AWS_IAM_SERVER_CERTIFICATE: "AWS_IAM_SERVER_CERTIFICATE",
	// AWS_IAM_USER integration
	AWS_IAM_USER: "AWS_IAM_USER",
	// AWS_IAM_VIRTUAL_MFA_DEVICE integration
	AWS_IAM_VIRTUAL_MFA_DEVICE: "AWS_IAM_VIRTUAL_MFA_DEVICE",
	// AWS_IOT_BROKER integration
	AWS_IOT_BROKER: "AWS_IOT_BROKER",
	// AWS_IOT_RULE integration
	AWS_IOT_RULE: "AWS_IOT_RULE",
	// AWS_IOT_RULE_ACTION integration
	AWS_IOT_RULE_ACTION: "AWS_IOT_RULE_ACTION",
	// AWS_KINESIS_DELIVERY_STREAM integration
	AWS_KINESIS_DELIVERY_STREAM: "AWS_KINESIS_DELIVERY_STREAM",
	// AWS_KINESIS_STREAM integration
	AWS_KINESIS_STREAM: "AWS_KINESIS_STREAM",
	// AWS_KINESIS_STREAM_SHARD integration
	AWS_KINESIS_STREAM_SHARD: "AWS_KINESIS_STREAM_SHARD",
	// AWS_LAMBDA_AGENT_TRANSACTION integration
	AWS_LAMBDA_AGENT_TRANSACTION: "AWS_LAMBDA_AGENT_TRANSACTION",
	// AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration
	AWS_LAMBDA_AGENT_TRANSACTION_ERROR: "AWS_LAMBDA_AGENT_TRANSACTION_ERROR",
	// AWS_LAMBDA_EDGE_FUNCTION integration
	AWS_LAMBDA_EDGE_FUNCTION: "AWS_LAMBDA_EDGE_FUNCTION",
	// AWS_LAMBDA_EVENT_SOURCE_MAPPING integration
	AWS_LAMBDA_EVENT_SOURCE_MAPPING: "AWS_LAMBDA_EVENT_SOURCE_MAPPING",
	// AWS_LAMBDA_FUNCTION integration
	AWS_LAMBDA_FUNCTION: "AWS_LAMBDA_FUNCTION",
	// AWS_LAMBDA_FUNCTION_ALIAS integration
	AWS_LAMBDA_FUNCTION_ALIAS: "AWS_LAMBDA_FUNCTION_ALIAS",
	// AWS_LAMBDA_OPERATION integration
	AWS_LAMBDA_OPERATION: "AWS_LAMBDA_OPERATION",
	// AWS_LAMBDA_REGION integration
	AWS_LAMBDA_REGION: "AWS_LAMBDA_REGION",
	// AWS_LAMBDA_SPAN integration
	AWS_LAMBDA_SPAN: "AWS_LAMBDA_SPAN",
	// AWS_LAMBDA_TRACE integration
	AWS_LAMBDA_TRACE: "AWS_LAMBDA_TRACE",
	// AWS_RDS_DB_CLUSTER integration
	AWS_RDS_DB_CLUSTER: "AWS_RDS_DB_CLUSTER",
	// AWS_RDS_DB_INSTANCE integration
	AWS_RDS_DB_INSTANCE: "AWS_RDS_DB_INSTANCE",
	// AWS_REDSHIFT_CLUSTER integration
	AWS_REDSHIFT_CLUSTER: "AWS_REDSHIFT_CLUSTER",
	// AWS_REDSHIFT_NODE integration
	AWS_REDSHIFT_NODE: "AWS_REDSHIFT_NODE",
	// AWS_ROUTE53_HEALTH_CHECK integration
	AWS_ROUTE53_HEALTH_CHECK: "AWS_ROUTE53_HEALTH_CHECK",
	// AWS_ROUTE53_ZONE integration
	AWS_ROUTE53_ZONE: "AWS_ROUTE53_ZONE",
	// AWS_ROUTE53_ZONE_RECORD_SET integration
	AWS_ROUTE53_ZONE_RECORD_SET: "AWS_ROUTE53_ZONE_RECORD_SET",
	// AWS_S3_BUCKET integration
	AWS_S3_BUCKET: "AWS_S3_BUCKET",
	// AWS_S3_BUCKET_REQUESTS integration
	AWS_S3_BUCKET_REQUESTS: "AWS_S3_BUCKET_REQUESTS",
	// AWS_SES_CONFIGURATION_SET integration
	AWS_SES_CONFIGURATION_SET: "AWS_SES_CONFIGURATION_SET",
	// AWS_SES_EVENT_DESTINATION integration
	AWS_SES_EVENT_DESTINATION: "AWS_SES_EVENT_DESTINATION",
	// AWS_SES_RECEIPT_FILTER integration
	AWS_SES_RECEIPT_FILTER: "AWS_SES_RECEIPT_FILTER",
	// AWS_SES_RECEIPT_RULE integration
	AWS_SES_RECEIPT_RULE: "AWS_SES_RECEIPT_RULE",
	// AWS_SES_RECEIPT_RULE_SET integration
	AWS_SES_RECEIPT_RULE_SET: "AWS_SES_RECEIPT_RULE_SET",
	// AWS_SES_REGION integration
	AWS_SES_REGION: "AWS_SES_REGION",
	// AWS_SNS_SUBSCRIPTION integration
	AWS_SNS_SUBSCRIPTION: "AWS_SNS_SUBSCRIPTION",
	// AWS_SNS_TOPIC integration
	AWS_SNS_TOPIC: "AWS_SNS_TOPIC",
	// AWS_SQS_QUEUE integration
	AWS_SQS_QUEUE: "AWS_SQS_QUEUE",
	// AWS_VPC integration
	AWS_VPC: "AWS_VPC",
	// AWS_VPC_ENDPOINT integration
	AWS_VPC_ENDPOINT: "AWS_VPC_ENDPOINT",
	// AWS_VPC_INTERNET_GATEWAY integration
	AWS_VPC_INTERNET_GATEWAY: "AWS_VPC_INTERNET_GATEWAY",
	// AWS_VPC_NAT_GATEWAY integration
	AWS_VPC_NAT_GATEWAY: "AWS_VPC_NAT_GATEWAY",
	// AWS_VPC_NETWORK_ACL integration
	AWS_VPC_NETWORK_ACL: "AWS_VPC_NETWORK_ACL",
	// AWS_VPC_NETWORK_INTERFACE integration
	AWS_VPC_NETWORK_INTERFACE: "AWS_VPC_NETWORK_INTERFACE",
	// AWS_VPC_PEERING_CONNECTION integration
	AWS_VPC_PEERING_CONNECTION: "AWS_VPC_PEERING_CONNECTION",
	// AWS_VPC_ROUTE_TABLE integration
	AWS_VPC_ROUTE_TABLE: "AWS_VPC_ROUTE_TABLE",
	// AWS_VPC_SECURITY_GROUP integration
	AWS_VPC_SECURITY_GROUP: "AWS_VPC_SECURITY_GROUP",
	// AWS_VPC_SUBNET integration
	AWS_VPC_SUBNET: "AWS_VPC_SUBNET",
	// AWS_VPC_VPN_CONNECTION integration
	AWS_VPC_VPN_CONNECTION: "AWS_VPC_VPN_CONNECTION",
	// AWS_VPC_VPN_TUNNEL integration
	AWS_VPC_VPN_TUNNEL: "AWS_VPC_VPN_TUNNEL",
	// AZURE_APP_SERVICE_HOST_NAME integration
	AZURE_APP_SERVICE_HOST_NAME: "AZURE_APP_SERVICE_HOST_NAME",
	// AZURE_APP_SERVICE_WEB_APP integration
	AZURE_APP_SERVICE_WEB_APP: "AZURE_APP_SERVICE_WEB_APP",
	// AZURE_COSMOS_DB_ACCOUNT integration
	AZURE_COSMOS_DB_ACCOUNT: "AZURE_COSMOS_DB_ACCOUNT",
	// AZURE_FUNCTIONS_APP integration
	AZURE_FUNCTIONS_APP: "AZURE_FUNCTIONS_APP",
	// AZURE_LOAD_BALANCER integration
	AZURE_LOAD_BALANCER: "AZURE_LOAD_BALANCER",
	// AZURE_LOAD_BALANCER_BACKEND integration
	AZURE_LOAD_BALANCER_BACKEND: "AZURE_LOAD_BALANCER_BACKEND",
	// AZURE_LOAD_BALANCER_FRONTEND_IP integration
	AZURE_LOAD_BALANCER_FRONTEND_IP: "AZURE_LOAD_BALANCER_FRONTEND_IP",
	// AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_POOL: "AZURE_LOAD_BALANCER_INBOUND_NAT_POOL",
	// AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_RULE: "AZURE_LOAD_BALANCER_INBOUND_NAT_RULE",
	// AZURE_LOAD_BALANCER_PROBE integration
	AZURE_LOAD_BALANCER_PROBE: "AZURE_LOAD_BALANCER_PROBE",
	// AZURE_LOAD_BALANCER_RULE integration
	AZURE_LOAD_BALANCER_RULE: "AZURE_LOAD_BALANCER_RULE",
	// AZURE_MARIADB_SERVER integration
	AZURE_MARIADB_SERVER: "AZURE_MARIADB_SERVER",
	// AZURE_MYSQL_SERVER integration
	AZURE_MYSQL_SERVER: "AZURE_MYSQL_SERVER",
	// AZURE_POSTGRESQL_SERVER integration
	AZURE_POSTGRESQL_SERVER: "AZURE_POSTGRESQL_SERVER",
	// AZURE_REDIS_CACHE integration
	AZURE_REDIS_CACHE: "AZURE_REDIS_CACHE",
	// AZURE_REDIS_CACHE_SHARD integration
	AZURE_REDIS_CACHE_SHARD: "AZURE_REDIS_CACHE_SHARD",
	// AZURE_SERVICE_BUS_NAMESPACE integration
	AZURE_SERVICE_BUS_NAMESPACE: "AZURE_SERVICE_BUS_NAMESPACE",
	// AZURE_SERVICE_BUS_QUEUE integration
	AZURE_SERVICE_BUS_QUEUE: "AZURE_SERVICE_BUS_QUEUE",
	// AZURE_SERVICE_BUS_SUBSCRIPTION integration
	AZURE_SERVICE_BUS_SUBSCRIPTION: "AZURE_SERVICE_BUS_SUBSCRIPTION",
	// AZURE_SERVICE_BUS_TOPIC integration
	AZURE_SERVICE_BUS_TOPIC: "AZURE_SERVICE_BUS_TOPIC",
	// AZURE_SQL_DATABASE integration
	AZURE_SQL_DATABASE: "AZURE_SQL_DATABASE",
	// AZURE_SQL_ELASTIC_POOL integration
	AZURE_SQL_ELASTIC_POOL: "AZURE_SQL_ELASTIC_POOL",
	// AZURE_SQL_FIREWALL integration
	AZURE_SQL_FIREWALL: "AZURE_SQL_FIREWALL",
	// AZURE_SQL_REPLICATION_LINK integration
	AZURE_SQL_REPLICATION_LINK: "AZURE_SQL_REPLICATION_LINK",
	// AZURE_SQL_RESTORE_POINT integration
	AZURE_SQL_RESTORE_POINT: "AZURE_SQL_RESTORE_POINT",
	// AZURE_SQL_SERVER integration
	AZURE_SQL_SERVER: "AZURE_SQL_SERVER",
	// AZURE_STORAGE_ACCOUNT integration
	AZURE_STORAGE_ACCOUNT: "AZURE_STORAGE_ACCOUNT",
	// AZURE_VIRTUAL_NETWORKS integration
	AZURE_VIRTUAL_NETWORKS: "AZURE_VIRTUAL_NETWORKS",
	// AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration
	AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION: "AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION",
	// AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration
	AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE: "AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE",
	// AZURE_VIRTUAL_NETWORKS_PEERING integration
	AZURE_VIRTUAL_NETWORKS_PEERING: "AZURE_VIRTUAL_NETWORKS_PEERING",
	// AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration
	AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS: "AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS",
	// AZURE_VIRTUAL_NETWORKS_ROUTE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE: "AZURE_VIRTUAL_NETWORKS_ROUTE",
	// AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE: "AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE",
	// AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP: "AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP",
	// AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_RULE: "AZURE_VIRTUAL_NETWORKS_SECURITY_RULE",
	// AZURE_VIRTUAL_NETWORKS_SUBNET integration
	AZURE_VIRTUAL_NETWORKS_SUBNET: "AZURE_VIRTUAL_NETWORKS_SUBNET",
	// CASSANDRA_NODE integration
	CASSANDRA_NODE: "CASSANDRA_NODE",
	// CONSUL_AGENT integration
	CONSUL_AGENT: "CONSUL_AGENT",
	// COUCHBASE_BUCKET integration
	COUCHBASE_BUCKET: "COUCHBASE_BUCKET",
	// COUCHBASE_CLUSTER integration
	COUCHBASE_CLUSTER: "COUCHBASE_CLUSTER",
	// COUCHBASE_NODE integration
	COUCHBASE_NODE: "COUCHBASE_NODE",
	// COUCHBASE_QUERY_ENGINE integration
	COUCHBASE_QUERY_ENGINE: "COUCHBASE_QUERY_ENGINE",
	// ELASTICSEARCH_NODE integration
	ELASTICSEARCH_NODE: "ELASTICSEARCH_NODE",
	// F5_NODE integration
	F5_NODE: "F5_NODE",
	// F5_POOL integration
	F5_POOL: "F5_POOL",
	// F5_POOL_MEMBER integration
	F5_POOL_MEMBER: "F5_POOL_MEMBER",
	// F5_SYSTEM integration
	F5_SYSTEM: "F5_SYSTEM",
	// F5_VIRTUAL_SERVER integration
	F5_VIRTUAL_SERVER: "F5_VIRTUAL_SERVER",
	// GCP_APP_ENGINE_SERVICE integration
	GCP_APP_ENGINE_SERVICE: "GCP_APP_ENGINE_SERVICE",
	// GCP_BIG_QUERY_DATA_SET integration
	GCP_BIG_QUERY_DATA_SET: "GCP_BIG_QUERY_DATA_SET",
	// GCP_BIG_QUERY_PROJECT integration
	GCP_BIG_QUERY_PROJECT: "GCP_BIG_QUERY_PROJECT",
	// GCP_BIG_QUERY_TABLE integration
	GCP_BIG_QUERY_TABLE: "GCP_BIG_QUERY_TABLE",
	// GCP_CLOUD_FUNCTION integration
	GCP_CLOUD_FUNCTION: "GCP_CLOUD_FUNCTION",
	// GCP_CLOUD_SQL integration
	GCP_CLOUD_SQL: "GCP_CLOUD_SQL",
	// GCP_CLOUD_TASKS_QUEUE integration
	GCP_CLOUD_TASKS_QUEUE: "GCP_CLOUD_TASKS_QUEUE",
	// GCP_HTTP_LOAD_BALANCER integration
	GCP_HTTP_LOAD_BALANCER: "GCP_HTTP_LOAD_BALANCER",
	// GCP_INTERNAL_LOAD_BALANCER integration
	GCP_INTERNAL_LOAD_BALANCER: "GCP_INTERNAL_LOAD_BALANCER",
	// GCP_KUBERNETES_CONTAINER integration
	GCP_KUBERNETES_CONTAINER: "GCP_KUBERNETES_CONTAINER",
	// GCP_KUBERNETES_NODE integration
	GCP_KUBERNETES_NODE: "GCP_KUBERNETES_NODE",
	// GCP_KUBERNETES_POD integration
	GCP_KUBERNETES_POD: "GCP_KUBERNETES_POD",
	// GCP_PUB_SUB_SUBSCRIPTION integration
	GCP_PUB_SUB_SUBSCRIPTION: "GCP_PUB_SUB_SUBSCRIPTION",
	// GCP_PUB_SUB_TOPIC integration
	GCP_PUB_SUB_TOPIC: "GCP_PUB_SUB_TOPIC",
	// GCP_SPANNER_DATABASE integration
	GCP_SPANNER_DATABASE: "GCP_SPANNER_DATABASE",
	// GCP_SPANNER_INSTANCE integration
	GCP_SPANNER_INSTANCE: "GCP_SPANNER_INSTANCE",
	// GCP_STORAGE_BUCKET integration
	GCP_STORAGE_BUCKET: "GCP_STORAGE_BUCKET",
	// GCP_TCP_SSL_PROXY_LOAD_BALANCER integration
	GCP_TCP_SSL_PROXY_LOAD_BALANCER: "GCP_TCP_SSL_PROXY_LOAD_BALANCER",
	// GCP_VIRTUAL_MACHINE_DISK integration
	GCP_VIRTUAL_MACHINE_DISK: "GCP_VIRTUAL_MACHINE_DISK",
	// KAFKA_BROKER integration
	KAFKA_BROKER: "KAFKA_BROKER",
	// KAFKA_TOPIC integration
	KAFKA_TOPIC: "KAFKA_TOPIC",
	// KUBERNETES_CLUSTER integration
	KUBERNETES_CLUSTER: "KUBERNETES_CLUSTER",
	// MEMCACHED_INSTANCE integration
	MEMCACHED_INSTANCE: "MEMCACHED_INSTANCE",
	// MSSQL_INSTANCE integration
	MSSQL_INSTANCE: "MSSQL_INSTANCE",
	// MYSQL_NODE integration
	MYSQL_NODE: "MYSQL_NODE",
	// NA integration
	NA: "NA",
	// NGINX_SERVER integration
	NGINX_SERVER: "NGINX_SERVER",
	// ORACLE_DB_INSTANCE integration
	ORACLE_DB_INSTANCE: "ORACLE_DB_INSTANCE",
	// POSTGRE_SQL_INSTANCE integration
	POSTGRE_SQL_INSTANCE: "POSTGRE_SQL_INSTANCE",
	// RABBIT_MQ_CLUSTER integration
	RABBIT_MQ_CLUSTER: "RABBIT_MQ_CLUSTER",
	// RABBIT_MQ_EXCHANGE integration
	RABBIT_MQ_EXCHANGE: "RABBIT_MQ_EXCHANGE",
	// RABBIT_MQ_NODE integration
	RABBIT_MQ_NODE: "RABBIT_MQ_NODE",
	// RABBIT_MQ_QUEUE integration
	RABBIT_MQ_QUEUE: "RABBIT_MQ_QUEUE",
	// REDIS_INSTANCE integration
	REDIS_INSTANCE: "REDIS_INSTANCE",
	// VARNISH_INSTANCE integration
	VARNISH_INSTANCE: "VARNISH_INSTANCE",
}

// EntityRelationshipType - The type of the relationship.
//
// For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
type EntityRelationshipType string

var EntityRelationshipTypeTypes = struct {
	// The source entity calls the target entity.
	CALLS EntityRelationshipType
	// The source entity contains the target entity
	CONTAINS EntityRelationshipType
	// The source entity hosts the target
	HOSTS EntityRelationshipType
	// The source is an Application that serves the target Browser application
	SERVES EntityRelationshipType
	// Type not known
	UNKNOWN EntityRelationshipType
}{
	// The source entity calls the target entity.
	CALLS: "CALLS",
	// The source entity contains the target entity
	CONTAINS: "CONTAINS",
	// The source entity hosts the target
	HOSTS: "HOSTS",
	// The source is an Application that serves the target Browser application
	SERVES: "SERVES",
	// Type not known
	UNKNOWN: "UNKNOWN",
}

// EntitySearchCountsFacet - Possible entity search count facets.
type EntitySearchCountsFacet string

var EntitySearchCountsFacetTypes = struct {
	// Facet by account id.
	ACCOUNT_ID EntitySearchCountsFacet
	// Facet by alert severity.
	ALERT_SEVERITY EntitySearchCountsFacet
	// Facet by entity domain.
	DOMAIN EntitySearchCountsFacet
	// Facet by entity domain and entity type.
	DOMAIN_TYPE EntitySearchCountsFacet
	// Facet by entity name
	NAME EntitySearchCountsFacet
	// Facet by reporting state.
	REPORTING EntitySearchCountsFacet
	// Facet by entity type.
	TYPE EntitySearchCountsFacet
}{
	// Facet by account id.
	ACCOUNT_ID: "ACCOUNT_ID",
	// Facet by alert severity.
	ALERT_SEVERITY: "ALERT_SEVERITY",
	// Facet by entity domain.
	DOMAIN: "DOMAIN",
	// Facet by entity domain and entity type.
	DOMAIN_TYPE: "DOMAIN_TYPE",
	// Facet by entity name
	NAME: "NAME",
	// Facet by reporting state.
	REPORTING: "REPORTING",
	// Facet by entity type.
	TYPE: "TYPE",
}

// EntitySearchQueryBuilderDomain - The domain to search
type EntitySearchQueryBuilderDomain string

var EntitySearchQueryBuilderDomainTypes = struct {
	// Any APM entity
	APM EntitySearchQueryBuilderDomain
	// Any Browser entity
	BROWSER EntitySearchQueryBuilderDomain
	// Any Infrastructure entity
	INFRA EntitySearchQueryBuilderDomain
	// Any Mobile entity
	MOBILE EntitySearchQueryBuilderDomain
	// Any Synthetics entity
	SYNTH EntitySearchQueryBuilderDomain
}{
	// Any APM entity
	APM: "APM",
	// Any Browser entity
	BROWSER: "BROWSER",
	// Any Infrastructure entity
	INFRA: "INFRA",
	// Any Mobile entity
	MOBILE: "MOBILE",
	// Any Synthetics entity
	SYNTH: "SYNTH",
}

// EntitySearchQueryBuilderType - The type of entity
type EntitySearchQueryBuilderType string

var EntitySearchQueryBuilderTypeTypes = struct {
	// An application
	APPLICATION EntitySearchQueryBuilderType
	// A dashboard
	DASHBOARD EntitySearchQueryBuilderType
	// A host
	HOST EntitySearchQueryBuilderType
	// A monitor
	MONITOR EntitySearchQueryBuilderType
	// A workload
	WORKLOAD EntitySearchQueryBuilderType
}{
	// An application
	APPLICATION: "APPLICATION",
	// A dashboard
	DASHBOARD: "DASHBOARD",
	// A host
	HOST: "HOST",
	// A monitor
	MONITOR: "MONITOR",
	// A workload
	WORKLOAD: "WORKLOAD",
}

// EntitySearchSortCriteria - Possible entity sorting criteria.
type EntitySearchSortCriteria string

var EntitySearchSortCriteriaTypes = struct {
	// Sort by alert severity.
	ALERT_SEVERITY EntitySearchSortCriteria
	// Sort by entity domain.
	DOMAIN EntitySearchSortCriteria
	// Sort by relevance. Note that these results can't be paginated.
	MOST_RELEVANT EntitySearchSortCriteria
	// Sort by entity name.
	NAME EntitySearchSortCriteria
	// Sort by reporting state.
	REPORTING EntitySearchSortCriteria
	// Sort by entity type.
	TYPE EntitySearchSortCriteria
}{
	// Sort by alert severity.
	ALERT_SEVERITY: "ALERT_SEVERITY",
	// Sort by entity domain.
	DOMAIN: "DOMAIN",
	// Sort by relevance. Note that these results can't be paginated.
	MOST_RELEVANT: "MOST_RELEVANT",
	// Sort by entity name.
	NAME: "NAME",
	// Sort by reporting state.
	REPORTING: "REPORTING",
	// Sort by entity type.
	TYPE: "TYPE",
}

// EntityType - The specific type of entity
type EntityType string

var EntityTypeTypes = struct {
	// An APM Application
	APM_APPLICATION_ENTITY EntityType
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY EntityType
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY EntityType
	// A Browser Application
	BROWSER_APPLICATION_ENTITY EntityType
	// An Insights Dashboard entity
	DASHBOARD_ENTITY EntityType
	// A Generic Entity with no detailed data
	GENERIC_ENTITY EntityType
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY EntityType
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY EntityType
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY EntityType
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY EntityType
	// A Secure Credential entity
	SECURE_CREDENTIAL_ENTITY EntityType
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY EntityType
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY EntityType
	// A entity that is unavailable
	UNAVAILABLE_ENTITY EntityType
	// A Workload Entity
	WORKLOAD_ENTITY EntityType
}{
	// An APM Application
	APM_APPLICATION_ENTITY: "APM_APPLICATION_ENTITY",
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY: "APM_DATABASE_INSTANCE_ENTITY",
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY: "APM_EXTERNAL_SERVICE_ENTITY",
	// A Browser Application
	BROWSER_APPLICATION_ENTITY: "BROWSER_APPLICATION_ENTITY",
	// An Insights Dashboard entity
	DASHBOARD_ENTITY: "DASHBOARD_ENTITY",
	// A Generic Entity with no detailed data
	GENERIC_ENTITY: "GENERIC_ENTITY",
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY: "GENERIC_INFRASTRUCTURE_ENTITY",
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY: "INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY",
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY: "INFRASTRUCTURE_HOST_ENTITY",
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY: "MOBILE_APPLICATION_ENTITY",
	// A Secure Credential entity
	SECURE_CREDENTIAL_ENTITY: "SECURE_CREDENTIAL_ENTITY",
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY: "SYNTHETIC_MONITOR_ENTITY",
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY: "THIRD_PARTY_SERVICE_ENTITY",
	// A entity that is unavailable
	UNAVAILABLE_ENTITY: "UNAVAILABLE_ENTITY",
	// A Workload Entity
	WORKLOAD_ENTITY: "WORKLOAD_ENTITY",
}

// MetricNormalizationRuleAction - The different rule actions.
type MetricNormalizationRuleAction string

var MetricNormalizationRuleActionTypes = struct {
	// Deny new metrics.
	DENY_NEW_METRICS MetricNormalizationRuleAction
	// Ignore matching metrics.
	IGNORE MetricNormalizationRuleAction
	// Replace metrics.
	REPLACE MetricNormalizationRuleAction
}{
	// Deny new metrics.
	DENY_NEW_METRICS: "DENY_NEW_METRICS",
	// Ignore matching metrics.
	IGNORE: "IGNORE",
	// Replace metrics.
	REPLACE: "REPLACE",
}

// SyntheticMonitorStatus -
type SyntheticMonitorStatus string

var SyntheticMonitorStatusTypes = struct {
	DELETED  SyntheticMonitorStatus
	DISABLED SyntheticMonitorStatus
	ENABLED  SyntheticMonitorStatus
	FAULTY   SyntheticMonitorStatus
	MUTED    SyntheticMonitorStatus
	PAUSED   SyntheticMonitorStatus
}{
	DELETED:  "DELETED",
	DISABLED: "DISABLED",
	ENABLED:  "ENABLED",
	FAULTY:   "FAULTY",
	MUTED:    "MUTED",
	PAUSED:   "PAUSED",
}

// SyntheticMonitorType - The types of Synthetic Monitors.
type SyntheticMonitorType string

var SyntheticMonitorTypeTypes = struct {
	BROWSER        SyntheticMonitorType
	SCRIPT_API     SyntheticMonitorType
	SCRIPT_BROWSER SyntheticMonitorType
	SIMPLE         SyntheticMonitorType
}{
	BROWSER:        "BROWSER",
	SCRIPT_API:     "SCRIPT_API",
	SCRIPT_BROWSER: "SCRIPT_BROWSER",
	SIMPLE:         "SIMPLE",
}

// TaggingMutationErrorType - The different types of errors the API can return.
type TaggingMutationErrorType string

var TaggingMutationErrorTypeTypes = struct {
	// Too many concurrent tasks for the same GUID are being sent and we cannot process. Please serialize your requests for the given GUID.
	CONCURRENT_TASK_EXCEPTION TaggingMutationErrorType
	// Domain Type invalid. The decoded domain type from the provided GUID is not valid. Please provide a correct GUID.
	INVALID_DOMAIN_TYPE TaggingMutationErrorType
	// We could not decode the provided GUID. Entity guid needs to be base64 encoded.
	INVALID_ENTITY_GUID TaggingMutationErrorType
	// The tag key is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
	INVALID_KEY TaggingMutationErrorType
	// The tag value is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
	INVALID_VALUE TaggingMutationErrorType
	// The given GUID or tag you're looking for does not exist.
	NOT_FOUND TaggingMutationErrorType
	// You've attempted to do something your Domain/EntityType is not permitted to do. Its also possible that an api key is required.
	NOT_PERMITTED TaggingMutationErrorType
	// The given entity has reached its tag key count limit. You will need to delete existing tags for the given GUID before continuing.
	TOO_MANY_TAG_KEYS TaggingMutationErrorType
	// The given entity has reached its tag value count limit. You will need to delete existing values for the given GUID before continuing.
	TOO_MANY_TAG_VALUES TaggingMutationErrorType
	// The changes will be reflected in the entity with some delay
	UPDATE_WILL_BE_DELAYED TaggingMutationErrorType
}{
	// Too many concurrent tasks for the same GUID are being sent and we cannot process. Please serialize your requests for the given GUID.
	CONCURRENT_TASK_EXCEPTION: "CONCURRENT_TASK_EXCEPTION",
	// Domain Type invalid. The decoded domain type from the provided GUID is not valid. Please provide a correct GUID.
	INVALID_DOMAIN_TYPE: "INVALID_DOMAIN_TYPE",
	// We could not decode the provided GUID. Entity guid needs to be base64 encoded.
	INVALID_ENTITY_GUID: "INVALID_ENTITY_GUID",
	// The tag key is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
	INVALID_KEY: "INVALID_KEY",
	// The tag value is not valid. Char length has been reached, contains a disallowed character(eg :) or is empty
	INVALID_VALUE: "INVALID_VALUE",
	// The given GUID or tag you're looking for does not exist.
	NOT_FOUND: "NOT_FOUND",
	// You've attempted to do something your Domain/EntityType is not permitted to do. Its also possible that an api key is required.
	NOT_PERMITTED: "NOT_PERMITTED",
	// The given entity has reached its tag key count limit. You will need to delete existing tags for the given GUID before continuing.
	TOO_MANY_TAG_KEYS: "TOO_MANY_TAG_KEYS",
	// The given entity has reached its tag value count limit. You will need to delete existing values for the given GUID before continuing.
	TOO_MANY_TAG_VALUES: "TOO_MANY_TAG_VALUES",
	// The changes will be reflected in the entity with some delay
	UPDATE_WILL_BE_DELAYED: "UPDATE_WILL_BE_DELAYED",
}

// WorkloadStatusSource - Indicates where the status value derives from.
type WorkloadStatusSource string

var WorkloadStatusSourceTypes = struct {
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE WorkloadStatusSource
	// Refers to a static status defined for a workload.
	STATIC WorkloadStatusSource
	// Refers to an undetermined status source.
	UNKNOWN WorkloadStatusSource
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD WorkloadStatusSource
}{
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE: "ROLLUP_RULE",
	// Refers to a static status defined for a workload.
	STATIC: "STATIC",
	// Refers to an undetermined status source.
	UNKNOWN: "UNKNOWN",
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD: "WORKLOAD",
}

// WorkloadStatusValue - The status of the workload, which is derived from the static and the automatic statuses configured. Any static status always overrides any other status values calculated automatically.
type WorkloadStatusValue string

var WorkloadStatusValueTypes = struct {
	// The status of the workload is degraded.
	DEGRADED WorkloadStatusValue
	// The status of the workload is disrupted.
	DISRUPTED WorkloadStatusValue
	// The status of the workload is operational.
	OPERATIONAL WorkloadStatusValue
	// The status of the workload is unknown.
	UNKNOWN WorkloadStatusValue
}{
	// The status of the workload is degraded.
	DEGRADED: "DEGRADED",
	// The status of the workload is disrupted.
	DISRUPTED: "DISRUPTED",
	// The status of the workload is operational.
	OPERATIONAL: "OPERATIONAL",
	// The status of the workload is unknown.
	UNKNOWN: "UNKNOWN",
}

// Actor - The `Actor` object contains fields that are scoped to the API user's access level.
type Actor struct {
	// Fetch a list of entities.
	//
	// You can fetch a max of 25 entities in one query.
	//
	// For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entities []EntityInterface `json:"entities,omitempty"`
	// Fetch a single entity.
	//
	// For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entity EntityInterface `json:"entity,omitempty"`
	// Search for entities using a custom query.
	//
	// For more details on how to create a custom query
	// and what entity data you can request, visit our
	// [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	//
	// Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
	EntitySearch EntitySearch `json:"entitySearch,omitempty"`
}

// AlertableEntity -
type AlertableEntity struct {
	// The current alerting severity of the entity
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from AlertableEntity
func (x AlertableEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from AlertableEntity
func (x AlertableEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from AlertableEntity
func (x AlertableEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

func (x *AlertableEntity) ImplementsAlertableEntity() {}

// AlertableEntityOutline -
type AlertableEntityOutline struct {
	// The current alerting severity of the entity
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from AlertableEntityOutline
func (x AlertableEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

func (x *AlertableEntityOutline) ImplementsAlertableEntityOutline() {}

// ApmApplicationDeployment - An APM application deployment marker
type ApmApplicationDeployment struct {
	// The changelog of the deployment
	Changelog string `json:"changelog,omitempty"`
	// Description of the deployment
	Description string `json:"description,omitempty"`
	// A link to view the deployment in the UI
	Permalink string `json:"permalink,omitempty"`
	// The revision of the app that was deployed
	Revision string `json:"revision,omitempty"`
	// The moment the deployment occurred
	Timestamp nrtime.EpochMilliseconds `json:"timestamp,omitempty"`
	// The user who triggered the deployment
	User string `json:"user,omitempty"`
}

// ApmApplicationEntity - An APM Application entity.
type ApmApplicationEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the APM Application.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the APM Application that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary,omitempty"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId,omitempty"`
	// Deployments of the APM Application.
	Deployments []ApmApplicationDeployment `json:"deployments,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The programming language of the APM Application.
	Language string `json:"language,omitempty"`
	// Retrieves a rule.
	MetricNormalizationRule MetricNormalizationRule `json:"metricNormalizationRule,omitempty"`
	// Retrieves the rules for the application.
	MetricNormalizationRules []MetricNormalizationRule `json:"metricNormalizationRules"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the APM Application.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmApplicationEntity
func (x ApmApplicationEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmApplicationEntity
func (x ApmApplicationEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from ApmApplicationEntity
func (x ApmApplicationEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from ApmApplicationEntity
func (x ApmApplicationEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetApmBrowserSummary returns a pointer to the value of ApmBrowserSummary from ApmApplicationEntity
func (x ApmApplicationEntity) GetApmBrowserSummary() ApmBrowserApplicationSummaryData {
	return x.ApmBrowserSummary
}

// GetApmSummary returns a pointer to the value of ApmSummary from ApmApplicationEntity
func (x ApmApplicationEntity) GetApmSummary() ApmApplicationSummaryData {
	return x.ApmSummary
}

// GetApplicationID returns a pointer to the value of ApplicationID from ApmApplicationEntity
func (x ApmApplicationEntity) GetApplicationID() int {
	return x.ApplicationID
}

// GetDeployments returns a pointer to the value of Deployments from ApmApplicationEntity
func (x ApmApplicationEntity) GetDeployments() []ApmApplicationDeployment {
	return x.Deployments
}

// GetDomain returns a pointer to the value of Domain from ApmApplicationEntity
func (x ApmApplicationEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmApplicationEntity
func (x ApmApplicationEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ApmApplicationEntity
func (x ApmApplicationEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmApplicationEntity
func (x ApmApplicationEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetLanguage returns a pointer to the value of Language from ApmApplicationEntity
func (x ApmApplicationEntity) GetLanguage() string {
	return x.Language
}

// GetMetricNormalizationRule returns a pointer to the value of MetricNormalizationRule from ApmApplicationEntity
func (x ApmApplicationEntity) GetMetricNormalizationRule() MetricNormalizationRule {
	return x.MetricNormalizationRule
}

// GetMetricNormalizationRules returns a pointer to the value of MetricNormalizationRules from ApmApplicationEntity
func (x ApmApplicationEntity) GetMetricNormalizationRules() []MetricNormalizationRule {
	return x.MetricNormalizationRules
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from ApmApplicationEntity
func (x ApmApplicationEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from ApmApplicationEntity
func (x ApmApplicationEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from ApmApplicationEntity
func (x ApmApplicationEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from ApmApplicationEntity
func (x ApmApplicationEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from ApmApplicationEntity
func (x ApmApplicationEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from ApmApplicationEntity
func (x ApmApplicationEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from ApmApplicationEntity
func (x ApmApplicationEntity) GetReporting() bool {
	return x.Reporting
}

// GetRunningAgentVersions returns a pointer to the value of RunningAgentVersions from ApmApplicationEntity
func (x ApmApplicationEntity) GetRunningAgentVersions() ApmApplicationRunningAgentVersions {
	return x.RunningAgentVersions
}

// GetSettings returns a pointer to the value of Settings from ApmApplicationEntity
func (x ApmApplicationEntity) GetSettings() ApmApplicationSettings {
	return x.Settings
}

// GetTags returns a pointer to the value of Tags from ApmApplicationEntity
func (x ApmApplicationEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from ApmApplicationEntity
func (x ApmApplicationEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from ApmApplicationEntity
func (x ApmApplicationEntity) GetType() string {
	return x.Type
}

func (x *ApmApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

func (x *ApmApplicationEntity) ImplementsAlertableEntity() {}

func (x *ApmApplicationEntity) ImplementsEntity() {}

// ApmApplicationEntityOutline - An APM Application entity outline.
type ApmApplicationEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the APM Application.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary,omitempty"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The programming language of the APM Application.
	Language string `json:"language,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetApmBrowserSummary returns a pointer to the value of ApmBrowserSummary from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetApmBrowserSummary() ApmBrowserApplicationSummaryData {
	return x.ApmBrowserSummary
}

// GetApmSummary returns a pointer to the value of ApmSummary from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetApmSummary() ApmApplicationSummaryData {
	return x.ApmSummary
}

// GetApplicationID returns a pointer to the value of ApplicationID from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetApplicationID() int {
	return x.ApplicationID
}

// GetDomain returns a pointer to the value of Domain from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetLanguage returns a pointer to the value of Language from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetLanguage() string {
	return x.Language
}

// GetName returns a pointer to the value of Name from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetRunningAgentVersions returns a pointer to the value of RunningAgentVersions from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetRunningAgentVersions() ApmApplicationRunningAgentVersions {
	return x.RunningAgentVersions
}

// GetSettings returns a pointer to the value of Settings from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetSettings() ApmApplicationSettings {
	return x.Settings
}

// GetTags returns a pointer to the value of Tags from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from ApmApplicationEntityOutline
func (x ApmApplicationEntityOutline) GetType() string {
	return x.Type
}

func (x *ApmApplicationEntityOutline) ImplementsApmBrowserApplicationEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsEntityOutline() {}

// ApmApplicationRunningAgentVersions - Represents the currently running agent versions in an APM Application.
// An application could be running multiple versions of an agent (across different hosts, for example).
type ApmApplicationRunningAgentVersions struct {
	// The maximum (newest) language agent version running in the APM Application.
	MaxVersion string `json:"maxVersion,omitempty"`
	// The minimum (oldest) language agent version running in the APM Application.
	MinVersion string `json:"minVersion,omitempty"`
}

// ApmApplicationSettings - Configuration settings for the APM Application
type ApmApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
	// State of server-side configuration setting
	ServerSideConfig bool `json:"serverSideConfig,omitempty"`
}

// ApmApplicationSummaryData - Summary statistics about the APM App.
type ApmApplicationSummaryData struct {
	// The apdex score. For more details on the use of apdex, visit [our docs](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).
	ApdexScore float64 `json:"apdexScore,omitempty"`
	// The percentage of responses to all transactions with an error.
	ErrorRate float64 `json:"errorRate,omitempty"`
	// The number of hosts this application is running on.
	HostCount int `json:"hostCount,omitempty"`
	// The number of instances of this application running.
	InstanceCount int `json:"instanceCount,omitempty"`
	// The average response time for non-web transactions in seconds.
	NonWebResponseTimeAverage nrtime.Seconds `json:"nonWebResponseTimeAverage,omitempty"`
	// The number of non-web transactions per minute.
	NonWebThroughput float64 `json:"nonWebThroughput,omitempty"`
	// The average response time for all transactions in seconds.
	ResponseTimeAverage nrtime.Seconds `json:"responseTimeAverage,omitempty"`
	// The number of all transactions per minute.
	Throughput float64 `json:"throughput,omitempty"`
	// The average response time for web transactions in seconds.
	WebResponseTimeAverage nrtime.Seconds `json:"webResponseTimeAverage,omitempty"`
	// The number of web transactions per minute.
	WebThroughput float64 `json:"webThroughput,omitempty"`
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntity struct {
	//
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
}

// GetApmBrowserSummary returns a pointer to the value of ApmBrowserSummary from ApmBrowserApplicationEntity
func (x ApmBrowserApplicationEntity) GetApmBrowserSummary() ApmBrowserApplicationSummaryData {
	return x.ApmBrowserSummary
}

func (x *ApmBrowserApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

// ApmBrowserApplicationEntityOutline - The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityOutline struct {
	//
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
}

// GetApmBrowserSummary returns a pointer to the value of ApmBrowserSummary from ApmBrowserApplicationEntityOutline
func (x ApmBrowserApplicationEntityOutline) GetApmBrowserSummary() ApmBrowserApplicationSummaryData {
	return x.ApmBrowserSummary
}

func (x *ApmBrowserApplicationEntityOutline) ImplementsApmBrowserApplicationEntityOutline() {}

// ApmBrowserApplicationSummaryData - Summary statistics about the Browser App injected by the APM Application.
type ApmBrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput,omitempty"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage nrtime.Seconds `json:"ajaxResponseTimeAverage,omitempty"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate,omitempty"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput,omitempty"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage,omitempty"`
}

// ApmDatabaseInstanceEntity - A database instance seen by an APM Application
type ApmDatabaseInstanceEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The host the database instance is running on.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetHost returns a pointer to the value of Host from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetHost() string {
	return x.Host
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetPermalink() string {
	return x.Permalink
}

// GetPortOrPath returns a pointer to the value of PortOrPath from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetPortOrPath() string {
	return x.PortOrPath
}

// GetRelationships returns a pointer to the value of Relationships from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetType() string {
	return x.Type
}

// GetVendor returns a pointer to the value of Vendor from ApmDatabaseInstanceEntity
func (x ApmDatabaseInstanceEntity) GetVendor() string {
	return x.Vendor
}

func (x *ApmDatabaseInstanceEntity) ImplementsEntity() {}

// ApmDatabaseInstanceEntityOutline - A database instance seen by an APM Application
type ApmDatabaseInstanceEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The host the database instance is running on.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetHost returns a pointer to the value of Host from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetHost() string {
	return x.Host
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetPortOrPath returns a pointer to the value of PortOrPath from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetPortOrPath() string {
	return x.PortOrPath
}

// GetReporting returns a pointer to the value of Reporting from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetType() string {
	return x.Type
}

// GetVendor returns a pointer to the value of Vendor from ApmDatabaseInstanceEntityOutline
func (x ApmDatabaseInstanceEntityOutline) GetVendor() string {
	return x.Vendor
}

func (x *ApmDatabaseInstanceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceEntity - An external service seen by an APM Application.
type ApmExternalServiceEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	//
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The host of the external service.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetExternalSummary returns a pointer to the value of ExternalSummary from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetExternalSummary() ApmExternalServiceSummaryData {
	return x.ExternalSummary
}

// GetGUID returns a pointer to the value of GUID from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetHost returns a pointer to the value of Host from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetHost() string {
	return x.Host
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetPermalink() string {
	return x.Permalink
}

// GetRelationships returns a pointer to the value of Relationships from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from ApmExternalServiceEntity
func (x ApmExternalServiceEntity) GetType() string {
	return x.Type
}

func (x *ApmExternalServiceEntity) ImplementsEntity() {}

// ApmExternalServiceEntityOutline - An external service seen by an APM Application.
type ApmExternalServiceEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	//
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The host of the external service.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetExternalSummary returns a pointer to the value of ExternalSummary from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetExternalSummary() ApmExternalServiceSummaryData {
	return x.ExternalSummary
}

// GetGUID returns a pointer to the value of GUID from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetHost returns a pointer to the value of Host from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetHost() string {
	return x.Host
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from ApmExternalServiceEntityOutline
func (x ApmExternalServiceEntityOutline) GetType() string {
	return x.Type
}

func (x *ApmExternalServiceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceSummaryData - Summary statistics about an External Service called by an APM App.
type ApmExternalServiceSummaryData struct {
	// The average response time for external service calls in seconds.
	ResponseTimeAverage nrtime.Seconds `json:"responseTimeAverage,omitempty"`
	// The number of external service calls per minute.
	Throughput float64 `json:"throughput,omitempty"`
}

// BrowserApplicationEntity - A Browser Application entity.
type BrowserApplicationEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The type of Browser agent installed for this application.
	AgentInstallType BrowserAgentInstallType `json:"agentInstallType,omitempty"`
	// The current alerting severity of the Browser App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the Browser App that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId,omitempty"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Browser App.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID int `json:"servingApmApplicationId,omitempty"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetAccountID() int {
	return x.AccountID
}

// GetAgentInstallType returns a pointer to the value of AgentInstallType from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetAgentInstallType() BrowserAgentInstallType {
	return x.AgentInstallType
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetApplicationID returns a pointer to the value of ApplicationID from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetApplicationID() int {
	return x.ApplicationID
}

// GetBrowserSummary returns a pointer to the value of BrowserSummary from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetBrowserSummary() BrowserApplicationSummaryData {
	return x.BrowserSummary
}

// GetDomain returns a pointer to the value of Domain from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetReporting() bool {
	return x.Reporting
}

// GetRunningAgentVersions returns a pointer to the value of RunningAgentVersions from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetRunningAgentVersions() BrowserApplicationRunningAgentVersions {
	return x.RunningAgentVersions
}

// GetServingApmApplicationID returns a pointer to the value of ServingApmApplicationID from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetServingApmApplicationID() int {
	return x.ServingApmApplicationID
}

// GetSettings returns a pointer to the value of Settings from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetSettings() BrowserApplicationSettings {
	return x.Settings
}

// GetTags returns a pointer to the value of Tags from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from BrowserApplicationEntity
func (x BrowserApplicationEntity) GetType() string {
	return x.Type
}

func (x *BrowserApplicationEntity) ImplementsAlertableEntity() {}

func (x *BrowserApplicationEntity) ImplementsEntity() {}

// BrowserApplicationEntityOutline - A Browser Application entity outline.
type BrowserApplicationEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The type of Browser agent installed for this application.
	AgentInstallType BrowserAgentInstallType `json:"agentInstallType,omitempty"`
	// The current alerting severity of the Browser App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId,omitempty"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID int `json:"servingApmApplicationId,omitempty"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAgentInstallType returns a pointer to the value of AgentInstallType from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetAgentInstallType() BrowserAgentInstallType {
	return x.AgentInstallType
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetApplicationID returns a pointer to the value of ApplicationID from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetApplicationID() int {
	return x.ApplicationID
}

// GetBrowserSummary returns a pointer to the value of BrowserSummary from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetBrowserSummary() BrowserApplicationSummaryData {
	return x.BrowserSummary
}

// GetDomain returns a pointer to the value of Domain from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetRunningAgentVersions returns a pointer to the value of RunningAgentVersions from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetRunningAgentVersions() BrowserApplicationRunningAgentVersions {
	return x.RunningAgentVersions
}

// GetServingApmApplicationID returns a pointer to the value of ServingApmApplicationID from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetServingApmApplicationID() int {
	return x.ServingApmApplicationID
}

// GetSettings returns a pointer to the value of Settings from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetSettings() BrowserApplicationSettings {
	return x.Settings
}

// GetTags returns a pointer to the value of Tags from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from BrowserApplicationEntityOutline
func (x BrowserApplicationEntityOutline) GetType() string {
	return x.Type
}

func (x *BrowserApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *BrowserApplicationEntityOutline) ImplementsEntityOutline() {}

// BrowserApplicationRunningAgentVersions - Represents the currently running agent versions in a Browser App.
// An app could be running multiple versions of an agent (across different browsers, for example).
type BrowserApplicationRunningAgentVersions struct {
	// The maximum (newest) agent version running in the Browser App.
	MaxVersion int `json:"maxVersion,omitempty"`
	// The minimum (oldest) agent version running in the Browser App.
	MinVersion int `json:"minVersion,omitempty"`
}

// BrowserApplicationSettings - Configuration settings for the Browser App
type BrowserApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
}

// BrowserApplicationSummaryData - Summary statistics about the Browser App.
type BrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput,omitempty"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage nrtime.Seconds `json:"ajaxResponseTimeAverage,omitempty"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate,omitempty"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput,omitempty"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage,omitempty"`
	// The median page view time in seconds.
	PageLoadTimeMedian float64 `json:"pageLoadTimeMedian,omitempty"`
	// The average SPA response time in seconds.
	SpaResponseTimeAverage nrtime.Seconds `json:"spaResponseTimeAverage,omitempty"`
	// The median SPA response time in seconds.
	SpaResponseTimeMedian nrtime.Seconds `json:"spaResponseTimeMedian,omitempty"`
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntity struct {
	//
	Collection EntityCollection `json:"collection,omitempty"`
	//
	GUID EntityGUID `json:"guid,omitempty"`
}

// GetCollection returns a pointer to the value of Collection from CollectionEntity
func (x CollectionEntity) GetCollection() EntityCollection {
	return x.Collection
}

// GetGUID returns a pointer to the value of GUID from CollectionEntity
func (x CollectionEntity) GetGUID() EntityGUID {
	return x.GUID
}

func (x *CollectionEntity) ImplementsCollectionEntity() {}

// DashboardAreaWidgetConfiguration - Configuration for visualization type 'viz.area'
type DashboardAreaWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
}

// DashboardBarWidgetConfiguration - Configuration for visualization type 'viz.bar'
type DashboardBarWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
}

// DashboardBillboardWidgetConfiguration - Configuration for visualization type 'viz.billboard'
type DashboardBillboardWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
	// thresholds
	Thresholds []DashboardBillboardWidgetThreshold `json:"thresholds,omitempty"`
}

// DashboardBillboardWidgetThreshold - Billboard widget threshold.
type DashboardBillboardWidgetThreshold struct {
	// alert severity.
	AlertSeverity DashboardAlertSeverity `json:"alertSeverity,omitempty"`
	// value.
	Value float64 `json:"value,omitempty"`
}

// DashboardEntity - A Dashboard entity.
type DashboardEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// Dashboard creation timestamp.
	CreatedAt nrtime.DateTime `json:"createdAt,omitempty"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID EntityGUID `json:"dashboardParentGuid,omitempty"`
	// Dashboard description.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// Dashboard owner.
	Owner DashboardOwnerInfo `json:"owner,omitempty"`
	// Dashboard pages.
	Pages []DashboardPage `json:"pages,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Dashboard permissions configuration.
	Permissions DashboardPermissions `json:"permissions,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// Dashboard update timestamp.
	UpdatedAt nrtime.DateTime `json:"updatedAt,omitempty"`
}

// GetAccount returns a pointer to the value of Account from DashboardEntity
func (x DashboardEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from DashboardEntity
func (x DashboardEntity) GetAccountID() int {
	return x.AccountID
}

// GetCreatedAt returns a pointer to the value of CreatedAt from DashboardEntity
func (x DashboardEntity) GetCreatedAt() nrtime.DateTime {
	return x.CreatedAt
}

// GetDashboardParentGUID returns a pointer to the value of DashboardParentGUID from DashboardEntity
func (x DashboardEntity) GetDashboardParentGUID() EntityGUID {
	return x.DashboardParentGUID
}

// GetDescription returns a pointer to the value of Description from DashboardEntity
func (x DashboardEntity) GetDescription() string {
	return x.Description
}

// GetDomain returns a pointer to the value of Domain from DashboardEntity
func (x DashboardEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from DashboardEntity
func (x DashboardEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from DashboardEntity
func (x DashboardEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from DashboardEntity
func (x DashboardEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from DashboardEntity
func (x DashboardEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from DashboardEntity
func (x DashboardEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from DashboardEntity
func (x DashboardEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetOwner returns a pointer to the value of Owner from DashboardEntity
func (x DashboardEntity) GetOwner() DashboardOwnerInfo {
	return x.Owner
}

// GetPages returns a pointer to the value of Pages from DashboardEntity
func (x DashboardEntity) GetPages() []DashboardPage {
	return x.Pages
}

// GetPermalink returns a pointer to the value of Permalink from DashboardEntity
func (x DashboardEntity) GetPermalink() string {
	return x.Permalink
}

// GetPermissions returns a pointer to the value of Permissions from DashboardEntity
func (x DashboardEntity) GetPermissions() DashboardPermissions {
	return x.Permissions
}

// GetRelationships returns a pointer to the value of Relationships from DashboardEntity
func (x DashboardEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from DashboardEntity
func (x DashboardEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from DashboardEntity
func (x DashboardEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from DashboardEntity
func (x DashboardEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from DashboardEntity
func (x DashboardEntity) GetType() string {
	return x.Type
}

// GetUpdatedAt returns a pointer to the value of UpdatedAt from DashboardEntity
func (x DashboardEntity) GetUpdatedAt() nrtime.DateTime {
	return x.UpdatedAt
}

func (x *DashboardEntity) ImplementsEntity() {}

// DashboardEntityOutline - A Dashboard entity outline.
type DashboardEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID EntityGUID `json:"dashboardParentGuid,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from DashboardEntityOutline
func (x DashboardEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from DashboardEntityOutline
func (x DashboardEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDashboardParentGUID returns a pointer to the value of DashboardParentGUID from DashboardEntityOutline
func (x DashboardEntityOutline) GetDashboardParentGUID() EntityGUID {
	return x.DashboardParentGUID
}

// GetDomain returns a pointer to the value of Domain from DashboardEntityOutline
func (x DashboardEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from DashboardEntityOutline
func (x DashboardEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from DashboardEntityOutline
func (x DashboardEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from DashboardEntityOutline
func (x DashboardEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from DashboardEntityOutline
func (x DashboardEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from DashboardEntityOutline
func (x DashboardEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from DashboardEntityOutline
func (x DashboardEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from DashboardEntityOutline
func (x DashboardEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from DashboardEntityOutline
func (x DashboardEntityOutline) GetType() string {
	return x.Type
}

func (x *DashboardEntityOutline) ImplementsEntityOutline() {}

// DashboardLineWidgetConfiguration - Configuration for visualization type 'viz.line'
type DashboardLineWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
}

// DashboardMarkdownWidgetConfiguration - Configuration for visualization type 'viz.markdown'
type DashboardMarkdownWidgetConfiguration struct {
	// Markdown content of the widget
	Text string `json:"text"`
}

// DashboardOwnerInfo - Information on the owner of a dashboard or page
type DashboardOwnerInfo struct {
	// Email.
	Email string `json:"email,omitempty"`
	// User id.
	UserID int `json:"userId,omitempty"`
}

// DashboardPage - Page in a dashboard entity
type DashboardPage struct {
	// Page creation timestamp.
	CreatedAt nrtime.DateTime `json:"createdAt,omitempty"`
	// Page description.
	Description string `json:"description,omitempty"`
	// Unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// Page name.
	Name string `json:"name,omitempty"`
	// Page owner
	Owner DashboardOwnerInfo `json:"owner,omitempty"`
	// Page update timestamp.
	UpdatedAt nrtime.DateTime `json:"updatedAt,omitempty"`
	// Page widgets.
	Widgets []DashboardWidget `json:"widgets,omitempty"`
}

// DashboardPieWidgetConfiguration - Configuration for visualization type 'viz.pie'
type DashboardPieWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
}

// DashboardTableWidgetConfiguration - Configuration for visualization type 'viz.table'
type DashboardTableWidgetConfiguration struct {
	// nrql queries
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// queries
	Queries []DashboardWidgetQuery `json:"queries,omitempty"`
}

// DashboardWidget - Widgets in a Dashboard Page.
type DashboardWidget struct {
	// Typed configuration
	Configuration DashboardWidgetConfiguration `json:"configuration,omitempty"`
	// id
	ID string `json:"id"`
	// layout
	Layout DashboardWidgetLayout `json:"layout,omitempty"`
	// Related entities. Currently only supports Dashboard entities, but may allow other cases in the future.
	LinkedEntities []EntityOutlineInterface `json:"linkedEntities,omitempty"`
	// Untyped configuration
	RawConfiguration DashboardWidgetRawConfiguration `json:"rawConfiguration"`
	// title
	Title string `json:"title,omitempty"`
	// Specifies how this widget will be visualized.
	Visualization DashboardWidgetVisualization `json:"visualization"`
}

// special
func (x *DashboardWidget) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "configuration":
			err = json.Unmarshal(*v, &x.Configuration)
			if err != nil {
				return err
			}
		case "id":
			err = json.Unmarshal(*v, &x.ID)
			if err != nil {
				return err
			}
		case "layout":
			err = json.Unmarshal(*v, &x.Layout)
			if err != nil {
				return err
			}
		case "linkedEntities":
			if v == nil {
				continue
			}
			var rawMessageLinkedEntities []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageLinkedEntities)
			if err != nil {
				return err
			}

			for _, m := range rawMessageLinkedEntities {
				xxx, err := UnmarshalEntityOutlineInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.LinkedEntities = append(x.LinkedEntities, *xxx)
				}
			}
		case "rawConfiguration":
			err = json.Unmarshal(*v, &x.RawConfiguration)
			if err != nil {
				return err
			}
		case "title":
			err = json.Unmarshal(*v, &x.Title)
			if err != nil {
				return err
			}
		case "visualization":
			err = json.Unmarshal(*v, &x.Visualization)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// DashboardWidgetConfiguration - Typed configuration for known visualizations. Only one (at most) will be populated for a given widget.
type DashboardWidgetConfiguration struct {
	// Configuration for visualization type 'viz.area'
	Area DashboardAreaWidgetConfiguration `json:"area,omitempty"`
	// Configuration for visualization type 'viz.bar'
	Bar DashboardBarWidgetConfiguration `json:"bar,omitempty"`
	// Configuration for visualization type 'viz.billboard'
	Billboard DashboardBillboardWidgetConfiguration `json:"billboard,omitempty"`
	// Configuration for visualization type 'viz.line'
	Line DashboardLineWidgetConfiguration `json:"line,omitempty"`
	// Configuration for visualization type 'viz.markdown'
	Markdown DashboardMarkdownWidgetConfiguration `json:"markdown,omitempty"`
	// Configuration for visualization type 'viz.pie'
	Pie DashboardPieWidgetConfiguration `json:"pie,omitempty"`
	// Configuration for visualization type 'viz.table'
	Table DashboardTableWidgetConfiguration `json:"table,omitempty"`
}

// DashboardWidgetLayout - Widget layout.
type DashboardWidgetLayout struct {
	// column.
	Column int `json:"column,omitempty"`
	// height.
	Height int `json:"height,omitempty"`
	// row.
	Row int `json:"row,omitempty"`
	// width.
	Width int `json:"width,omitempty"`
}

// DashboardWidgetNRQLQuery - Single NRQL query for a widget.
type DashboardWidgetNRQLQuery struct {
	// accountId
	AccountID int `json:"accountId"`
	// NRQL formatted query
	Query nrdb.NRQL `json:"query"`
}

// DashboardWidgetQuery - Single NRQL query for a widget.
type DashboardWidgetQuery struct {
	// accountId
	AccountID int `json:"accountId"`
	// NRQL formatted query
	NRQL nrdb.NRQL `json:"nrql"`
}

// DashboardWidgetVisualization - visualization configuration
type DashboardWidgetVisualization struct {
	// Nerdpack artifact ID
	ID string `json:"id,omitempty"`
}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type Entity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *Entity) ImplementsEntity() {}

// EntityAlertViolation -
type EntityAlertViolation struct {
	// A link to the agent in the time window in which the violation occurred.
	AgentURL string `json:"agentUrl,omitempty"`
	// The severity of the violation.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Timestamp of when the violation was closed.
	ClosedAt nrtime.EpochMilliseconds `json:"closedAt,omitempty"`
	// The description of the violation.
	Label string `json:"label,omitempty"`
	// The priority of the violation.
	Level string `json:"level,omitempty"`
	// Timestamp of when the violation was opened.
	OpenedAt nrtime.EpochMilliseconds `json:"openedAt,omitempty"`
	// The id of the violation.
	ViolationId int `json:"violationId,omitempty"`
	// A link to the violation if it is connected to an incident.
	ViolationURL string `json:"violationUrl,omitempty"`
}

// EntityCollection - A collection of user defined Entities and Entity Search queries.
type EntityCollection struct {
	// The account the collection is part of
	Account accounts.AccountReference `json:"account,omitempty"`
	// The user who created the collection
	CreatedBy UserReference `json:"createdBy,omitempty"`
	// The definition of the collection.
	Definition EntityCollectionDefinition `json:"definition,omitempty"`
	// The GUID of the Entity
	GUID EntityGUID `json:"guid,omitempty"`
	// The result of searching for the members of the collection.
	Members EntitySearch `json:"members,omitempty"`
	// The name of the collection.
	Name string `json:"name,omitempty"`
	// The type of Collection
	Type EntityCollectionType `json:"type,omitempty"`
}

// EntityCollectionDefinition - The definition of a collection.
type EntityCollectionDefinition struct {
	// A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
	EntityGUIDs []EntityGUID `json:"entityGuids,omitempty"`
	// The Entity Search query that returns the full collection of entities.
	EntitySearchQuery string `json:"entitySearchQuery,omitempty"`
	// The Accounts that will be used to scope the collection.
	ScopeAccounts EntityCollectionScopeAccounts `json:"scopeAccounts,omitempty"`
	// A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.
	SearchQueries []string `json:"searchQueries,omitempty"`
}

// EntityCollectionScopeAccounts - The Accounts used to scope a collection.
type EntityCollectionScopeAccounts struct {
	// The Account IDs that make up the account scoping.
	AccountIDs []int `json:"accountIds,omitempty"`
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *EntityOutline) ImplementsEntityOutline() {}

// EntityRelationship - An entity relationship
type EntityRelationship struct {
	// The source entity of the relationship.
	Source EntityRelationshipNode `json:"source,omitempty"`
	// The target entity of the relationship.
	Target EntityRelationshipNode `json:"target,omitempty"`
	// The type of the relationship. For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Type EntityRelationshipType `json:"type,omitempty"`
}

// EntityRelationshipFilter - Relationship filter
type EntityRelationshipFilter struct {
	// Filter the relationships to those that contain a specific entity type.
	EntityType []EntityType `json:"entityType,omitempty"`
	// Filter the relationships to those that contain a specific Infrastructure integration entity type
	InfrastructureIntegrationType []EntityInfrastructureIntegrationType `json:"infrastructureIntegrationType,omitempty"`
}

// EntityRelationshipNode - A node in an Entity relationship.
type EntityRelationshipNode struct {
	// The Account ID for the relationship node.
	AccountID int `json:"accountId,omitempty"`
	//
	Entity EntityOutlineInterface `json:"entity,omitempty"`
	// The `EntityType` of the relationship node.
	EntityType EntityType `json:"entityType,omitempty"`
	// The Entity `guid` for the relationship node.
	GUID EntityGUID `json:"guid,omitempty"`
}

// special
func (x *EntityRelationshipNode) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "accountId":
			err = json.Unmarshal(*v, &x.AccountID)
			if err != nil {
				return err
			}
		case "entity":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityOutlineInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Entity = *xxx
			}
		case "entityType":
			err = json.Unmarshal(*v, &x.EntityType)
			if err != nil {
				return err
			}
		case "guid":
			err = json.Unmarshal(*v, &x.GUID)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntitySearch - A data structure that contains the detailed response of an entity search.
//
// The direct search result is available through `results`. Information about the
// query itself is available through `query`, `types`, and `count`.
type EntitySearch struct {
	// The number of entities returned by the entity search.
	Count int `json:"count,omitempty"`
	// A count of the Entity Search results faceted by a chosen set of criteria.
	//
	// Note: Unlike a NRQL facet, the facet results do not include entities where the facet value does not exist. Additionally, entities can be tagged with multiple tag values for one tag key. For these reasons, depending on the facet values chosen, the `counts` field will not always equal the `entitySearch.count` field.
	Counts []EntitySearchCounts `json:"counts,omitempty"`
	// The entity search query string.
	Query string `json:"query,omitempty"`
	// The paginated results of the entity search.
	Results EntitySearchResult `json:"results,omitempty"`
	// The entity types returned by the entity search.
	Types []EntitySearchTypes `json:"types,omitempty"`
}

// EntitySearchCounts - The groupings and counts of entities returned for the specified criteria.
type EntitySearchCounts struct {
	// The number of entities that match the specified criteria.
	Count int `json:"count,omitempty"`
	// The group of entities returned for the specified criteria.
	Facet AttributeMap `json:"facet,omitempty"`
}

// EntitySearchOptions - Additional entity search options.
type EntitySearchOptions struct {
	// Whether or not matching on tag keys and values should be case-sensitive.
	CaseSensitiveTagMatching bool `json:"caseSensitiveTagMatching,omitempty"`
}

// EntitySearchQueryBuilder - An object that can be used to discover and create the entity search query argument.
type EntitySearchQueryBuilder struct {
	// The alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity domain.
	Domain EntitySearchQueryBuilderDomain `json:"domain,omitempty"`
	// The Infrastructure integration type. This should be used in place of the `type` field to search for Infrastructure integration specific types.
	InfrastructureIntegrationType EntityInfrastructureIntegrationType `json:"infrastructureIntegrationType,omitempty"`
	// The entity name.
	Name string `json:"name,omitempty"`
	// The reporting status of the entity.
	Reporting bool `json:"reporting,omitempty"`
	// A list of tags applied to the entity.
	Tags []EntitySearchQueryBuilderTag `json:"tags,omitempty"`
	// The entity type.
	//
	// If you are querying for Infrastructure integration types, use the `infrastructureIntegrationType` field instead of `type`.
	Type EntitySearchQueryBuilderType `json:"type,omitempty"`
}

// EntitySearchQueryBuilderTag - An entity tag.
type EntitySearchQueryBuilderTag struct {
	// The tag key.
	Key string `json:"key"`
	// The tag value.
	Value string `json:"value"`
}

// EntitySearchResult - A section of the entity search results. If there is a `nextCursor` present, there are more results available.
type EntitySearchResult struct {
	// The entities contained in this section of the entity search results.
	//
	// For information on New Relic entities, visit [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
	//
	// To see some query examples of entity information,
	// visit [our entity GraphQL API docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entities []EntityOutlineInterface `json:"entities,omitempty"`
	// The next cursor for fetching additional paginated entity search results.
	NextCursor string `json:"nextCursor,omitempty"`
}

// special
func (x *EntitySearchResult) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "entities":
			if v == nil {
				continue
			}
			var rawMessageEntities []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageEntities)
			if err != nil {
				return err
			}

			for _, m := range rawMessageEntities {
				xxx, err := UnmarshalEntityOutlineInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Entities = append(x.Entities, *xxx)
				}
			}
		case "nextCursor":
			err = json.Unmarshal(*v, &x.NextCursor)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntitySearchTypes - A detailed entity search response object type.
type EntitySearchTypes struct {
	// The number of results with this type.
	Count int `json:"count,omitempty"`
	// The domain of the search result group.
	Domain string `json:"domain,omitempty"`
	// The combined domain & type of the search result group.
	EntityType EntityType `json:"entityType,omitempty"`
	// The type of the search result group.
	Type string `json:"type,omitempty"`
}

// EntityTag - A tag that has been applied to an entity.
type EntityTag struct {
	// The tag's key
	Key string `json:"key,omitempty"`
	// A list of the tag values
	Values []string `json:"values,omitempty"`
}

// EntityTagValueWithMetadata - The value and metadata of a single entity tag.
type EntityTagValueWithMetadata struct {
	// Whether or not the tag can be mutated by the user.
	Mutable bool `json:"mutable,omitempty"`
	// The tag value.
	Value string `json:"value,omitempty"`
}

// EntityTagWithMetadata - The tags with metadata of the entity.
type EntityTagWithMetadata struct {
	// The tag's key.
	Key string `json:"key,omitempty"`
	// A list of tag values with metadata information.
	Values []EntityTagValueWithMetadata `json:"values,omitempty"`
}

// GenericEntity - A generic entity.
type GenericEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from GenericEntity
func (x GenericEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from GenericEntity
func (x GenericEntity) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from GenericEntity
func (x GenericEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from GenericEntity
func (x GenericEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from GenericEntity
func (x GenericEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from GenericEntity
func (x GenericEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from GenericEntity
func (x GenericEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from GenericEntity
func (x GenericEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from GenericEntity
func (x GenericEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from GenericEntity
func (x GenericEntity) GetPermalink() string {
	return x.Permalink
}

// GetRelationships returns a pointer to the value of Relationships from GenericEntity
func (x GenericEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from GenericEntity
func (x GenericEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from GenericEntity
func (x GenericEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from GenericEntity
func (x GenericEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from GenericEntity
func (x GenericEntity) GetType() string {
	return x.Type
}

func (x *GenericEntity) ImplementsEntity() {}

// GenericEntityOutline - A generic entity outline.
type GenericEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from GenericEntityOutline
func (x GenericEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from GenericEntityOutline
func (x GenericEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from GenericEntityOutline
func (x GenericEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from GenericEntityOutline
func (x GenericEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from GenericEntityOutline
func (x GenericEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from GenericEntityOutline
func (x GenericEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from GenericEntityOutline
func (x GenericEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from GenericEntityOutline
func (x GenericEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from GenericEntityOutline
func (x GenericEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from GenericEntityOutline
func (x GenericEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from GenericEntityOutline
func (x GenericEntityOutline) GetType() string {
	return x.Type
}

func (x *GenericEntityOutline) ImplementsEntityOutline() {}

// GenericInfrastructureEntity - An Infrastructure entity.
type GenericInfrastructureEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetDomain returns a pointer to the value of Domain from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from GenericInfrastructureEntity
func (x GenericInfrastructureEntity) GetType() string {
	return x.Type
}

func (x *GenericInfrastructureEntity) ImplementsInfrastructureIntegrationEntity() {}

func (x *GenericInfrastructureEntity) ImplementsAlertableEntity() {}

func (x *GenericInfrastructureEntity) ImplementsEntity() {}

// GenericInfrastructureEntityOutline - An Infrastructure entity outline.
type GenericInfrastructureEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetDomain returns a pointer to the value of Domain from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

// GetName returns a pointer to the value of Name from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from GenericInfrastructureEntityOutline
func (x GenericInfrastructureEntityOutline) GetType() string {
	return x.Type
}

func (x *GenericInfrastructureEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsEntityOutline() {}

// InfrastructureAwsLambdaFunctionEntity - An AWS Lambda Function entity.
type InfrastructureAwsLambdaFunctionEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	//
	Runtime string `json:"runtime,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetDomain returns a pointer to the value of Domain from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetReporting() bool {
	return x.Reporting
}

// GetRuntime returns a pointer to the value of Runtime from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetRuntime() string {
	return x.Runtime
}

// GetTags returns a pointer to the value of Tags from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from InfrastructureAwsLambdaFunctionEntity
func (x InfrastructureAwsLambdaFunctionEntity) GetType() string {
	return x.Type
}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsInfrastructureIntegrationEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsEntity() {}

// InfrastructureAwsLambdaFunctionEntityOutline - An AWS Lambda Function entity outline.
type InfrastructureAwsLambdaFunctionEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	//
	Runtime string `json:"runtime,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetDomain returns a pointer to the value of Domain from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

// GetName returns a pointer to the value of Name from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetRuntime returns a pointer to the value of Runtime from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetRuntime() string {
	return x.Runtime
}

// GetTags returns a pointer to the value of Tags from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from InfrastructureAwsLambdaFunctionEntityOutline
func (x InfrastructureAwsLambdaFunctionEntityOutline) GetType() string {
	return x.Type
}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {
}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsEntityOutline() {}

// InfrastructureHostEntity - An Infrastructure Host entity.
type InfrastructureHostEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Recent violations on the Infrastructure entity.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	//
	HostSummary InfrastructureHostSummaryData `json:"hostSummary,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Infrastructure entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetDomain returns a pointer to the value of Domain from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetHostSummary returns a pointer to the value of HostSummary from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetHostSummary() InfrastructureHostSummaryData {
	return x.HostSummary
}

// GetIndexedAt returns a pointer to the value of IndexedAt from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from InfrastructureHostEntity
func (x InfrastructureHostEntity) GetType() string {
	return x.Type
}

func (x *InfrastructureHostEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureHostEntity) ImplementsEntity() {}

// InfrastructureHostEntityOutline - An Infrastructure Host entity outline.
type InfrastructureHostEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Infrastructure entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	//
	HostSummary InfrastructureHostSummaryData `json:"hostSummary,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetDomain returns a pointer to the value of Domain from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetHostSummary returns a pointer to the value of HostSummary from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetHostSummary() InfrastructureHostSummaryData {
	return x.HostSummary
}

// GetIndexedAt returns a pointer to the value of IndexedAt from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from InfrastructureHostEntityOutline
func (x InfrastructureHostEntityOutline) GetType() string {
	return x.Type
}

func (x *InfrastructureHostEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureHostEntityOutline) ImplementsEntityOutline() {}

// InfrastructureHostSummaryData - Summary statistics about the Infra Host.
type InfrastructureHostSummaryData struct {
	// Total CPU utilization as a percentage.
	CpuUtilizationPercent float64 `json:"cpuUtilizationPercent,omitempty"`
	// The cumulative disk fullness percentage.
	DiskUsedPercent float64 `json:"diskUsedPercent,omitempty"`
	// Total memory utilization as a percentage.
	MemoryUsedPercent float64 `json:"memoryUsedPercent,omitempty"`
	// The number of bytes per second received during the sampling period.
	NetworkReceiveRate float64 `json:"networkReceiveRate,omitempty"`
	// The number of bytes sent per second during the sampling period.
	NetworkTransmitRate float64 `json:"networkTransmitRate,omitempty"`
	// Number of services running on the host.
	ServicesCount int `json:"servicesCount,omitempty"`
}

// InfrastructureIntegrationEntity -
type InfrastructureIntegrationEntity struct {
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from InfrastructureIntegrationEntity
func (x InfrastructureIntegrationEntity) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

func (x *InfrastructureIntegrationEntity) ImplementsInfrastructureIntegrationEntity() {}

// InfrastructureIntegrationEntityOutline -
type InfrastructureIntegrationEntityOutline struct {
	//
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
}

// GetIntegrationTypeCode returns a pointer to the value of IntegrationTypeCode from InfrastructureIntegrationEntityOutline
func (x InfrastructureIntegrationEntityOutline) GetIntegrationTypeCode() string {
	return x.IntegrationTypeCode
}

func (x *InfrastructureIntegrationEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {}

// MetricNormalizationRule - An object that represents a metric rename rule.
type MetricNormalizationRule struct {
	// Rule action.
	Action MetricNormalizationRuleAction `json:"action,omitempty"`
	// Application GUID
	ApplicationGUID EntityGUID `json:"applicationGuid,omitempty"`
	// Application Name
	ApplicationName string `json:"applicationName,omitempty"`
	// Date of rule creation.
	CreatedAt nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// Is rule enabled?
	Enabled bool `json:"enabled"`
	// Rule Id
	ID int `json:"id"`
	// Metric Match Expression.
	MatchExpression string `json:"matchExpression"`
	// Notes.
	Notes string `json:"notes,omitempty"`
	// Metric Replacement Expression.
	Replacement string `json:"replacement,omitempty"`
}

// MobileAppSummaryData - Mobile application summary data
type MobileAppSummaryData struct {
	// The number of times the app has been launched.
	AppLaunchCount int `json:"appLaunchCount,omitempty"`
	// The number of crashes.
	CrashCount int `json:"crashCount,omitempty"`
	// Crash rate is percentage of crashes per sessions.
	CrashRate float64 `json:"crashRate,omitempty"`
	// Error rate is the percentage of http errors per successful requests.
	HttpErrorRate float64 `json:"httpErrorRate,omitempty"`
	// The number of http requests.
	HttpRequestCount int `json:"httpRequestCount,omitempty"`
	// The rate of http requests per minute.
	HttpRequestRate float64 `json:"httpRequestRate,omitempty"`
	// The average response time for all http calls.
	HttpResponseTimeAverage nrtime.Seconds `json:"httpResponseTimeAverage,omitempty"`
	// The number of mobile sessions.
	MobileSessionCount int `json:"mobileSessionCount,omitempty"`
	// Network failure rate is the percentage of network failures per successful requests.
	NetworkFailureRate float64 `json:"networkFailureRate,omitempty"`
	// The number of users affected by crashes.
	UsersAffectedCount int `json:"usersAffectedCount,omitempty"`
}

// MobileApplicationEntity - A Mobile Application entity.
type MobileApplicationEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Mobile App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the Mobile App that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Mobile App.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from MobileApplicationEntity
func (x MobileApplicationEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from MobileApplicationEntity
func (x MobileApplicationEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from MobileApplicationEntity
func (x MobileApplicationEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from MobileApplicationEntity
func (x MobileApplicationEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetApplicationID returns a pointer to the value of ApplicationID from MobileApplicationEntity
func (x MobileApplicationEntity) GetApplicationID() int {
	return x.ApplicationID
}

// GetDomain returns a pointer to the value of Domain from MobileApplicationEntity
func (x MobileApplicationEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from MobileApplicationEntity
func (x MobileApplicationEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from MobileApplicationEntity
func (x MobileApplicationEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from MobileApplicationEntity
func (x MobileApplicationEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetMobileSummary returns a pointer to the value of MobileSummary from MobileApplicationEntity
func (x MobileApplicationEntity) GetMobileSummary() MobileAppSummaryData {
	return x.MobileSummary
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from MobileApplicationEntity
func (x MobileApplicationEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from MobileApplicationEntity
func (x MobileApplicationEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from MobileApplicationEntity
func (x MobileApplicationEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from MobileApplicationEntity
func (x MobileApplicationEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from MobileApplicationEntity
func (x MobileApplicationEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from MobileApplicationEntity
func (x MobileApplicationEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from MobileApplicationEntity
func (x MobileApplicationEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from MobileApplicationEntity
func (x MobileApplicationEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from MobileApplicationEntity
func (x MobileApplicationEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from MobileApplicationEntity
func (x MobileApplicationEntity) GetType() string {
	return x.Type
}

func (x *MobileApplicationEntity) ImplementsAlertableEntity() {}

func (x *MobileApplicationEntity) ImplementsEntity() {}

// MobileApplicationEntityOutline - A Mobile Application entity outline.
type MobileApplicationEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Mobile App.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetApplicationID returns a pointer to the value of ApplicationID from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetApplicationID() int {
	return x.ApplicationID
}

// GetDomain returns a pointer to the value of Domain from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetMobileSummary returns a pointer to the value of MobileSummary from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetMobileSummary() MobileAppSummaryData {
	return x.MobileSummary
}

// GetName returns a pointer to the value of Name from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from MobileApplicationEntityOutline
func (x MobileApplicationEntityOutline) GetType() string {
	return x.Type
}

func (x *MobileApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *MobileApplicationEntityOutline) ImplementsEntityOutline() {}

// NerdStorageCollectionMember -
type NerdStorageCollectionMember struct {
	// The NerdStorage document.
	Document NerdStorageDocument `json:"document,omitempty"`
	// The documentId.
	ID string `json:"id,omitempty"`
}

// NerdStorageEntityScope -
type NerdStorageEntityScope struct {
	//
	Collection []NerdStorageCollectionMember `json:"collection,omitempty"`
	//
	Document NerdStorageDocument `json:"document,omitempty"`
}

// SecureCredentialEntity - A secure credential entity.
type SecureCredentialEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The description of the entity.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The domain-specific identifier for the entity.
	SecureCredentialId string `json:"secureCredentialId,omitempty"`
	// Summary statistics for the Synthetic Monitor Secure Credential.
	SecureCredentialSummary SecureCredentialSummaryData `json:"secureCredentialSummary,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
}

// GetAccount returns a pointer to the value of Account from SecureCredentialEntity
func (x SecureCredentialEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from SecureCredentialEntity
func (x SecureCredentialEntity) GetAccountID() int {
	return x.AccountID
}

// GetDescription returns a pointer to the value of Description from SecureCredentialEntity
func (x SecureCredentialEntity) GetDescription() string {
	return x.Description
}

// GetDomain returns a pointer to the value of Domain from SecureCredentialEntity
func (x SecureCredentialEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from SecureCredentialEntity
func (x SecureCredentialEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from SecureCredentialEntity
func (x SecureCredentialEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from SecureCredentialEntity
func (x SecureCredentialEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from SecureCredentialEntity
func (x SecureCredentialEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from SecureCredentialEntity
func (x SecureCredentialEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from SecureCredentialEntity
func (x SecureCredentialEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from SecureCredentialEntity
func (x SecureCredentialEntity) GetPermalink() string {
	return x.Permalink
}

// GetRelationships returns a pointer to the value of Relationships from SecureCredentialEntity
func (x SecureCredentialEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from SecureCredentialEntity
func (x SecureCredentialEntity) GetReporting() bool {
	return x.Reporting
}

// GetSecureCredentialId returns a pointer to the value of SecureCredentialId from SecureCredentialEntity
func (x SecureCredentialEntity) GetSecureCredentialId() string {
	return x.SecureCredentialId
}

// GetSecureCredentialSummary returns a pointer to the value of SecureCredentialSummary from SecureCredentialEntity
func (x SecureCredentialEntity) GetSecureCredentialSummary() SecureCredentialSummaryData {
	return x.SecureCredentialSummary
}

// GetTags returns a pointer to the value of Tags from SecureCredentialEntity
func (x SecureCredentialEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from SecureCredentialEntity
func (x SecureCredentialEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from SecureCredentialEntity
func (x SecureCredentialEntity) GetType() string {
	return x.Type
}

// GetUpdatedAt returns a pointer to the value of UpdatedAt from SecureCredentialEntity
func (x SecureCredentialEntity) GetUpdatedAt() nrtime.EpochMilliseconds {
	return x.UpdatedAt
}

func (x *SecureCredentialEntity) ImplementsEntity() {}

// SecureCredentialEntityOutline - A secure credential entity outline.
type SecureCredentialEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The description of the entity.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The domain-specific identifier for the entity.
	SecureCredentialId string `json:"secureCredentialId,omitempty"`
	// Summary statistics for the Synthetic Monitor Secure Credential.
	SecureCredentialSummary SecureCredentialSummaryData `json:"secureCredentialSummary,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
}

// GetAccount returns a pointer to the value of Account from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDescription returns a pointer to the value of Description from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetDescription() string {
	return x.Description
}

// GetDomain returns a pointer to the value of Domain from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetSecureCredentialId returns a pointer to the value of SecureCredentialId from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetSecureCredentialId() string {
	return x.SecureCredentialId
}

// GetSecureCredentialSummary returns a pointer to the value of SecureCredentialSummary from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetSecureCredentialSummary() SecureCredentialSummaryData {
	return x.SecureCredentialSummary
}

// GetTags returns a pointer to the value of Tags from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetType() string {
	return x.Type
}

// GetUpdatedAt returns a pointer to the value of UpdatedAt from SecureCredentialEntityOutline
func (x SecureCredentialEntityOutline) GetUpdatedAt() nrtime.EpochMilliseconds {
	return x.UpdatedAt
}

func (x *SecureCredentialEntityOutline) ImplementsEntityOutline() {}

// SecureCredentialSummaryData - Summary statistics for the Synthetic Monitor Secure Credential.
type SecureCredentialSummaryData struct {
	// The number of monitors that contain this secure credential and failed their last check.
	FailingMonitorCount int `json:"failingMonitorCount,omitempty"`
	// The number of monitors that contain this secure credential.
	MonitorCount int `json:"monitorCount,omitempty"`
}

// SyntheticMonitorEntity - A Synthetic Monitor entity.
type SyntheticMonitorEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Synthetic Monitor entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the Synthetics Monitor that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Assets produced during the execution of the check, such as screenshots
	Assets []SyntheticsSyntheticMonitorAsset `json:"assets,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The Synthetic Monitor ID
	MonitorId string `json:"monitorId,omitempty"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary,omitempty"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType,omitempty"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The duration in minutes between Synthetic Monitor runs.
	Period nrtime.Minutes `json:"period,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Synthetics Monitor.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetAssets returns a pointer to the value of Assets from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetAssets() []SyntheticsSyntheticMonitorAsset {
	return x.Assets
}

// GetDomain returns a pointer to the value of Domain from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetMonitorId returns a pointer to the value of MonitorId from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetMonitorId() string {
	return x.MonitorId
}

// GetMonitorSummary returns a pointer to the value of MonitorSummary from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetMonitorSummary() SyntheticMonitorSummaryData {
	return x.MonitorSummary
}

// GetMonitorType returns a pointer to the value of MonitorType from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetMonitorType() SyntheticMonitorType {
	return x.MonitorType
}

// GetMonitoredURL returns a pointer to the value of MonitoredURL from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetMonitoredURL() string {
	return x.MonitoredURL
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPeriod returns a pointer to the value of Period from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetPeriod() nrtime.Minutes {
	return x.Period
}

// GetPermalink returns a pointer to the value of Permalink from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from SyntheticMonitorEntity
func (x SyntheticMonitorEntity) GetType() string {
	return x.Type
}

func (x *SyntheticMonitorEntity) ImplementsAlertableEntity() {}

func (x *SyntheticMonitorEntity) ImplementsEntity() {}

// SyntheticMonitorEntityOutline - A Synthetic Monitor entity outline.
type SyntheticMonitorEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Synthetic Monitor entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The Synthetic Monitor ID
	MonitorId string `json:"monitorId,omitempty"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary,omitempty"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType,omitempty"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The duration in minutes between Synthetic Monitor runs.
	Period nrtime.Minutes `json:"period,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetDomain returns a pointer to the value of Domain from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetMonitorId returns a pointer to the value of MonitorId from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetMonitorId() string {
	return x.MonitorId
}

// GetMonitorSummary returns a pointer to the value of MonitorSummary from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetMonitorSummary() SyntheticMonitorSummaryData {
	return x.MonitorSummary
}

// GetMonitorType returns a pointer to the value of MonitorType from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetMonitorType() SyntheticMonitorType {
	return x.MonitorType
}

// GetMonitoredURL returns a pointer to the value of MonitoredURL from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetMonitoredURL() string {
	return x.MonitoredURL
}

// GetName returns a pointer to the value of Name from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetName() string {
	return x.Name
}

// GetPeriod returns a pointer to the value of Period from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetPeriod() nrtime.Minutes {
	return x.Period
}

// GetPermalink returns a pointer to the value of Permalink from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from SyntheticMonitorEntityOutline
func (x SyntheticMonitorEntityOutline) GetType() string {
	return x.Type
}

func (x *SyntheticMonitorEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *SyntheticMonitorEntityOutline) ImplementsEntityOutline() {}

// SyntheticMonitorSummaryData - Summary statistics for the Synthetic Monitor.
type SyntheticMonitorSummaryData struct {
	// The number of locations that are currently failing.
	LocationsFailing int `json:"locationsFailing,omitempty"`
	// The number of locations that are currently running.
	LocationsRunning int `json:"locationsRunning,omitempty"`
	//
	Status SyntheticMonitorStatus `json:"status,omitempty"`
	// The percentage of successful synthetic monitor checks in the last 24 hours.
	SuccessRate float64 `json:"successRate,omitempty"`
}

// SyntheticsSyntheticMonitorAsset - Asset produced during the execution of the check
type SyntheticsSyntheticMonitorAsset struct {
	// MIME type of asset
	Type string `json:"type,omitempty"`
	// Temporary url at which the asset is available for download
	URL string `json:"url,omitempty"`
}

// TaggingMutationError - An error object for tag mutations.
type TaggingMutationError struct {
	// A message explaining what the errors is about.
	Message string `json:"message,omitempty"`
	// The type of error.
	Type TaggingMutationErrorType `json:"type,omitempty"`
}

// TaggingMutationResult - The result of a tag mutation
type TaggingMutationResult struct {
	// An array containing errors, if any. These are expected errors listed in TagMutationErrorType which a request should be capable of handling appropriately.
	Errors []TaggingMutationError `json:"errors,omitempty"`
}

// TaggingTagInput - An object that represents a tag key-values pair.
type TaggingTagInput struct {
	// The tag key.
	Key string `json:"key"`
	// The tag values.
	Values []string `json:"values,omitempty"`
}

// TaggingTagValueInput - An object that represents a tag key-value pair
type TaggingTagValueInput struct {
	// The tag key.
	Key string `json:"key"`
	// The tag value.
	Value string `json:"value"`
}

// ThirdPartyServiceEntity - A third party service entity.
type ThirdPartyServiceEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Third Party Service entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the Third Party Service entity that were open during the specififed time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the Third Party Service entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetDomain returns a pointer to the value of Domain from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from ThirdPartyServiceEntity
func (x ThirdPartyServiceEntity) GetType() string {
	return x.Type
}

func (x *ThirdPartyServiceEntity) ImplementsAlertableEntity() {}

func (x *ThirdPartyServiceEntity) ImplementsEntity() {}

// ThirdPartyServiceEntityOutline - A third party service entity outline.
type ThirdPartyServiceEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the Third Party Service entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetDomain returns a pointer to the value of Domain from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from ThirdPartyServiceEntityOutline
func (x ThirdPartyServiceEntityOutline) GetType() string {
	return x.Type
}

func (x *ThirdPartyServiceEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ThirdPartyServiceEntityOutline) ImplementsEntityOutline() {}

// TimeWindowInput - Represents a time window input.
type TimeWindowInput struct {
	// The end time of the time window the number of milliseconds since the Unix epoch.
	EndTime nrtime.EpochMilliseconds `json:"endTime"`
	// The start time of the time window the number of milliseconds since the Unix epoch.
	StartTime nrtime.EpochMilliseconds `json:"startTime"`
}

// UnavailableEntity - An entity that is unavailable.
type UnavailableEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from UnavailableEntity
func (x UnavailableEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from UnavailableEntity
func (x UnavailableEntity) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from UnavailableEntity
func (x UnavailableEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from UnavailableEntity
func (x UnavailableEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from UnavailableEntity
func (x UnavailableEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from UnavailableEntity
func (x UnavailableEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from UnavailableEntity
func (x UnavailableEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from UnavailableEntity
func (x UnavailableEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from UnavailableEntity
func (x UnavailableEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from UnavailableEntity
func (x UnavailableEntity) GetPermalink() string {
	return x.Permalink
}

// GetRelationships returns a pointer to the value of Relationships from UnavailableEntity
func (x UnavailableEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from UnavailableEntity
func (x UnavailableEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from UnavailableEntity
func (x UnavailableEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from UnavailableEntity
func (x UnavailableEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from UnavailableEntity
func (x UnavailableEntity) GetType() string {
	return x.Type
}

func (x *UnavailableEntity) ImplementsEntity() {}

// UnavailableEntityOutline - An entity outline that is unavailable.
type UnavailableEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

// GetAccount returns a pointer to the value of Account from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetDomain returns a pointer to the value of Domain from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from UnavailableEntityOutline
func (x UnavailableEntityOutline) GetType() string {
	return x.Type
}

func (x *UnavailableEntityOutline) ImplementsEntityOutline() {}

// UserReference - The `UserReference` object provides basic identifying information about the user.
type UserReference struct {
	//
	Email string `json:"email,omitempty"`
	//
	Gravatar string `json:"gravatar,omitempty"`
	//
	ID int `json:"id,omitempty"`
	//
	Name string `json:"name,omitempty"`
}

// WorkloadEntity - A workload entity.
type WorkloadEntity struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the workload entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the members of the workload that were open during the specified time window.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	//
	Collection EntityCollection `json:"collection,omitempty"`
	// When the workload was created.
	CreatedAt nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// The user that created the workload.
	CreatedByUser UserReference `json:"createdByUser,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery nrdb.NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	//
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the members of the workload.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// When the workload was last updated.
	UpdatedAt nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus,omitempty"`
}

// GetAccount returns a pointer to the value of Account from WorkloadEntity
func (x WorkloadEntity) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from WorkloadEntity
func (x WorkloadEntity) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from WorkloadEntity
func (x WorkloadEntity) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetAlertViolations returns a pointer to the value of AlertViolations from WorkloadEntity
func (x WorkloadEntity) GetAlertViolations() []EntityAlertViolation {
	return x.AlertViolations
}

// GetCollection returns a pointer to the value of Collection from WorkloadEntity
func (x WorkloadEntity) GetCollection() EntityCollection {
	return x.Collection
}

// GetCreatedAt returns a pointer to the value of CreatedAt from WorkloadEntity
func (x WorkloadEntity) GetCreatedAt() nrtime.EpochMilliseconds {
	return x.CreatedAt
}

// GetCreatedByUser returns a pointer to the value of CreatedByUser from WorkloadEntity
func (x WorkloadEntity) GetCreatedByUser() UserReference {
	return x.CreatedByUser
}

// GetDomain returns a pointer to the value of Domain from WorkloadEntity
func (x WorkloadEntity) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from WorkloadEntity
func (x WorkloadEntity) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from WorkloadEntity
func (x WorkloadEntity) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from WorkloadEntity
func (x WorkloadEntity) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetNRDBQuery returns a pointer to the value of NRDBQuery from WorkloadEntity
func (x WorkloadEntity) GetNRDBQuery() nrdb.NRDBResultContainer {
	return x.NRDBQuery
}

// GetName returns a pointer to the value of Name from WorkloadEntity
func (x WorkloadEntity) GetName() string {
	return x.Name
}

// GetNerdStorage returns a pointer to the value of NerdStorage from WorkloadEntity
func (x WorkloadEntity) GetNerdStorage() NerdStorageEntityScope {
	return x.NerdStorage
}

// GetPermalink returns a pointer to the value of Permalink from WorkloadEntity
func (x WorkloadEntity) GetPermalink() string {
	return x.Permalink
}

// GetRecentAlertViolations returns a pointer to the value of RecentAlertViolations from WorkloadEntity
func (x WorkloadEntity) GetRecentAlertViolations() []EntityAlertViolation {
	return x.RecentAlertViolations
}

// GetRelationships returns a pointer to the value of Relationships from WorkloadEntity
func (x WorkloadEntity) GetRelationships() []EntityRelationship {
	return x.Relationships
}

// GetReporting returns a pointer to the value of Reporting from WorkloadEntity
func (x WorkloadEntity) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from WorkloadEntity
func (x WorkloadEntity) GetTags() []EntityTag {
	return x.Tags
}

// GetTagsWithMetadata returns a pointer to the value of TagsWithMetadata from WorkloadEntity
func (x WorkloadEntity) GetTagsWithMetadata() []EntityTagWithMetadata {
	return x.TagsWithMetadata
}

// GetType returns a pointer to the value of Type from WorkloadEntity
func (x WorkloadEntity) GetType() string {
	return x.Type
}

// GetUpdatedAt returns a pointer to the value of UpdatedAt from WorkloadEntity
func (x WorkloadEntity) GetUpdatedAt() nrtime.EpochMilliseconds {
	return x.UpdatedAt
}

// GetWorkloadStatus returns a pointer to the value of WorkloadStatus from WorkloadEntity
func (x WorkloadEntity) GetWorkloadStatus() WorkloadStatus {
	return x.WorkloadStatus
}

func (x *WorkloadEntity) ImplementsAlertableEntity() {}

func (x *WorkloadEntity) ImplementsCollectionEntity() {}

func (x *WorkloadEntity) ImplementsEntity() {}

// WorkloadEntityOutline - A workload entity outline.
type WorkloadEntityOutline struct {
	//
	Account accounts.AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the workload entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// When the workload was created.
	CreatedAt nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// The user that created the workload.
	CreatedByUser UserReference `json:"createdByUser,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The time the entity was indexed.
	IndexedAt nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// When the workload was last updated.
	UpdatedAt nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus,omitempty"`
}

// GetAccount returns a pointer to the value of Account from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetAccount() accounts.AccountOutline {
	return x.Account
}

// GetAccountID returns a pointer to the value of AccountID from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetAccountID() int {
	return x.AccountID
}

// GetAlertSeverity returns a pointer to the value of AlertSeverity from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetAlertSeverity() EntityAlertSeverity {
	return x.AlertSeverity
}

// GetCreatedAt returns a pointer to the value of CreatedAt from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetCreatedAt() nrtime.EpochMilliseconds {
	return x.CreatedAt
}

// GetCreatedByUser returns a pointer to the value of CreatedByUser from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetCreatedByUser() UserReference {
	return x.CreatedByUser
}

// GetDomain returns a pointer to the value of Domain from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetDomain() string {
	return x.Domain
}

// GetEntityType returns a pointer to the value of EntityType from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetEntityType() EntityType {
	return x.EntityType
}

// GetGUID returns a pointer to the value of GUID from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetGUID() EntityGUID {
	return x.GUID
}

// GetIndexedAt returns a pointer to the value of IndexedAt from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetIndexedAt() nrtime.EpochMilliseconds {
	return x.IndexedAt
}

// GetName returns a pointer to the value of Name from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetName() string {
	return x.Name
}

// GetPermalink returns a pointer to the value of Permalink from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetPermalink() string {
	return x.Permalink
}

// GetReporting returns a pointer to the value of Reporting from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetReporting() bool {
	return x.Reporting
}

// GetTags returns a pointer to the value of Tags from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetTags() []EntityTag {
	return x.Tags
}

// GetType returns a pointer to the value of Type from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetType() string {
	return x.Type
}

// GetUpdatedAt returns a pointer to the value of UpdatedAt from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetUpdatedAt() nrtime.EpochMilliseconds {
	return x.UpdatedAt
}

// GetWorkloadStatus returns a pointer to the value of WorkloadStatus from WorkloadEntityOutline
func (x WorkloadEntityOutline) GetWorkloadStatus() WorkloadStatus {
	return x.WorkloadStatus
}

func (x *WorkloadEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *WorkloadEntityOutline) ImplementsEntityOutline() {}

// WorkloadEntityRef - A reference to a New Relic entity.
type WorkloadEntityRef struct {
	// The unique entity identifier in New Relic.
	GUID EntityGUID `json:"guid,omitempty"`
}

// WorkloadStatus - Detailed information about the status of a workload.
type WorkloadStatus struct {
	// A description that provides additional details about the status of the workload.
	Description string `json:"description,omitempty"`
	// Indicates where the status value derives from.
	StatusSource WorkloadStatusSource `json:"statusSource,omitempty"`
	// The status of the workload.
	StatusValue WorkloadStatusValue `json:"statusValue,omitempty"`
	// A short description of the status of the workload.
	Summary string `json:"summary,omitempty"`
}

type entitiesResponse struct {
	Actor Actor `json:"actor"`
}

type entityResponse struct {
	Actor Actor `json:"actor"`
}

type entitySearchResponse struct {
	Actor Actor `json:"actor"`
}

// AttributeMap - This scalar represents a map of attributes in the form of key-value pairs.
type AttributeMap map[string]interface{}

// DashboardWidgetRawConfiguration - Raw JSON payload with full configuration of a widget.
type DashboardWidgetRawConfiguration []byte

// EntityGUID - An encoded Entity GUID
type EntityGUID string

// Float - The `Float` scalar type represents signed double-precision fractional
// values as specified by
// [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).
type Float string

// NerdStorageDocument - This scalar represents a NerdStorage document.
type NerdStorageDocument string

// AlertableEntity -
type AlertableEntityInterface interface {
	ImplementsAlertableEntity()
}

//yes
func UnmarshalAlertableEntityInterface(b []byte) (*AlertableEntityInterface, error) {
	var err error

	var rawMessageAlertableEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageAlertableEntity)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageAlertableEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntity":
			var interfaceType BrowserApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntity":
			var interfaceType InfrastructureHostEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntity":
			var interfaceType MobileApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntity":
			var interfaceType SyntheticMonitorEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntity":
			var interfaceType ThirdPartyServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageAlertableEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface AlertableEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface AlertableEntity was not matched against all PossibleTypes: %s", typeName)
}

// AlertableEntityOutline -
type AlertableEntityOutlineInterface interface {
	ImplementsAlertableEntityOutline()
}

//yes
func UnmarshalAlertableEntityOutlineInterface(b []byte) (*AlertableEntityOutlineInterface, error) {
	var err error

	var rawMessageAlertableEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageAlertableEntityOutline)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageAlertableEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntityOutline":
			var interfaceType BrowserApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntityOutline":
			var interfaceType InfrastructureHostEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntityOutline":
			var interfaceType MobileApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntityOutline":
			var interfaceType SyntheticMonitorEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntityOutline":
			var interfaceType ThirdPartyServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntityOutline":
			var interfaceType WorkloadEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageAlertableEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface AlertableEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface AlertableEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityInterface interface {
	ImplementsApmBrowserApplicationEntity()
}

//yes
func UnmarshalApmBrowserApplicationEntityInterface(b []byte) (*ApmBrowserApplicationEntityInterface, error) {
	var err error

	var rawMessageApmBrowserApplicationEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageApmBrowserApplicationEntity)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageApmBrowserApplicationEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx ApmBrowserApplicationEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageApmBrowserApplicationEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface ApmBrowserApplicationEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface ApmBrowserApplicationEntity was not matched against all PossibleTypes: %s", typeName)
}

// ApmBrowserApplicationEntityOutline - The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityOutlineInterface interface {
	ImplementsApmBrowserApplicationEntityOutline()
}

//yes
func UnmarshalApmBrowserApplicationEntityOutlineInterface(b []byte) (*ApmBrowserApplicationEntityOutlineInterface, error) {
	var err error

	var rawMessageApmBrowserApplicationEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageApmBrowserApplicationEntityOutline)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageApmBrowserApplicationEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx ApmBrowserApplicationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageApmBrowserApplicationEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface ApmBrowserApplicationEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface ApmBrowserApplicationEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntityInterface interface {
	ImplementsCollectionEntity()
}

//yes
func UnmarshalCollectionEntityInterface(b []byte) (*CollectionEntityInterface, error) {
	var err error

	var rawMessageCollectionEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageCollectionEntity)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageCollectionEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CollectionEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageCollectionEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface CollectionEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface CollectionEntity was not matched against all PossibleTypes: %s", typeName)
}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityInterface interface {
	ImplementsEntity()
	GetAccountID() int
	GetDomain() string
	GetGUID() EntityGUID
	GetName() string
	GetType() string
}

//yes
func UnmarshalEntityInterface(b []byte) (*EntityInterface, error) {
	var err error

	var rawMessageEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntity)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntity":
			var interfaceType ApmDatabaseInstanceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntity":
			var interfaceType ApmExternalServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntity":
			var interfaceType BrowserApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntity":
			var interfaceType DashboardEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "GenericEntity":
			var interfaceType GenericEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntity":
			var interfaceType InfrastructureHostEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntity":
			var interfaceType MobileApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntity":
			var interfaceType SecureCredentialEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntity":
			var interfaceType SyntheticMonitorEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntity":
			var interfaceType ThirdPartyServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntity":
			var interfaceType UnavailableEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface Entity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface Entity was not matched against all PossibleTypes: %s", typeName)
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutlineInterface interface {
	ImplementsEntityOutline()
	GetAccountID() int
	GetDomain() string
	GetGUID() EntityGUID
	GetName() string
	GetType() string
}

//yes
func UnmarshalEntityOutlineInterface(b []byte) (*EntityOutlineInterface, error) {
	var err error

	var rawMessageEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntityOutline)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntityOutline":
			var interfaceType ApmDatabaseInstanceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntityOutline":
			var interfaceType ApmExternalServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntityOutline":
			var interfaceType BrowserApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntityOutline":
			var interfaceType DashboardEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericEntityOutline":
			var interfaceType GenericEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntityOutline":
			var interfaceType InfrastructureHostEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntityOutline":
			var interfaceType MobileApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntityOutline":
			var interfaceType SecureCredentialEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntityOutline":
			var interfaceType SyntheticMonitorEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntityOutline":
			var interfaceType ThirdPartyServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntityOutline":
			var interfaceType UnavailableEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntityOutline":
			var interfaceType WorkloadEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface EntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface EntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// InfrastructureIntegrationEntity -
type InfrastructureIntegrationEntityInterface interface {
	ImplementsInfrastructureIntegrationEntity()
}

//yes
func UnmarshalInfrastructureIntegrationEntityInterface(b []byte) (*InfrastructureIntegrationEntityInterface, error) {
	var err error

	var rawMessageInfrastructureIntegrationEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageInfrastructureIntegrationEntity)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageInfrastructureIntegrationEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageInfrastructureIntegrationEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface InfrastructureIntegrationEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface InfrastructureIntegrationEntity was not matched against all PossibleTypes: %s", typeName)
}

// InfrastructureIntegrationEntityOutline -
type InfrastructureIntegrationEntityOutlineInterface interface {
	ImplementsInfrastructureIntegrationEntityOutline()
}

//yes
func UnmarshalInfrastructureIntegrationEntityOutlineInterface(b []byte) (*InfrastructureIntegrationEntityOutlineInterface, error) {
	var err error

	var rawMessageInfrastructureIntegrationEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageInfrastructureIntegrationEntityOutline)
	if err != nil {
		return nil, err
	}

	var typeName string

	if rawTypeName, ok := rawMessageInfrastructureIntegrationEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageInfrastructureIntegrationEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface InfrastructureIntegrationEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface InfrastructureIntegrationEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

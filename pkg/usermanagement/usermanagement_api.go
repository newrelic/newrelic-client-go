// Code generated by tutone: DO NOT EDIT
package usermanagement

import "context"

// An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
func (a *Usermanagement) GetAuthenticationDomains(
	cursor string,
	iD []string,
) (*UserManagementAuthenticationDomains, error) {
	return a.GetAuthenticationDomainsWithContext(context.Background(),
		cursor,
		iD,
	)
}

// An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
func (a *Usermanagement) GetAuthenticationDomainsWithContext(
	ctx context.Context,
	cursor string,
	iD []string,
) (*UserManagementAuthenticationDomains, error) {

	resp := authenticationDomainsResponse{}
	vars := map[string]interface{}{
		"cursor": cursor,
		"id":     iD,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getAuthenticationDomainsQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.Actor.Organization.UserManagement.AuthenticationDomains, nil
}

const getAuthenticationDomainsQuery = `query(
	$id: [ID!],
) { actor { organization { userManagement { authenticationDomains(
	id: $id,
) {
	authenticationDomains {
		id
		name
		provisioningType
	}
	nextCursor
	totalCount
} } } } }`

// Code generated by tutone: DO NOT EDIT
package usermanagement

import (
	"context"

	"github.com/newrelic/newrelic-client-go/v2/pkg/errors"
)

// A mutation for creating a group in an authentication domain.
func (a *Usermanagement) UserManagementCreateGroup(
	createGroupOptions UserManagementCreateGroup,
) (*UserManagementCreateGroupPayload, error) {
	return a.UserManagementCreateGroupWithContext(context.Background(),
		createGroupOptions,
	)
}

// A mutation for creating a group in an authentication domain.
func (a *Usermanagement) UserManagementCreateGroupWithContext(
	ctx context.Context,
	createGroupOptions UserManagementCreateGroup,
) (*UserManagementCreateGroupPayload, error) {

	resp := UserManagementCreateGroupQueryResponse{}
	vars := map[string]interface{}{
		"createGroupOptions": createGroupOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementCreateGroupMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementCreateGroupPayload, nil
}

type UserManagementCreateGroupQueryResponse struct {
	UserManagementCreateGroupPayload UserManagementCreateGroupPayload `json:"UserManagementCreateGroup"`
}

const UserManagementCreateGroupMutation = `mutation(
	$createGroupOptions: UserManagementCreateGroup,
) { userManagementCreateGroup(
	createGroupOptions: $createGroupOptions,
) {
	group {
		displayName
		id
		users {
			nextCursor
			totalCount
		}
	}
} }`

// A mutation for creating a user in an authentication domain.
func (a *Usermanagement) UserManagementCreateUser(
	createUserOptions UserManagementCreateUser,
) (*UserManagementCreateUserPayload, error) {
	return a.UserManagementCreateUserWithContext(context.Background(),
		createUserOptions,
	)
}

// A mutation for creating a user in an authentication domain.
func (a *Usermanagement) UserManagementCreateUserWithContext(
	ctx context.Context,
	createUserOptions UserManagementCreateUser,
) (*UserManagementCreateUserPayload, error) {

	resp := UserManagementCreateUserQueryResponse{}
	vars := map[string]interface{}{
		"createUserOptions": createUserOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementCreateUserMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementCreateUserPayload, nil
}

type UserManagementCreateUserQueryResponse struct {
	UserManagementCreateUserPayload UserManagementCreateUserPayload `json:"UserManagementCreateUser"`
}

const UserManagementCreateUserMutation = `mutation(
	$createUserOptions: UserManagementCreateUser!,
) { userManagementCreateUser(
	createUserOptions: $createUserOptions,
) {
	createdUser {
		authenticationDomainId
		email
		id
		name
		type {
			displayName
			id
		}
	}
} }`

// A mutation for deleting a group.
func (a *Usermanagement) UserManagementDeleteGroup(
	groupOptions UserManagementDeleteGroup,
) (*UserManagementDeleteGroupPayload, error) {
	return a.UserManagementDeleteGroupWithContext(context.Background(),
		groupOptions,
	)
}

// A mutation for deleting a group.
func (a *Usermanagement) UserManagementDeleteGroupWithContext(
	ctx context.Context,
	groupOptions UserManagementDeleteGroup,
) (*UserManagementDeleteGroupPayload, error) {

	resp := UserManagementDeleteGroupQueryResponse{}
	vars := map[string]interface{}{
		"groupOptions": groupOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementDeleteGroupMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementDeleteGroupPayload, nil
}

type UserManagementDeleteGroupQueryResponse struct {
	UserManagementDeleteGroupPayload UserManagementDeleteGroupPayload `json:"UserManagementDeleteGroup"`
}

const UserManagementDeleteGroupMutation = `mutation(
	$groupOptions: UserManagementDeleteGroup,
) { userManagementDeleteGroup(
	groupOptions: $groupOptions,
) {
	group {
		displayName
		id
		users {
			nextCursor
			totalCount
		}
	}
} }`

// A mutation for deleting a user.
func (a *Usermanagement) UserManagementDeleteUser(
	deleteUserOptions UserManagementDeleteUser,
) (*UserManagementDeleteUserPayload, error) {
	return a.UserManagementDeleteUserWithContext(context.Background(),
		deleteUserOptions,
	)
}

// A mutation for deleting a user.
func (a *Usermanagement) UserManagementDeleteUserWithContext(
	ctx context.Context,
	deleteUserOptions UserManagementDeleteUser,
) (*UserManagementDeleteUserPayload, error) {

	resp := UserManagementDeleteUserQueryResponse{}
	vars := map[string]interface{}{
		"deleteUserOptions": deleteUserOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementDeleteUserMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementDeleteUserPayload, nil
}

type UserManagementDeleteUserQueryResponse struct {
	UserManagementDeleteUserPayload UserManagementDeleteUserPayload `json:"UserManagementDeleteUser"`
}

const UserManagementDeleteUserMutation = `mutation(
	$deleteUserOptions: UserManagementDeleteUser!,
) { userManagementDeleteUser(
	deleteUserOptions: $deleteUserOptions,
) {
	deletedUser {
		id
	}
} }`

// A mutation for updating an existing group.
func (a *Usermanagement) UserManagementUpdateGroup(
	updateGroupOptions UserManagementUpdateGroup,
) (*UserManagementUpdateGroupPayload, error) {
	return a.UserManagementUpdateGroupWithContext(context.Background(),
		updateGroupOptions,
	)
}

// A mutation for updating an existing group.
func (a *Usermanagement) UserManagementUpdateGroupWithContext(
	ctx context.Context,
	updateGroupOptions UserManagementUpdateGroup,
) (*UserManagementUpdateGroupPayload, error) {

	resp := UserManagementUpdateGroupQueryResponse{}
	vars := map[string]interface{}{
		"updateGroupOptions": updateGroupOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementUpdateGroupMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementUpdateGroupPayload, nil
}

type UserManagementUpdateGroupQueryResponse struct {
	UserManagementUpdateGroupPayload UserManagementUpdateGroupPayload `json:"UserManagementUpdateGroup"`
}

const UserManagementUpdateGroupMutation = `mutation(
	$updateGroupOptions: UserManagementUpdateGroup,
) { userManagementUpdateGroup(
	updateGroupOptions: $updateGroupOptions,
) {
	group {
		displayName
		id
		users {
			nextCursor
			totalCount
		}
	}
} }`

// A mutation for updating an existing user.
func (a *Usermanagement) UserManagementUpdateUser(
	updateUserOptions UserManagementUpdateUser,
) (*UserManagementUpdateUserPayload, error) {
	return a.UserManagementUpdateUserWithContext(context.Background(),
		updateUserOptions,
	)
}

// A mutation for updating an existing user.
func (a *Usermanagement) UserManagementUpdateUserWithContext(
	ctx context.Context,
	updateUserOptions UserManagementUpdateUser,
) (*UserManagementUpdateUserPayload, error) {

	resp := UserManagementUpdateUserQueryResponse{}
	vars := map[string]interface{}{
		"updateUserOptions": updateUserOptions,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, UserManagementUpdateUserMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.UserManagementUpdateUserPayload, nil
}

type UserManagementUpdateUserQueryResponse struct {
	UserManagementUpdateUserPayload UserManagementUpdateUserPayload `json:"UserManagementUpdateUser"`
}

const UserManagementUpdateUserMutation = `mutation(
	$updateUserOptions: UserManagementUpdateUser!,
) { userManagementUpdateUser(
	updateUserOptions: $updateUserOptions,
) {
	user {
		email
		emailVerificationState
		groups {
			nextCursor
			totalCount
		}
		id
		lastActive
		name
		pendingUpgradeRequest {
			id
			message
		}
		timeZone
		type {
			displayName
			id
		}
	}
} }`

// container for authentication_domains enabling cursor based pagination
func (a *Usermanagement) GetAuthenticationDomains(
	authenticationDomainsID []string,
) (*[]UserManagementAuthenticationDomain, error) {
	return a.GetAuthenticationDomainsWithContext(context.Background(),
		authenticationDomainsID,
	)
}

// container for authentication_domains enabling cursor based pagination
func (a *Usermanagement) GetAllAuthenticationDomains() (*[]UserManagementAuthenticationDomain, error) {
	return a.GetAllAuthenticationDomainsWithContext(context.Background())
}

// container for authentication_domains enabling cursor based pagination
func (a *Usermanagement) GetAuthenticationDomainsWithContext(
	ctx context.Context,
	authenticationDomainsID []string,
) (*[]UserManagementAuthenticationDomain, error) {

	resp := authenticationDomainsResponse{}
	vars := map[string]interface{}{
		"authenticationDomainsID": authenticationDomainsID,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getAuthenticationDomainsQuery, vars, &resp); err != nil {
		return nil, err
	}

	if len(resp.Actor.Organization.UserManagement.AuthenticationDomains.AuthenticationDomains) == 0 {
		return nil, errors.NewNotFound("")
	}

	return &resp.Actor.Organization.UserManagement.AuthenticationDomains.AuthenticationDomains, nil
}

// GetAllAuthenticationDomainsWithContext is a modified function that uses a modified query to fetch all authentication domains (not query by ID)
func (a *Usermanagement) GetAllAuthenticationDomainsWithContext(
	ctx context.Context,
) (*[]UserManagementAuthenticationDomain, error) {

	resp := authenticationDomainsResponse{}

	vars := map[string]interface{}{}

	if err := a.client.NerdGraphQueryWithContext(ctx, getAllAuthenticationDomainsQuery, vars, &resp); err != nil {
		return nil, err
	}

	if len(resp.Actor.Organization.UserManagement.AuthenticationDomains.AuthenticationDomains) == 0 {
		return nil, errors.NewNotFound("")
	}

	return &resp.Actor.Organization.UserManagement.AuthenticationDomains.AuthenticationDomains, nil
}

//const getAuthenticationDomainsQuery = `query(
//	$authenticationDomainsID: ID!,
//) { actor { organization { userManagement { authenticationDomains(cursor: $authenticationDomainsCursor) { authenticationDomains(id: $authenticationDomainsID) { authenticationDomains {
//	id
//	name
//	provisioningType
//} } } } } } }`

// The following query is out of the scope of Tutone. DO NOT DELETE THIS.
// To be split into two queries based on user/group management usage (e.g. users need not be fetched if groups are needed)
const getAuthenticationDomainsQuery = `query ($authenticationDomainsID: [ID!]) {
  actor {
    organization {
      userManagement {
        authenticationDomains(id: $authenticationDomainsID) {
          authenticationDomains {
            groups {
              groups {
                displayName
                id
                users {
                  users {
                    email
                    id
                    name
                    timeZone
                  }
                  nextCursor
                  totalCount
                }
              }
              nextCursor
              totalCount
            }
            id
            name
            provisioningType
            users {
              users {
                email
                emailVerificationState
                groups {
                  groups {
                    displayName
                    id
                  }
                  nextCursor
                  totalCount
                }
                id
                lastActive
                name
                pendingUpgradeRequest {
                  id
                  message
                  requestedUserType {
                    displayName
                    id
                  }
                }
                timeZone
                type {
                  displayName
                  id
                }
              }
              nextCursor
              totalCount
            }
          }
        }
      }
    }
  }
}`

// The following query is out of the scope of Tutone. DO NOT DELETE THIS.
// To be split into two queries based on user/group management usage (e.g. users need not be fetched if groups are needed)
const getAllAuthenticationDomainsQuery = `query {
  actor {
    organization {
      userManagement {
        authenticationDomains {
          authenticationDomains {
            id
            name
            provisioningType
          }
        }
      }
    }
  }
}`

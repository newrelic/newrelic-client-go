// Code generated by tutone: DO NOT EDIT
package usermanagement

import (
	"github.com/newrelic/newrelic-client-go/v2/pkg/nrtime"
)

// UserManagementRequestedTierName - Valid request types for user change requests
type UserManagementRequestedTierName string

var UserManagementRequestedTierNameTypes = struct {
	// basic tier
	BASIC_USER_TIER UserManagementRequestedTierName
	// core tier
	CORE_USER_TIER UserManagementRequestedTierName
	// full tier
	FULL_USER_TIER UserManagementRequestedTierName
}{
	// basic tier
	BASIC_USER_TIER: "BASIC_USER_TIER",
	// core tier
	CORE_USER_TIER: "CORE_USER_TIER",
	// full tier
	FULL_USER_TIER: "FULL_USER_TIER",
}

// Actor - The `Actor` object contains fields that are scoped to the API user's access level.
type Actor struct {
	// The `organization` field is the entry point into data that is scoped to the user's organization.
	Organization Organization `json:"organization,omitempty"`
}

// AuthorizationManagementAuthenticationDomain - An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
type AuthorizationManagementAuthenticationDomain struct {
	// container for groups enabling cursor based pagination
	Groups AuthorizationManagementGroupSearch `json:"groups"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// the name of the object
	Name string `json:"name"`
}

// AuthorizationManagementAuthenticationDomainSearch - container for authentication domains enabling cursor based pagination
type AuthorizationManagementAuthenticationDomainSearch struct {
	// containers of users and groups
	AuthenticationDomains []AuthorizationManagementAuthenticationDomain `json:"authenticationDomains"`
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// AuthorizationManagementGrantedRole - A Granted Role represents the access given to a group.
type AuthorizationManagementGrantedRole struct {
	// the account that this role grants access to
	AccountID int `json:"accountId,omitempty"`
	// the name of the object
	DisplayName string `json:"displayName,omitempty"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// the name of the object
	Name string `json:"name"`
	// the organization this role grants access to
	OrganizationId string `json:"organizationId,omitempty"`
	// the role that defines this access
	RoleId int `json:"roleId"`
	// the type of the role
	Type string `json:"type"`
}

// AuthorizationManagementGrantedRoleSearch - container for roles enabling cursor based pagination
type AuthorizationManagementGrantedRoleSearch struct {
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the roles granted to this group
	Roles []AuthorizationManagementGrantedRole `json:"roles"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// AuthorizationManagementGroup - For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
type AuthorizationManagementGroup struct {
	// the name of the object
	DisplayName string `json:"displayName"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// container for roles enabling cursor based pagination
	Roles AuthorizationManagementGrantedRoleSearch `json:"roles"`
}

// AuthorizationManagementGroupSearch - container for groups enabling cursor based pagination
type AuthorizationManagementGroupSearch struct {
	// contains roles granted to users's groups
	Groups []AuthorizationManagementGroup `json:"groups"`
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// Organization - The `Organization` object provides basic data about an organization.
type Organization struct {
	// The customer id for the organization.
	CustomerId string `json:"customerId,omitempty"`
	// The name of the organization.
	Name string `json:"name,omitempty"`
	// The telemetry id for the organization
	TelemetryId string `json:"telemetryId,omitempty"`
	// This field provides access to UserManagement data.
	UserManagement UserManagementOrganizationStitchedFields `json:"userManagement,omitempty"`
}

// UserManagementAuthenticationDomain - An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
type UserManagementAuthenticationDomain struct {
	// container for groups enabling cursor based pagination
	Groups UserManagementGroups `json:"groups,omitempty"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// the name of the object
	Name string `json:"name"`
	// the method used to provision users in this authentication domain
	ProvisioningType string `json:"provisioningType"`
	// container for users enabling cursor based pagination
	Users UserManagementUsers `json:"users,omitempty"`
}

// UserManagementAuthenticationDomains - container for authentication domains enabling cursor based pagination
type UserManagementAuthenticationDomains struct {
	// container for authentication_domains enabling cursor based pagination
	AuthenticationDomains []UserManagementAuthenticationDomain `json:"authenticationDomains"`
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// UserManagementCreateUser - The input object representing the user being created
type UserManagementCreateUser struct {
	// The authentication domain id for the user to be created under.
	AuthenticationDomainId string `json:"authenticationDomainId"`
	// The email address of the user to be created.
	Email string `json:"email"`
	// The name of the user to be created.
	Name string `json:"name"`
	// The user type for the user to be created.
	UserType UserManagementRequestedTierName `json:"userType"`
}

// UserManagementCreateUserPayload - Autogenerated return type of CreateUser.
type UserManagementCreateUserPayload struct {
	// The user that was created
	CreatedUser UserManagementCreatedUser `json:"createdUser,omitempty"`
}

// UserManagementCreatedUser - A newly created user of New Relic scoped to an authentication domain.
type UserManagementCreatedUser struct {
	// Authentication domain of the created user.
	AuthenticationDomainId string `json:"authenticationDomainId,omitempty"`
	// Email address of the created user.
	Email string `json:"email"`
	// The ID of the created user.
	ID string `json:"id"`
	// The full name of the created user.
	Name string `json:"name"`
	// A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
	Type UserManagementUserType `json:"type"`
}

// UserManagementDeleteUser - The input object representing the user being deleted
type UserManagementDeleteUser struct {
	// The ID of the user to be deleted
	ID string `json:"id"`
}

// UserManagementDeleteUserPayload - Autogenerated return type of DeleteUser.
type UserManagementDeleteUserPayload struct {
	// The user that was deleted
	DeletedUser UserManagementDeletedUser `json:"deletedUser,omitempty"`
}

// UserManagementDeletedUser - A user of New Relic to be deleted.
type UserManagementDeletedUser struct {
	// The id of the deleted user
	ID string `json:"id"`
}

// UserManagementGroup - For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
type UserManagementGroup struct {
	// the name of the object
	DisplayName string `json:"displayName"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// container for users enabling cursor based pagination
	Users UserManagementGroupUsers `json:"users,omitempty"`
}

// UserManagementGroupUser - User information returned within Groups
type UserManagementGroupUser struct {
	// The email of the user.
	Email string `json:"email"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// The full name of the user.
	Name string `json:"name"`
	// The configured time zone of the user.
	TimeZone string `json:"timeZone"`
}

// UserManagementGroupUsers - container for users enabling cursor based pagination
type UserManagementGroupUsers struct {
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
	// container for users enabling cursor based pagination
	Users []UserManagementGroupUser `json:"users"`
}

// UserManagementGroups - container for groups enabling cursor based pagination
type UserManagementGroups struct {
	// container for groups enabling cursor based pagination
	Groups []UserManagementGroup `json:"groups"`
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// UserManagementOrganizationStitchedFields -
type UserManagementOrganizationStitchedFields struct {
	// An "authentication domain" is a grouping of New Relic users governed by the same user management settings, like how they're provisioned (added and updated), how they're authenticated (logged in), session settings, and how user upgrades are managed.
	AuthenticationDomains UserManagementAuthenticationDomains `json:"authenticationDomains,omitempty"`
}

// UserManagementUpdateUser - The input object representing the user being updated
type UserManagementUpdateUser struct {
	// The new email address to be updated on the user
	Email string `json:"email,omitempty"`
	// The ID of the user to be updated
	ID string `json:"id"`
	// The full name of the user to be updated
	Name string `json:"name,omitempty"`
	// The user time zone to be updated, in IANA zoneinfo format, e.g. 'America/Chicago'
	TimeZone string `json:"timeZone,omitempty"`
	// The new user type to be updated on the user
	UserType UserManagementRequestedTierName `json:"userType,omitempty"`
}

// UserManagementUpdateUserPayload - Autogenerated return type of UpdateUser.
type UserManagementUpdateUserPayload struct {
	// The user that was updated
	User UserManagementUser `json:"user,omitempty"`
}

// UserManagementUser - A user of New Relic scoped to an authentication domain.
type UserManagementUser struct {
	// Email address of the user.
	Email string `json:"email,omitempty"`
	// One of: "Not Verifiable", "Verified", and "Pending".
	//
	// Not Verifiable: the user's email does not require verification.
	//
	// Verified: the user's email requires verification and has been.
	//
	// Pending: the user's email requires verification and has not been.
	EmailVerificationState string `json:"emailVerificationState"`
	// container for groups enabling cursor based pagination
	Groups UserManagementUserGroups `json:"groups,omitempty"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
	// The last active date of the user.
	LastActive nrtime.DateTime `json:"lastActive,omitempty"`
	// The full name of the user.
	Name string `json:"name,omitempty"`
	// Time zone of the user in IANA Time Zone database format, also known as the "Olson" time zone database format (for exmaple, "America/Los_Angeles").
	TimeZone string `json:"timeZone,omitempty"`
	// A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
	Type UserManagementUserType `json:"type"`
}

// UserManagementUserGroup - For users on our New Relic One user model, a "group" represents a group of users. Putting users in a group allows the managing of permissions for multiple users at the same time.
type UserManagementUserGroup struct {
	// the name of the object
	DisplayName string `json:"displayName"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
}

// UserManagementUserGroups - container for groups enabling cursor based pagination
type UserManagementUserGroups struct {
	// container for groups enabling cursor based pagination
	Groups []UserManagementUserGroup `json:"groups"`
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
}

// UserManagementUserType - A "user type" is what determines the set of New Relic capabilities a user can theoretically access.
type UserManagementUserType struct {
	// the name of the object
	DisplayName string `json:"displayName"`
	// a value that uniquely identifies this object
	ID string `json:"id"`
}

// UserManagementUsers - container for users enabling cursor based pagination
type UserManagementUsers struct {
	// an opaque cursor to supply with subsequent   requests to get the next page of results, null if there are no more pages
	NextCursor string `json:"nextCursor,omitempty"`
	// the total number of results
	TotalCount int `json:"totalCount"`
	// container for users enabling cursor based pagination
	Users []UserManagementUser `json:"users"`
}

type authenticationDomainsResponse struct {
	Actor Actor `json:"actor"`
}
